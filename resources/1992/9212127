%Paper: hep-th/9212127
%From: brower@BUCRF20.bu.edu (Richard Brower)
%Date: Mon, 21 Dec 92 20:45:04 -0500


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                            %
%   This file contains:                                                      %
%                                                                            %
%   1/ the TeX file for the article.                                         %
%      WARNING: you need harvmac.tex                                         %
%                                                                            %
%   2/ after "END OF TEX FILE": the Postscript file for 3 figures not        %
%                               inserted in the text.                        %
%                                                                            %
%      extract the ps file, print it, you should get 4 figures on 4 pages    %
%                                                                            %
%%%%%%%%%%%%%%%%%%%%%%%%% BEGINNING OF TEX FILE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\input harvmac

%NON-HARVARD COMMANDS !
\def\quarter{{\textstyle{1\over4}}} %puts a small quarter in a displayed eqn
\def\ignore#1{}
\parindent 25pt
\parskip 20pt
\baselineskip 13pt
\hfill{ Brown HET-863; CERN-TH.6611/92;  HUTP-92/A035; LPTHE-Orsay: 92/29}
{\nopagenumbers
\vskip .3in
\centerline{\titlefont Symmetry Breaking In the Double-Well}
\vskip .1in
\centerline{\titlefont Hermitian Matrix Models}
\abstractfont
\vskip .3in

 \centerline{{\bf Richard. C. Brower}\footnote{$^\dagger$}{Physics Department,
Boston University, Boston, MA 02215; Theory Division, CERN, CH-1211, Geneva 23,
Switzerland; (brower@buphy.bu.edu).},{\bf Nivedita Deo}\footnote{$^\star$}{Mary
Ingraham Bunting Institute, Radcliffe/Harvard University, Cambridge, MA 02138;
Lyman Laboratory of Physics, Harvard University,
Cambridge, MA 02138; (after 9/1/92, Physics Department, Indian Inst.of Science,
Bangalore 560012, India).},{\bf Sanjay Jain}\footnote{$^\diamond$}{Lyman
Laboratory of Physics, Harvard University, Cambridge, MA 02138;  (after
9/1/92, Centre for Theoretical Studies, Indian Inst.of Science, Bangalore
 560012, India).},
 {and}
 {\bf Chung-I Tan}\footnote{$^\circ$}{Physics
Department, Brown University, Providence, RI 02912; Theory Division, CERN,
CH-1211, Geneva 23, Switzerland; (tan@brownvm.brown.edu).}}




\vskip .3in
\centerline{\bf Abstract}

We study symmetry breaking in $Z_2$ symmetric large $N$ matrix models.
In the planar approximation for both the symmetric double-well
$\phi^4$ model and the symmetric Penner model, we find there is an
infinite family of broken symmetry solutions characterized by
different sets of recursion coefficients $R_n$ and $S_n$ that all lead
to identical free energies and eigenvalue densities.  These solutions
can be parameterized by an arbitrary angle $\theta(x)$, for each value
of $x = n/N < 1$. In the double scaling limit, this class reduces to a
smaller family of solutions with distinct free energies already at the
torus level. For the double-well $\phi^4$ theory the double scaling
string equations are parameterized by a conserved angular momentum
parameter in the range $0 \le l < \infty$ and a single arbitrary
$U(1)$ phase angle.

\vfill
%\noindent CERN-TH-6611/92\break
\noindent  August 1992
\hfill
\eject

}
%close nopagenumbers!


\pageno=1
\baselineskip=13pt plus 2pt minus 1pt



\newsec{Introduction}
We would like to highlight some unusual  aspects of symmetric
double-well matrix models
\ref\multicuti{Y. Shimamune, Phys. Lett. {\bf  B108} (1982) 407;
G.M. Cicuta, L. Molinari, and E. Montaldi, Mod. Phys. Lett.
{\bf  A1} (1986) 125, J. Phys {\bf  A23} (1990) L421;
J. Jurkiewicz, Phys. Lett. {\bf 245} (1990) 178;
G. Bhanot, G. Mandal, and O. Narayan, Phys. Lett. {\bf B251} (1990) 388.}%
\nref\DDJT{K. Demeterfi, N. Deo, S. Jain, and C-I Tan, Phys. Rev
{\bf  D42} (1990) 4105.}%
\nref\multicutii{L. Molinari, J. Phys. {\bf A21} (1988) 1;
O. Lechtenfeld, R. Ray, and A. Ray, Int. J. Mod. Phys. {\bf A6} (1991) 4491.}%
\nref\DSS{M. Douglas, N. Seiberg,  and S. Shenker, Phys. Lett. {\bf B244}
(1990) 381.}%
\nref\CM{C. Crnkovic and G. Moore, Phys. Lett. {\bf B257} (1991) 322.}%
\nref\MS{P. Mathieu and D. Senechal, Mod. Phys. Lett. {\bf A6} (1991) 819.}%
\nref\Nappi{C. Nappi, Mod. Phys. Lett. {\bf A5} (1990) 2773.}%
\nref\Pi{P.M.S. Petropoulos, Phys. Lett. {\bf B261} (1991) 402.}%
\nref\CDM{C. Crnkovic, M. Douglas, G. Moore, Yale and Rutgers preprint
YCTP- P25-91, RU-91-36.}-\ref\HMPN{T. Hollowood, L. Miramontes, A.
Pasquinucci, and C. Nappi, Nucl. Phys. {\bf B373} (1992) 247.}
%
concerning spontaneous symmetry breaking and the multiplicity of
solutions at the same critical point.  We consider two specific
models: (i) a $\phi^4$ theory with a symmetric double well and (ii)
the symmetric Gaussian Penner model
\ref\Ti{C-I Tan, Mod. Phys. Lett. {\bf A6} (1991) 1373.}%
\nref\Tii{C-I Tan, Phys. Rev. {\bf D45} (1992) 2862.}%
-\ref\CDL{S. Chaudhuri, H. Dykstra, and J. Lykken, Fermilab preprint
FERMI-CONF-91/190-T, to appear in the proceedings of the XXth International
Conference on Differential Geometric Methods in Theoretical Physics, New York,
June 1991.}. Both models have a $Z_2$ reflection symmetry and a standard
two-band solution that respects it. However we obtain new classes of solutions
that break the $Z_2$ symmetry by relaxing the initial boundary conditions on
the
first two recursion coefficients for the othogonal polynomials.


The single-band broken symmetry solution to the double-well $\phi^4$
theory is c=0 pure gravity, but at lower free energy there is an
infinite class of two-band solutions where
 the tree level eigenvalue density is symmetric
in  the two wells. These solutions have the property that
their free energy
and eigenvalue density, in the planar limit, are invariant with respect to
an infinite set of continuous parameters in the recursions
coefficients.  An analgous two-band class of broken symmetry solutions
is found in the Penner model as well.  In the double scaling limit for
the $\phi^4$ theory the degeneracy is lifted, except for a single U(1)
rotation, and a one parameter family of solutions survives satisfying
the Painleve-II equation with an extra conserved ``angular momentum''
parameter. At this stage the physical consequences of this degeneracy
of solutions are not clear. Since the tree level eigenvalue density is
the same for all these solutions it is possible that some of them
could tunnel into each other with an instanton action that is lower
order in $N$. If so, this would be  of particular interest  in the context
of the Gaussian Penner model, where one of the broken symmetry solutions
discussed is related to the $c=1$ string at twice the self-dual radius.



The organization of this paper is as follows: In section 2, we give a
brief overview of symmetry breaking and the formalism for the
orthogonal polynomial method. In section 3, we consider the
consequences of relaxing the boundary condition on the recursion
coefficients for the symmetric $\phi^4$ potential and the Gaussian
Penner model, and classify all two-cut solutions in the planar ($N
\rightarrow \infty$) limit. In particular we exhibit the class of
solutions that have the same tree level eigenvalue density and free
energy. We discuss some correlators that distinguish between the
various solutions and a numerical approach to investigating finite N
solutions. Section 4 discusses the double-scaling limit of the free
energy for both models emphasizing that one gets an expanded class of
double-scaling solutions.  The discussion and conclusions are given in
section 5.


\vfill\eject
\newsec{Overview of Problem}

It has been suggested that the singular behavior of the tree level
eigenvalue density near the edge of the cuts determines the critical
behavior of the matrix model in the following sense
\ref\evlore{V.A. Kazakov, Mod. Phys. Lett. {\bf A4} (1989) 2125;
D. Gross and A.A. Migdal, Nucl. Phys. {\bf B340} (1990) 333; H.
Neuberger, Nucl. Phys. {\bf B352} (1991) 689; S. Dalley, C. Johnson,
and T. Morris, Phys. Lett. {\bf B262} (1991) 18, Mod. Phys. Lett.
{\bf A6} (1991) 439; M. Bowick and E. Brezin, Phys. Lett. {\bf B268}
(1991) 21.}\CM\CDM: One identifies the polynomials in the matrix
variable $\phi$ or scaling operators $O_n$ ($O_n$'s are traces of the
polynomials) which produce a particular kind of singularity (labeled
by $n$) near the edge of the cut or cuts. Knowing the $O_n$'s, one
then considers $Z(t)=\int d\phi \exp[-\sum t_n O_n(\phi)]$ and shows
 that $Z(t)$ satisfies a certain hierarchy of equations.
This hierarchy depends, then, only on the kind of ensemble of matrices
considered (hermitian, antihermitian, unitary, etc.), the class of
singularities of the eigenvalue density allowed (e.g., single-cut
density with multiple zeroes coalescing at the edge, two cuts
colliding and sandwiching zeroes in between, etc.), and any symmetry
of the potential that restricts the class of eigenvalue densities
considered (e.g., restriction to even perturbations in $Z_2$ symmetric
2-cut models)
\HMPN.


{\noindent \it Orthogonal Polynomials}

It is generally believed  for potentials $V(\phi)= t_n O_n$ that
are bounded from below that the orthogonal polynomial method
\ref\BIZ{D. Bessis, Comm. Math. Phys. {\bf 69} (1979) 147;
D. Bessis, C. Itzykson, and J. B. Zuber, Adv. Appl. Math. {\bf 1}
(1980) 109.}  uniquely fixes the
solution for the free energy, correlators, etc. Here we
will show that orthogonal polynomial method actually allows one to
construct a whole class of closely related solutions.  To clarify this
further,  we remind the reader of the precise condition for a unique
solution for the free energy in terms of orthogonal polynomials.
Consider the partition function,
${Z_N=\int d\phi~~ e^{-N tr V(\phi)},}$
where $\phi$ is an $N \times N$ hermitian matrix and $V(\phi)$ is a real
potential. The integral is  expressed
in terms of  a set of  orthogonal polynomials $P_n(x)$,
$\int dx~ P_n(x) ~ P_m(x) ~e^{-N V(x)} = h_n \delta_{nm},$
normalized by the convention that the leading term for $P_n(x)$ is $x^n$,
${P_n(x)=x^n+c_1 x^{(n-1)}+......}$.
(Note that this convention sets $P_0(x) = 1$ or $h_0 =\int dx~ exp{[-N
V(x)]}.$) Since these orthogonal polynomials can be iteratively determined by
Gram-Schmidt orthogonalization, the exact free energy, $F_N = \log Z_N =
\sum_{n = 0}^{N-1} \log h_n,$ as well as all thermodynamic averages are {\it
uniquely} determined.

Instead of actually finding these orthogonal polynomials, one in practice  uses
recursion relations for the coefficients $R_n$ and $S_n$ in the expression, $x
P_n(x)=P_{n+1}(x)+S_n P_n(x)+R_n P_{n-1}(x)$. Once the $R_n$'s are known, the
 free
energy can be found by using the fact that $R_n=h_n/h_{n-1}$. It is convenient
to introduce a self-dual orthonormal basis $|n\rangle$, where $\langle
 x|n\rangle
= P_n(x)/\sqrt{h_n}$, and $|x\rangle$ are eigenvectors of the operator $\hat
\phi$ with eigenvalues $x$,  satisfying the normalization $\langle x'|x\rangle
=
exp(N V(x) )$ $\delta(x'-x)$.  Matrix elements of the operator ${\hat \phi}$
in this new orthonormal  basis are  directly related to the recursion
coefficients by $\langle m|{\hat
\phi}|n\rangle=\sqrt{R_m}\delta_{m,n+1}+S_n\delta_{m,n}
+\sqrt{R_n}\delta_{m,n-1}.$  In terms of ${\hat \phi}$, the recursion relations
for $R_n$ and $S_n$ can be expressed in operator notation,
%
\eqn\rseq{\eqalign{n/N&=\sqrt{R_n} \langle n-1|V'({\hat \phi})|n\rangle\cr
0&=\langle n|V'({\hat \phi})|n\rangle.\cr}}
%
Once initial conditions are specified, a {\it unique} solution for
$R_n$ and hence the normalization for each orthogonal polynomial,
$h_n$, can be found by iteration. For example, in the case of the $\phi^4$
 model,
Eq. \rseq\ is a pair of coupled two-term recursion equations for $R_n$ and
$S_n$
which require four inital conditions:  the numerical values
 %
\eqn\rseq{\eqalign{S_0 &= \langle
0|{\hat \phi}|0\rangle={h_0}^{-1}\int dx x e^{-NV(x)}\cr
R_1 &= \langle 0|{\hat \phi^2}|0\rangle -
\langle 0|{\hat \phi}|0\rangle^2= {h_0}^{-1}\int dx x^2 e^{-NV(x)}-S_0^2 ,\cr}}
%
and the trivial values $R_0=0$ and $S_{-1} = 0$, which are independent of
the potential. Given these values, all other coefficients are given
iteratively as rational function of $S_0$ and $R_1$.  (A more elegant
formulation would introduce  a single sequence of coeffients $C_k \propto
\langle 0|{\hat \phi^k}|0\rangle + ....$  with a single four-term recursion
relation $C_{k} = F_k(C_{k-1},C_{k-2},C_{k-3},C_{k-4})$, where $C_{k} =
R_{k/2}$ for k even and $C_{k} =S_{(k-1)/2}$ for k odd.)

{\noindent \it Symmetry Breaking}

This formalism  should make it clear that there is {\it no} ambiguity in
 defining the
matrix models for all {\it finite} $N$, assuming of course that the potential
is
{\it bounded from below} and that the integrals defining the inner product are
finite. However typical of all statistical mechanical problems this does not
imply that we know the correct way to take the thermodynamic (or in this
instance large $N$) limit. To understand this potential source of ambiguity in
using the
 recursion
relations at large $N$, consider the double-well potential,
${V(\phi)=\sigma \phi + \half \mu ~\phi^2+\quarter g ~\phi^4}$, with
$\mu<0$, $g>0$ and a small symmetry breaking term $\sigma \phi$.
To investigate symmetry breaking it is useful to study the effect of
interchanging the limits $N \rightarrow \infty$ and $\sigma
\rightarrow 0 \pm $ on the values of $S_0 = \langle 0|\hat \phi|0 \rangle$.
By $Z_2$ symmetry, if we take $\sigma \rightarrow 0\pm$ followed by $N
\rightarrow \infty$, we must get $S_0 = 0$, whereas if we take $N
\rightarrow \infty$ followed by $\sigma \rightarrow 0\pm$
we  have
%
\eqn\szeroone{S_0 = \pm \sqrt{-\mu/g},}
%
as can be demonstrated by using steepest descent at the stationary
minima of the potential $V(x)$.  Similarly, to complete  the necessary boundary
conditions, one can show  that $R_1 = \langle 0|\hat \phi^2 |0 \rangle - S_0^2$
takes on   $R_1 = {-\mu/g}$  and $R_1=0$ for these two limits respectively.
Now we can in principle use the recursion relations to obtain both symmetric
and
broken symmetry solutions. In general terms, this is just the familiar feature
of spontaneous symmtry breaking. For example the Ising model with no external
field on a finite lattice must  have $\langle s_i\rangle =
0$ by $Z_2$ symmetry, but in the large volume limit (at temperatures
below the Curie point) the relevant ({\it i.e.} stable) solution is a broken
vacua with non-zero values for $\langle s_i\rangle = \pm m$ obtained by
applying
an infinitesimal magnetic field.


As we will see shortly, a more general possibility  at {\it infinite $N$} is
to characterize the ``vacuum'' state for the double-well $\phi^4$ model  by a
mixing angle $\theta_0$, %
\eqn\vac{| 0, \theta_0 \rangle = cos(\theta_0/2) \; | 0, + \rangle +
 sin(\theta_0/2)\; | 0, - \rangle}
%
where $ | 0, \pm \rangle$ are
orthonormal and $\hat \phi | 0, \pm \rangle \simeq \pm \sqrt{-\mu/g} |
0, \pm \rangle$. As a consequence for the mixed state the  boundary conditions
 becomes
%
\eqn\szero{ S_0 = \sqrt{-\mu/g}\;cos(\theta_0),}
%
instead of \szeroone, with the  constraint,
%
\eqn\constraint{ R_1 = -\mu/g - S_0^2 \ge 0.}
%

The goal of this paper is to understand how the solutions of the
double-well matrix models depend on the initial boundary conditions,
{\it e.g.}, for the $\phi^4$ model, on the first two moments, $S_0$
and $R_1$.  In the large $N$ (or planar limit) we find a large class
of solutions consistent with the broken symmetry boundary condition in
addition to the (meta stable) pure gravity solution at higher free
energy.  Indeed we will show that the above qualitative discussion is
a rigorous consequence of the planar solutions in the two-band ansatz.
More generally however, we feel that the lack of a full understanding
of the effects of this boundary condition represents an important gap
in our ability to fully determine and solve the string equations
resulting from matrix models.
\vfill
\break\eject

\newsec{Multiple Solutions In Matrix Models : Tree Level Analysis}

In this section we establish the existence of multiple solutions in
two models: (i) the double well $\phi^4$ model and (ii) Gaussian Penner model.

\subsec{The Double Well $\phi^4$ potential}
For the double well potential ( ${V(\phi)=\sigma \phi + \half \mu
{}~\phi^2+\quarter g ~\phi^4}$), Eq. \rseq\ reduces to the recursion relations
%
\eqn\rseqmug{\eqalign{{n\over N}&=R_n [\mu+g
(R_{n+1}+R_n+R_{n-1}+S_n^2+S_{n-1}^2+ S_{n-1} S_n)]\cr 0&=\sigma + \mu S_n+g
[R_{n+1} (S_{n+1}+2 S_n)+R_n (2 S_n+S_{n-1})+S_n^3].\cr}}
%
We shall  first illustrate our procedure by considering a
symmetry-breaking solution under a period-one ansatz for both the R's and
S's: $R_n\rightarrow R({n\over N})$, $S_n\rightarrow S({n\over N})\neq 0$.
 Ignoring the $1/N$ corrections, Eq. \rseqmug\ leads to two relations, which
allow us to solve for $R(x)$ and $S(x)$:
%
\eqn\gravity{\eqalign{R(x) &=(1/15g)[-\mu-\sqrt{\mu^2-15gx}]\cr
S(x) &=\pm\sqrt{-\mu/g-6R(x)}.\cr}}
%
With $\mu<0$ and $g>0$, one has $R(0)=0$, $S(0)=\pm\sqrt{-\mu/g}$, consistent
with our discussion on symmetry breaking in Sec. 2, and $R(x)$ monotonically
increasing for $0<x<\mu^2/15g$.


The generating function $F(z)\equiv {1\over N}\langle Tr{1\over
z-\phi}\rangle$ for a period-one ansatz at the tree level can be
expressed in terms of $R(x)$ and $S(x)$ as follows:
%
\eqn\genfunoneband{F(z)=\int_0^1dx\int_0^{2\pi}{d\theta\over
2\pi}{1\over z-\phi(x,\theta)}=\int_0^1dx{1\over \sqrt{[z-S(x)]^2-4R(x)}},}
%
where $\phi(x,\theta)=S(x)+\sqrt{R(x)}(e^{i\theta}+e^{-i\theta})$. One can
 verify
by explicit calculation using \gravity\ that the eigenvalues lie in an interval
$[z_-,z_+]$, where $z_{\pm}\equiv S(1)\pm 2\sqrt{R(1)}$, with
a single-band  eigenvalue density, $\rho(z)$, in
agreement with the result of Shimamune (Ref. \multicuti) obtained by using the
Schwinger-Dyson equation.  On the line $\mu=-\sqrt{15g}$, $R(x)$ develops a
 square-root type singularity at $x=1$, leading to a Painleve-I equation in the
double scaling limit, appropriate for the $c=0$ 2D gravity solution.

Since all the eigenvalues are concentrated in a single well, this
symmetry-breaking solution does not correspond to a configuration with the
 lowest
free energy, but is a subdominant solution. In the double scaling limit it is
unstable against the tunnelling of a single eigenvalue into the other well,
exactly like the subdominant solution for the pure gravity in the $\phi^6$
model. We now turn to solutions which have eigenvalues in both
wells, which include a class of solutions for which $\rho(z)$ is exactly
$Z_2$-symmetric (when $\sigma=0$) at the tree level, but which in general break
this symmetry at higher order in ${1/N}.$

Let us  consider  a
period-two ansatz for both the R's and S's
%
\eqn\rsabcd{\eqalign{R_n&=A({n\over N})
\; , \;\; S_n=C({n\over N}) {\rm~~for~n=even}, \cr
R_n&=B({n\over N}) \; , \;\;  S_n=D({n\over N}){\rm~~for~n=odd}.\cr}}
%
Taking $A$, $B$, $C$ and $D$ to be continuous, and ignoring the $1/N$
corrections in the recursion equations \rseqmug, we obtain four tree level
recursion relations,
%
\eqna\abcd$$\eqalignno{2x&=\mu_{eff} (A+B)+ g (A^2 + 4AB +B^2), &\abcd a\cr
0&=(A-B)(A + B+ {\mu_{eff}\over g}), &\abcd b\cr 0&=2\sigma +\mu (C+D) +g [3
(A+B)(C+D) + C^3 +D^3 ],&\abcd c\cr 0&=(C-D)(A + B+ {\mu_{eff}\over g}),&\abcd
d\cr}$$
%
where $\mu_{eff}\equiv \mu +g(C^2+CD+D^2)$.

Since we have already considered the single-band (pure gravity
case), we can  assume that either $A \ne B$ or $C \ne D$. To carry out an
exhaustive analysis of the full set of solutions to these equations, it is
useful to note that only three out of the four equations are independent. The
three independent equations take the simple form,
%
\eqn\simple{{A+B-CD= -{\mu\over g}-(C+D)^2 ~, ~ A  B ={ x\over g}  ~,~~{\rm
and}~ V'[-(C+D )] = 0.}}
%
Note that there is no condition on $C-D$ which can be independently chosen
for every value of $x$. The first two equations allow one to express the
 explicit
solution for $A$ and $B$ in the familiar form\DDJT, %
\eqn\symmAB{ A ={1\over 2g}( - \mu_{eff} \pm \sqrt{\mu_{eff}^2 -4gx}~)
 \hskip30pt B = {1\over 2g}(- \mu_{eff} \mp \sqrt{\mu_{eff}^2 -4gx}~).}
%
In general for the double-well potential (for $\mu < 0$ and small
enough $\sigma$), there are three $x$-independent real solutions to $V'[-(C+D
)]
= 0$.  With $C+D$ fixed, it
follows that the first combination $A+B-CD$ in \simple\ is also fixed.
Consequently, a ``circular'' constraint on  $A-B$ and $C-D$ can be found
  %
\eqn\circleconstraint{(A-B)^2 + {4 x \over g} = {1 \over 16}[ (C-D)^2 +{4 \mu
\over g} + 3(C+D)^2]^2.}
%


This constraint can be represented by contours for each fixed value of
$x$, $0\leq x\leq 1$, in a two-dimensional plane with $A-B$ as the
vertical axis and $C-D$ the horizonal axis. In \fig\merdeglace{
Constraint on $A-B$ versus $C-D$ for $x=0,\>0.5,\>.75,\>.875,\>.95$,
with $\mu=-2$ and $g=1$.}, we exhibit them for the class of solutions
where $\sigma=0$ and $C+D=0$.  The external contour, corresponding to
$x=0$, is precisely the constraint suggested in the qualitative
discusion of symmtry breaking of Sec. 2. To see this one must consider
carefully the proper definitions at the boundary, namely $A - B = R_0
- R_1 = - R_1$ and $C = - D = S_0$ at $x=0$, which yields the
contraint Eq.
\constraint\ in the form,
%
$$R_1^2 = ( S_0^2 + \mu/g)^2.$$
%
For $x=x_{cr}\equiv \mu^2/4g$, the contour shrinks to a point, $A-B=C-D=0$,
about
which a double scaling limit can be taken \ref\critical{For
$x>x_{cr}$, only the symmetric one-band solution, $A=B$ and
$C=D=0$, survives. Criticality therefore occurs at
$x_{cr}=1$, {\it i.e.},  $\mu=-2\sqrt g$.}.

The different solutions to \simple\ can be parametrized by curves in
this plane traversing from the $x=0$ to the $x=1$ contours (see for example
fig.
4(b)).  For instance, a solution can be specified, at each value of $x$, by the
polar coordinate, $\theta(x)$, for the intersection of the curve with
the contour
\circleconstraint.
  Conversely, once $\theta(x)$ is chosen for every $x$, a unique solution to
Eq.
\simple, ($A(x), B(x), C(x), D(x)$), is obtained \ref\merparam{An
alternative parametrization is, $\quarter( C-D)^2 = (-\mu /g) \;
cos^2\theta(x)$ and $(A-B)^2 = (-\mu/g)^2 \; sin^4\theta(x) - 4 x/g$,
from which both the $x=0$ and $x=1$ contours can be readily obtained.
In this parametrization, $\theta(x)$ is restricted to
$-\theta_{max}\leq\theta(x) \leq \theta_max(0)$ where
$sin^4\theta_{max} = 4 g x/\mu^2$ and $\theta_{max}$ goes to $\pi/2$
at $x_{cr}$. Another convenient parametrization which turns all
contours into concentric circles is, $Y=r(x) sin \theta(x)\equiv A-B$,
$X=r(x) cos\theta(x)\equiv {\rm sign}(cos
\theta)[(-\mu/2g)(C-D)^2-(C-D)^4/16]^{-1/2}$, where
$r^2=(\mu/g)^2(x_{cr}-x)$. In this parametrization, $\theta(x)$ is
unrestricted.}. In analogy with \vac, each state, $|n\rangle$, $0\leq
n/N\leq 1$, in the large $N$ limit could be thought of as a linear
conbination of ``left-" and ``right" states, specified by an arbitrary
density function, $ \theta(x)$.  The choice of $\theta(x)$ represents
the ambiguity of solution at the tree level. (In fact the ``orbit''
need not even be continuous.  However, if the orbit is discontinuous,
derivatives of $A, B, C, D$ are large and cannot be ignored, as is
assumed in the tree level analysis.)


An interesting feature of these broken symmetry solutions is that,
within the class specified by one of the three values of $C+D$, they
all have the {\it same} tree level eigenvalue density and free energy.
To see this consider the generating function $F(z)\equiv {1\over N}
\langle Tr {1\over (z-{\phi})}\rangle$ for a {\it general} period-two ansatz at
 tree
level\ref\gentwoband{This representation for a period-two structure
was first derived in Ref. \DDJT\ under the symmetric ansatz where
$C=D=0$. With $C\neq 0\neq D$, in analogy to Eq. \genfunoneband, one
can introduce a $2\times 2$ matrix $\Phi_{\alpha,\beta}(x,\theta)$,
where $\alpha, \beta$ take on values 0 and 1, (for even and odd
respectively), i.e., $\Phi_{0,0}=C(x)$, $\Phi_{1,1}=D(x)$,
$\Phi_{0,1}=\sqrt A e^{i\theta}+\sqrt B e^{-i\theta}$, and
$\Phi_{1,0}=\sqrt A e^{-i\theta}+\sqrt B e^{i\theta}$. It follows that
$F(z)=1/2\int_{0}^1 dx\int_0^{2\pi}{d\theta\over
2\pi}\sum_{\alpha}[z-\Phi(x,\theta)]^{-1}_{\alpha,\alpha}$. The
$\theta$-integration can easily be carried out.} %
\eqn\gen{F(z)=1/2\int_{0}^1
dx{(2z-(C+D))\over\sqrt{[z^2-z(C+D)-(A+B-CD)]^2-4AB}}.}
%
 Notice that Eq. \gen\
involves precisely the three combinations, Eq. \simple, which are fixed by the
four recursion relations. Therefore, once the value of $C+D$ is chosen,
one gets the same generating
function $F(z)$. It follows that the tree level  eigenvalue density
$\rho(x)$  and  free energy are the {\bf same} for all solutions within a
class, {\it i.e.}, are independent of the choice of $\theta(x)$.


For the most part we now shall restrict further discusions to the case
$\sigma= 0$ and $C + D = 0$. All the solutions in this class give rise
to the same eigenvalue density $\rho(z)$. This class of solutions is
continuously deformable into the limiting case $A(x) \neq B(x)$,
$C(x)=D(x)=0$, which is just the standard {\it symmetric} solution for
the two-band solution, with $\mu_{eff}=\mu$.  At the other extreme
there is a {\it maximally asymmetric} two-band solution satisfying the
condition $A(x)=B(x)$, $C(x)=- D(x)\neq 0$, with
\eqn\asym{A(x)=B(x)=R(x)=\sqrt{x/g}, \hskip30pt
C(x)=-D(x)=\pm\left[{|\mu|/g}-\sqrt{4x/g}\right]^{1/2}.} These values
of $C$ and $D$ form the turning points at which our numerical
solutions change the sign of $A-B$. (See fig. 1.) The symmetric
solution corresponds to the choice $\theta(x)=\pm \pi/2$ and the
maximally asymmetric solution to the choice $\theta(x)={0,\>\pi}$.
Our expanded class of solutions includes ones where the branch of the
square root singularity ($\pm$) in Eq. \symmAB\ is exchanged between
$A$ and $B$ as the trajectory rotates in the $A-B$ versus $C-D$ plane,
as we note in the discussion of our numerical
results for finite $N$ (see Sec 3.4 and fig. 4 (c)). This corresponds to
$\theta(x)$ winding around the circle a number of times as $x$ goes
from $0$ to $1$. This is a precursor of the angular momentum variable
of the double scaling solutions. The rigid implementation of $Z_2$
symmetry and the boundary conditions on the recursion coefficients
would have yielded only the $\theta(x)=\pm \pi/2$ solution. All other
solutions correspond to a breaking of the $Z_2$ symmetry.




\subsec{Gaussian Penner Model}
The second example, we would like to consider, is the Gaussian Penner model.
The
potential for a general Penner model is ${V(\phi)=V_0(\phi)-t ~~log ~\phi}
$, where $V_0$ is a polynomial\Tii. If $V_0(\phi)=\phi$ the
model is the linear Penner model
\ref\Penner{J. Harer and D. Zagier, Invent. Math. {\bf 85} (1986) 457;
R.C. Penner, Bull. Am. Math. Soc. {\bf  15} (1986) 73,
J. Diff. Geom, {\bf 27} (1988) 35.}\ref\DV{J. Distler and C. Vafa, Mod. Phys.
Lett. {\bf A6} (1991) 259.}, if $V_0(\phi)=\mu ~\phi^2/2$ the model is the
Gaussian Penner model \Tii\CDL, where we interpret the $\log\phi$ term as
${1\over 2}\log\phi^2$. In \fig\pen{The Gaussian Penner potential for $t< 0$,
$t=0$ and $t> 0$.} we display the Gaussian Penner potential for different
values
of t. Consider first the situation where $t>0$. (The region $t<0$ is reached by
analytic continuation.\Ti\Tii) As the potential is a double well, the
period-two ansatz may be applied here also.

The recursion relations (Eq. \rseq) for a general Penner model reduce
to
%
\eqna\rseqpen$$\eqalignno{{n\over
N}&=\sqrt{R_n}\langle n-1|V_0^\prime({\hat \phi})|n\rangle -t\sqrt{R_n}\langle
n-1|{\hat \phi}^{-1}|n\rangle&\rseqpen a\cr 0&=\langle n|V_0^\prime({\hat
\phi})|n\rangle-t\langle n|{\hat \phi}^{-1}|n\rangle.&\rseqpen b\cr}$$
%
Let us denote $W_n=\sqrt{R_n}\langle n-1|V_0^\prime({\hat \phi})|n\rangle$ and
$Y_n=\langle n|V_0^\prime({\hat \phi})|n\rangle$ for later notational
convenience. For the Gaussian Penner model, $W_n=\mu R_n$ and $Y_n=\mu S_n$.

Eqs. \rseqpen{a,b}\ are unusual since they involve matrix elements
of $\hat\phi^{-1}$. For $t>0$, they can be solved in
the spherical limit by a procedure similar to that used for deriving the
generating function $F(z)$,  Eq.
\gen, under a period-two ansatz \ref\phiinverse{ The
matrix elements of $\hat \phi^{-1}$ can be expressed in terms of $A(x)$,
$B(x)$,
$C(x)$ and $D(x)$ by working with  the $2\times 2$ matrix $\Phi(x,\theta)$
mentioned in Ref. \gentwoband. Introduce two convenient combinations:
$\eta\equiv A(x)+B(x)-C(x)D(x)$ and $\xi\equiv A(x)B(x)$. One finds that
$\sqrt{R_n}\langle n-1|{\hat \phi}^{-1}|n\rangle\rightarrow
1/2+(A-\eta/2)/\sqrt{\eta^2-\xi}$, $\langle n|{\hat
\phi}^{-1}|n\rangle\rightarrow -D(x)/\sqrt{\eta^2-\xi}$ for $n$ even, and
$\sqrt{R_n}\langle n-1|{\hat \phi}^{-1}|n\rangle\rightarrow
1/2+(B-\eta/2)/\sqrt{\eta^2-\xi}$, $\langle n|{\hat
\phi}^{-1}|n\rangle\rightarrow -C(x)/\sqrt{\eta^2-\xi}$ for $n$ odd.}. By
considering $n$ even and odd, Eqs. \rseqpen{a,b}\ should normally lead to four
conditions.  Just like the $\phi^4$ model, only  three are
independent, and they can be cast in the following form:
%
\eqna\abcdpen$$\eqalignno{C+D&=0,&\abcdpen a\cr
           A+B-CD&={2x+t\over \mu},&\abcdpen b\cr
           AB&={x(x+t)\over \mu^2}.&\abcdpen c\cr}$$
%
For the symmetric solution where $C = D = 0$, one finds
\eqn\absympen{A(x)={x\over \mu}, \hskip 40pt B(x)={x+t\over
\mu}.} For the maximally asymmetric solution, on the other hand, one has
\eqn\acasym{A(x)=B(x)={1\over\mu}\sqrt{x(x+t)},\hskip20pt
C(x)^2={1\over \mu}\left[(2x+t)-2\sqrt{x(x+t)}\right]. }


Observe that Eqs. \abcdpen{a-c}\ are precisely the necessary combinations which
are needed in Eq. \gen\ for determining the generating function of our
symmetric Gaussian Penner model in the spherical limit leading to  symmetric
two-band structure. Therefore, for this class of solutions and in particular
for
the symmetric and maximally asymmetric solutions,  the eigenvalue density and
free energy are again identical at tree level  \ref\puzzle{This also resolves
th
contradiction between Refs. \Tii\ and \CDL. These papers contain two
different solutions to the Gaussian Penner model at the same critical
point. However, from the viewpoint of the present work, this should
not be regarded as a contradiction, but rather a special case of a
general phenomenon in multi-cut matrix models -- the existence of
multiple solutions. The solutions obtained in Refs. \Tii\ and \CDL\
are the symmetric and maximally asymmetric solutions respectively.}.

\subsec{Correlation Functions that distinguish between symmetric and
asymmetric
ansatz solutions}

Given that the tree level generating function and hence eigenvalue
density and free energy are the same, one might ask if there are other
correlation functions that distinguish between the various solutions.
It is normally assumed that after taking the period-two ansatz the
large N limit is smooth for all correlators. However, consider the
correlator $\langle Tr\phi Tr\phi\rangle_c$. In terms of recursion
coefficients,
%
\eqn\phiphi{\langle Tr\phi Tr\phi\rangle_c=R_N.}
%
In the symmetric solution, since the $R_N$ alternate between $A_N$ and
$B_N$ as $N$ goes from odd to even, this correlator at large $N$
depends on whether $\infty$ is approached through odd or even $ N$. In
one case it is $A(1)$, in the other $B(1)$. For the $\phi^4$ model,
they differ even at tree level by $\sqrt{\mu^2-4g}/g$ which is
singular at criticality, (see Eq. \symmAB). On the other hand in the
maximally asymmetric solution $S_N$ is period two but $R_N$ is of
period one, (see below Eq. \asym) hence this correlator has no
discontinuity between odd and even. This is an example of a correlator
that distinguishes between the two solutions. A similar difference between odd
and even $N$ is known to exist in the context of unitary matrix models
\ref\Wadia{S.R. Wadia, Phys.  Lett. {\bf B93} (1980) 403.}.

Another example is
$\langle Tr\phi Tr\phi
Tr\phi\rangle_c=R_N\left(S_{N-1}-S_N\right).$
In the symmetric solution $S_N=0$ and this vanishes.   But in the maximally
asymmetric solution since $S_n$ is period two, (and $C=-D$), $S_{N-1}-S_N$
changes sign as one goes from odd to even $N$. In particular, $\langle Tr\phi
Tr\phi Tr\phi\rangle_c=(|\mu|/g^2-2({1/g})^{3/2})^{1/2}$ for $N$ odd and its
negative for $N$ even.


 Another  characterization of the difference between the solutions is the
following: If one truncates the infinite dimensional matrix  $\langle
n|{\hat \phi}|m\rangle$ to an $N\times N$ matrix corresponding to the subspace
of the first $N$ orthogonal polynomials, the eigenvalues of this $N \times N$
matrix are a good approximation to the saddle point configuration of the
eigenvalues at large $N$. Since its matrix elements are given in terms of
$R's$
and $S's$, we can determine the eigenvalues numerically from a given solution
of the recursion coefficients.
In  \fig\evood{Eigenvalue distributions for even
and odd $N$: (a) $N=24$, symmetric solution; (b) $N=24$, asymmetric solution;
(c) $N=25$, symmetric solution; (d) $N=25$, asymmetric solution.}, we show the
locations of the eigenvalues so obtained for the tree level symmetric and
maximally asymmetric solutions for $N=24$, $25$. For $N=24$, half the
eigenvalues are in one well and half in the other, for both solutions. However,
for $N=25$, (odd $N$), there is a striking difference between the two
solutions.
For the asymmetric solution, there is one extra eigenvalue located in one of
the
two wells, (the well selected depends upon the sign of $S_0$), whereas for the
symmetric solution, this extra eigenvalue in the the center (on top of the
barrier), thus preserving the symmetry between both the wells.


\subsec{Numerical Approach to Finite N Solutions}


Another approach to understanding the role of these multiple solutions
is to pursue a numerical study of finite $N$ solutions and attempt to
take $N$ large enough to see a cross over to the large $N$ (or double
scaling) regimes.  Although we will postpone a detailed analysis of
our results, there are several general features which can help to
understand the present discussion. The recursion relations for the
double well potential follow from the variation of an effective
action, \ref\Veff{ The recursion relations , Eq. \rseq, are the
Eulerean stationarity conditions for this effective action. This
approach to the finite N recursion relations was brought to our
attention by A.  Jevicki ( private communication).} %
\eqn\effect{\eqalign{V_{eff}(R_n,S_n)= \sum_{n = 0}^\infty  \{  - {n\over N }
lo
g(R_n)
&+ \mu R_n + { g\over 2} (R^2_n+ 2 R_n R_{n+1} )\cr
&+ \sigma S_n + {\mu \over 2} S_n^2 + {g \over 4} S_n^4\cr
&+ {g } R_n ( S_n^2 + S_{n-1}^2 + S_{n-1} S_n) \},\cr}}
%
with the defintions, $S_{-1} = 0$ and $R_0 = 0$. Morover we must take
$g > 0$, if the effective action (like the actual potential) is to be
bounded from below. This formalism provides a natural way to
investigate our set of multiple solutions, by removing the boundary
conditions on $S_0$ and $R_1$ and replace them with the asymptotic
condition that $R_n$ and $S_n$ are smooth functions as $n \rightarrow
\infty$. This is simply the one band ansatz in the extreme limit of
$n/N$ very large. Therefore it is again interesting to ask what is the
full set of local minima.


Earlier work on symmmetric solutions for the degenerate three-well
potential have observed the recursion coefficients with very
complicated, ``chaotic looking" behavior, when calculated by a
numerically method logically equivalent to minimizing an effective
potential\ref\CHAOS{M. Sasaki and H. Suzuki, Phys. Rev.  {\bf D43}
(1991) 4015; O. Lechtenfeld, Int. J. Mod. Phys. {\bf A7} (1992) 2335;
D. Senechal, Int. J. Mod. Phys. {\bf A7} (1992) 1491.}. We also have
observed complicated behavior for two degenerate wells when we allow
symmetry breaking terms ($S_n \ne 0$), which we have been able to
relate to the existence of our multiple solutions in the planar limit.
As an illustration consider the solution presented in
\fig\kinksoln{Graphs of recursion coefficients for a sponteneously
broken solution of the double-well potential. (a) The $R_n$ and (b)
the $S_n$ coefficients after 100,000 minimizaton steps from a random start.
(c) Orbit in the $A-B$ vs $C-D$ plane.  }.  However due to the
degeneracy of multiple solutions at $N_\infty$, great care must be
taken with the minization procedures.

For example we have minimized $V_{eff}$ for the double-well potential
with $N= 512$, $\mu = -2$, $g =1$ and $\sigma = 0.1$, starting from a
random distribution of 2048 coefficients for $R_n$ and $S_n$. Using a
variety of minimizaton procedures on the CM-5 at Boston University and
the NeXT station at CERN, we see that after only several 100
iterations the curves conform roughly with the large $N$ constraints but
they can have a great variety of coutours in the $A-B$ vs $C-D$ plane.
However if we go further for another 100,000 iterations, a smooth
spiral curve (see fig. 4 (c)) begins forming near critical $x$ ($x_{cr} =
1$), with the large $N$ constraints improving to about $1\%$ as might be
expected in a transition region from one of our $N=\infty$
solution to a particular double scaling solution with non-zero orbital
quantum number $l \ne 0$.  After 100,000 iterations the value of
$V_{eff}/N$ departs from its theoretical $N=\infty$ value  by
$0.0034$. The final results on questions as to the stability of non-zero
orbital solutions, the possibility of residual degeneracies at finite
$N$ and especially the existence of choatic regimes require accurate and
non-trivial compuatational power.  Further details on this as well as
a study of higher $1/N$ corrections will be presented in a future
publication\ref\BDJMT{ R.  Brower, N.  Deo, S.  Jain, P.  Mavromatis
and C-I Tan, in preparation.}.



\vfill\break\eject


\newsec{The Double Scaling Limit}

\subsec{Double Well $\phi^4$ Potential}

The double scaling equations  for the $\phi^4$ model
have been discussed by a number of authors \refs{\DSS, \DDJT, \CM {-}\HMPN}.
The steps involved in the double scaling analysis of symmetric breaking
solutions for a {\it $Z_2$ symmetric} potential are the same as that for
solutions of a general {\it asymmetric} potential \refs{\Nappi{-}\HMPN}, since
in both cases one includes both $R_n$ and $S_n$ in the analysis. One sets
 $x=1-\epsilon^2 t$, (recall $x=n/N$) and $\epsilon=N^{-1/3}$. For the
symmetric solution, $C_n=D_n=0$, while $A_n$  and $B_n$ are
\eqna\abdou$$\eqalignno{A_n&=a_0+\epsilon(f_e(t)+f_o(t))
+\epsilon^2(r_e(t)+r_o(t))+......&\abdou a\cr
B_n&=a_o+\epsilon(f_e(t)-f_o(t))+\epsilon^2(r_e(t)-r_o(t))+.....&\abdou b\cr}$$
On substituting this symmetric double scaling ansatz into the recursion
relations \rseqmug\ and equating terms with powers
$\epsilon^0,\epsilon^1,\epsilon^2,  and \epsilon^3$, we get eight equations,
two of
these are used up by $a_o$ ($\epsilon^0$ equations), the tree level result.
(Note $a_o=-\mu/(2g)$; in what follows, we adopt the convention where $\mu=-2$
and $g=1$). That leaves us with six unknowns and six equations hence all the
unknowns can be determined. Most of them are zero (e.g. $f_e=r_o=0....$), while
the others are determined in terms of $f_o(t)=f(t)$, {\it e.g.},
$r_e=(f^2-t)/4$. The function $f(t)$ satisfies the Painleve-II equation
\eqn\painii{f^{\prime\prime}-{1\over 4}~f^3+{1\over 2}~ft=0.} The suseptibility
$\chi\sim{\partial^2 \Gamma\over\partial \mu^2}\sim f^2/2-r_e= (f^2+t)/4$.

For the maximally asymmetric solution, the double scaling ansatz for $C_n$ and
 $D_n$
are
\eqna\cdou
$$\eqalignno{C_n&=\epsilon g(t)+\epsilon^2.....&\cdou a\cr
D_n&=-\epsilon g(t)+\epsilon^2.....&\cdou b\cr}$$
and  $A_n=a_0
+\epsilon^2r_e(t)+......$,
$B_n=a_o+\epsilon^2r_e(t)+\cdots$. Substituting this maximally asymmetric
double
 scaling
ansatz into the recursion relations and equating powers of $\epsilon $ we get,
$r_e=-(g^2+t)/4$, etc., and  \eqn\painasym{
 g^{\prime\prime}-{1\over 4}~g^3+{1\over 2}~gt=0,}
the same as Eq. \painii, with $g$ replacing $f$. Under this ansatz, the
suseptibility $\chi$ can be expressed as  $(g^2+t)/4$.

We next consider the general symmetry breaking solutions, where $A-B\neq
0$ and $C-D\neq 0$ in the planar limit. Substituting  the double
scaling ansatz, Eqs. \abdou{}\ and \cdou{}\ into the recursion relations and
equating powers of $\epsilon $ we get $r_e=(f^2-g^2-t)/4$, etc., and the
following coupled equations
\refs{\Nappi{-}\HMPN}
\eqna\coupledeq
$$\eqalignno{f^{\prime\prime}-f(g^2+f^2)/4+ft/2&=0,&\coupledeq a\cr
g^{\prime\prime}-g(g^2+f^2)/4+gt/2&=0.&\coupledeq b\cr}$$
 The suseptibility is now
given by  $\chi=( f^2+g^2+t)/4$.

While Eqs. \coupledeq{}\ have been obtained previously in the context of
asymmetric potentials, we would like to emphasize that they describe the
multiple (and in general symmetry breaking) solutions that exist even for a
$Z_2$-symmetric potential. To see the symmetry breaking nature of these
solutions more explicitly and to make contact with the tree level discussion in
the previous section, introduce a two-dimensional vector ${\vec r}=(g,f)$, in
terms of which the coupled equations can be written as $\ddot{\vec r}-(1/4)(
r^2-2t){\vec r}=0$. We can next make a change of coordinates %
\eqn\fgrt{f=r~sin\theta(t), \hskip40pt
                   g=r~cos\theta(t),}
%
so that  $\chi\sim (r^2+t)/4$ and the coupled equations become %
\eqna\painrl$$\eqalignno{{\ddot
r}-{1\over4}~r^3+{1\over2}~rt-{l^2\over {r^3}}&=0,&\painrl a\cr
 r^2 {\dot \theta}&=l. &\painrl
b\cr}$$
%
Note that since $A-B\propto f$ and $C-D\propto g$ in the double scaling limit,
the variable $\theta$ is the same as that introduced in the previous section.
The constant $l$ in Eq. \painrl{b}\ is the ``angular~ momentum'', and it is a
constant of the motion due to the $U(1)$ invariance of Eqs. \coupledeq{}. Note
that  for $l=0$ equation \painrl{a}\ is just the Painleve-II equation in the
$r$
coordinate. Thus in the $l=0$ sector of this model, we reproduce the same
double
scaling results for both the symmetric and maximally asymmetric solutions.  But
for the $l\not=0$ sector the double scaling equation is  different; hence the
behavior of the system in this sector for the multiple solutions is different.
Iterating Eq. \painrl{a}\   at large $t$, one finds
\eqn\free{\chi= {{3t\over 4}
-({1+l^2\over 4})t^{-2}+\cdots}}

At the tree level we had a degeneracy of solutions parametrized by the
function $\theta(x)$, whose value could be independently chosen for
$x\epsilon [0,1]$. The double scaling analysis based on the  \abdou\ and
\cdou\ tells us that only a two parameter family of these solutions, labelled
by $l$ and one global rotation angle $\theta_0$, survives in the
double scaling limit. ($\theta(x)$ is no longer any function of $x$,
but constrained such that $r^2 {\dot \theta}=l$ is a constant.)
Solutions labelled by different values of $l$ give rise to the same
susceptibility at tree level (the first term in \free\ is
$l$-independent) as expected, but differ at higher orders.


A relevent question that arises is: Just as the symmetric solution ($S_n=0$) is
the ``natural" solution that follows from the symmetric potential $V(x)$,
(``natural" in that it respects the $Z_2$ symmetry of $V(x)$, and the recursion
coefficients are specified by initial conditions given by the integrals
 discussed
in section 2), is there a perturbed potential of which the symmetry breaking
solutions are natural solutions? This is presently being investigated. At this
point we remark that the perturbation cannot be a rigid translation of the
potential, which induces linear and cubic terms. Such a perturbation has been
discussed in Ref. \HMPN. It can be easily seen that the natural solution to the
shifted potential $V_b(x)\equiv V(x-b)$ is given by the same $R_n$ as for
$V(x)$, with $S_n=b={\rm const.}$


 Should one decide to
introduce a small explicit symmetry-breaking term, $\sigma =N^{-{2/3}}\tilde
\sigma$,  as was done in Ref. \Nappi, the vector equation above remains $U(1)$
invariant by simply adding a ``constant magnetic field" term of the form
$B_0{\dot{\vec r}}\times\hat z$, where $B_0\propto \tilde\sigma$ and $\hat{z}$
denotes a unit normal to this two-dimensional plane. One can thus again reduce
it to a single radial equation with the solution depending on a ``generalized
angular mumentum", $l=r^2 {\dot \theta}+B_0r^2/2={\rm constant}$,
\eqn\painrltwo{{\ddot r}-{1\over4}~r^3+{1\over2}~rt-{(l-{B_0r^2\over
2})^2\over{r^3}}=0.}

\subsec{The Gaussian Penner Model}

The double scaling solutions for the Gaussian Penner model have been
discussed in Refs. \Tii\ and \CDL. We reproduce the proofs below for
completeness (also simplifying them somewhat). The critical point is $t=-1$. By
strictly enforcing $Z_2$ symmetry, this model can be solved exactly first at
$t>0$, so that the criticality at $t=-1$ can be exhibited explicitly.  Note
that   $\langle n|{\hat \phi}^{-1}|n\rangle=0$ by $Z_2$ symmetry, Eq.
\rseqpen{b}\ thus reduces to  $S_n=0$, the symmetric ansatz. Eq. \rseqpen{a}\
can also be solved exactly for all n. Since $W_n=\mu R_n $ and  since $\langle
n-1|{\hat \phi}^{-1}|n\rangle=0$ for  n even, $\langle n-1|{\hat
\phi}^{-1}|n\rangle={1\over \sqrt{R_n}}$ for n odd, it follows that, for n
even,
$R_n={n/ {\mu N}}$, and for n odd, $R_n=(n+tN) /{\mu N}$\Tii.

 Since we know the
exact result for the $R_n 's$ for the symmetric solution, the exact free energy
may be obtained  %
\eqn\freepensym{\Gamma=\sum_{k=1}^{N/2-1}
 ~k~log\left[(2k+\mu+1)(2k+\mu-1)\right],}
%
where $t=-1+{\mu\over N}$. On expanding the free energy in powers
of $\mu$ we get
\eqn\fsymmu{\Gamma={1\over
4}~\mu^2~log~\mu+{1\over12}~log~\mu+....} The coefficient of the second
$\log\mu$, $\chi_1=1/{12}$, comes from the torus contribution, indicates that
this free energy  {\it cannot} be identified with
 the Legendre transform of the free energy of the c=1 string at self dual or
twice the self dual radius \Tii.

It has been stressed in Ref. \Tii\ that  the exact solution to the
Gaussian Penner model  is characterized by the fact that $B(x)$ has a {\it
linear}
zero at $x=1$ when $t=-1$ while $A(x)$ is non-zero there, (see Eq. \absympen).
This same feature also   holds in general for symmetry breaking
solutions where $C(x)=-D(x)\neq 0$. However, the maximally asymmetric solution
provides an exception to this rule. When $A(x)=B(x)$, one has
$A(x)=B(x)\sim (x+t)^{1/2}$, (see Eq. \acasym). That is, both $A(x)$ and
$B(x)$ have  {\t square-root} type behavior near $x=1$ in the spherical limit
at
$t=-1$. Since it is the behavior of $R_n$ near $x=1$ which determines the
criticality of the model, it follows that the resulting double scaling limit
for the maximally asymmetric ansatz could be { non-generic}.





Let us next concentrate on the maximally asymmetric solution. We note first
that, with $S_n\neq 0$,   Eqs. \rseqpen{a}\ and \rseqpen{b} can be re-written
as \Ti\Tii\
  %
\eqna\rseqpentwo$$\eqalignno{W_n+W_{n+1}+S_nY_n&={2n+1+Nt\over
N},&\rseqpentwo a\cr S_N[W_{n+1}-W_n-{1\over
N}]&=R_nY_{n-1}-R_{n+1}Y_{n+1},&\rseqpentwo b\cr}$$
%
so that matrix elements of $\hat \phi$ would not appear explicitly.
For the maximally asymmetric solution the double scaling
solutions may be found as follows. With $x=1-z/N$, $t=-1+\mu/N$,
$\epsilon=1/\sqrt{N}$,  $A_n, C_n,~ {\rm and}~ D_n$
can be expanded as \CDL\
 \eqn\acdpenasy{\eqalign{A_n&=1/\sqrt{N}~\rho(z)+...\cr
C_n&=1+1/\sqrt{N}~\sigma(z)+1/N~\sigma_1(z)+....\cr
D_n&=-\left(1+1/\sqrt{N}~\sigma(z)+1/N~\sigma_1(z)+....\right).\cr}}
On
substituting into the recursion relations \rseqpentwo\ and equating equal
powers of $N$, we can determine $\sigma(z)$ in terms of $\rho(z)$ and
$\sigma_1(z)$ in terms of $\sigma(z)$. The equation for $\rho$ is
$\rho(z)\rho(z-1)=\mu-1/2+z$ and the double scaling result for $R_n$
is  $R_n\sim \Gamma \left(\half(N-n+\mu+3/2) \right)/
 \Gamma\left(\half(N-n+\mu+1/2) \right) $. The double scaled free energy
 is $\Gamma=\sum_{k=1}^{N/2-1} ~k~log
\left[(2k+\mu+1/2) (2k+\mu-1/2)\right]$ plus$ \mu$  independent  terms. On
expanding in powers of $\mu$ one gets
\eqn\fasympenmu{\Gamma={1\over4}~\mu^2~log~\mu-{5\over 48}~log~\mu.....}
The coefficient $\chi_1=-5/{48}$ confirms that this criticality corresponds to
that for the free energy of the c=1 string at twice the self
dual radius as conjectured in \DV.  We  note  that although the tree level free
energy gave identical results for the symmetric and maximally asymmetric ansatz
(see remarks below Eq. \acasym), the double scaled free energies \fsymmu\ and
\fasympenmu\  are quite different.


\vfill\eject
\newsec{Discussion}


The existence of multiple double scaling solutions at
the same critical point, which share the same tree level behavior, is an
unusual and previously unnoticed feature. We have exhibited this
behaviour in two completely different models-the double-well $\phi^4$
potential and the Gaussian Penner model. Both these models possess
$Z_2$ symmetry, and a charateristic feature of the class of solutions
we consider is the fact that only one of the solutions respects this
symmetry to all orders, all other solutions break this symmetry.
Although the physical consequences of symmetry breaking in matrix
models are not yet fully understood, it is useful to consider the
analogy of the multiplicity of solutions here to the property of
coexisting ferromagnetic phases below the Curie point.  In
the Ising model there is an infinite set of mixed phases with
identical free energy per unit volume in the infinite volume limit.
The domain walls that characterize the mixed phases give rise to lower
order contributions in the free energy expanded around the infinite
volume limit. The ``bulk'' contribution in the multiple solutions is the same
(the tree level eigenvalue density is the same) but they differ by amounts
suppressed by powers of $1/N$, like ``surface'' contributions.


A significant difference between the Gaussian Penner model and the
symmetric $\phi^4$ model is that in the Gaussian Penner model there
does not seem to be an angular momentum parameter $l$ characterizing
the double scaling solutions.  Further, the double scaled free
energies of the symmetric and maximally asymmetric solutions already
differ, unlike in the $\phi^4$ case where both of these were $l=0$
solutions with the same double scaled free energy. In spite of these
differences, however, both models display the same general phenomenon,
namely, that the enlarged class of symmetry breaking solutions
produces the {\it same} free energy at {\it tree level}, and contain
solutions that produce {\it different} free energies at {\it higher
orders}. We expect this to be a generic feature of multi-cut matrix
models.  The existence of multiple solutions is related to the fact
that when the potential has more than one minima, the number of smooth
functions required to represent the recursion coefficients exceeds the
number of constraints obtained from the recursion relations. Thus
multiple solutions will exist even when the potential has no symmetry
as we noted for $\sigma \ne 0$ in the $\phi^4$ model.


It would be interesting to know whether and how these solutions can
tunnel into each other.
This would be particularly interesting for the Gaussian Penner model where
the maximally asymmetric solution corresponds to the $c=1$ string compactified
at twice the self-dual radius.
We are now studying in greater detail higher
order terms beyond the planar approximations as well as numerical
solutions at finite N to the effective potential, Eq. \effect, to
determine more precisely the relationship between multiple solutions
of the planar versus the double scaling limit.




{\bf Acknowledgements }


We would like to thank Robert Edwards and Panayotis Mavromatis for
many helpful discussions through out this research and greatfully
acknowledge the supportive atmosphere in the CERN theory group during
the visits of RCB and CIT and the Center for Computational Science at
Boston University.  The work was supported in part by the DOE grants
DE-AC02-89ER40509 and DE-AC CO76ER03130.A021-Task A, the NSF grant
PHY-87-14654 and the Packard Foundation.  Part of this work was done
while one of us (CIT) was on sabbatical leave at LPTHE-Orsay, France.


\listrefs

\listfigs

\end
%"END OF TEX FILE"
%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 72.0 72.0 540.0 720.0
%%Creator: Mathematica
%%CreationDate: Mon Dec 21 17:13:54 EST 1992
%%EndComments

/Mathdict 150 dict def
Mathdict begin
/Mlmarg		1.0 72 mul def
/Mrmarg		1.0 72 mul def
/Mbmarg		1.0 72 mul def
/Mtmarg		1.0 72 mul def
/Mwidth		8.5 72 mul def
/Mheight	11 72 mul def
/Mtransform	{  } bind def
/Mnodistort	true def
/Mfixwid	true	def
/Mfixdash	false def
/Mrot		0	def
/Mpstart {
MathPictureStart
} bind def
/Mpend {
MathPictureEnd
} bind def
/Mscale {
0 1 0 1
5 -1 roll
MathScale
} bind def
/ISOLatin1Encoding dup where
{ pop pop }
{
[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft
/logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior
/acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright
/onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis
] def
} ifelse
/MFontDict 50 dict def
/MStrCat
{
exch
dup length
2 index length add
string
dup 3 1 roll
copy
length
exch dup
4 2 roll exch
putinterval
} def
/MCreateEncoding
{
1 index
255 string cvs
(-) MStrCat
1 index MStrCat
cvn exch
(Encoding) MStrCat
cvn dup where
{
exch get
}
{
pop
StandardEncoding
} ifelse
3 1 roll
dup MFontDict exch known not
{
1 index findfont
dup length dict
begin
{1 index /FID ne
{def}
{pop pop}
ifelse} forall
/Encoding 3 index
def
currentdict
end
1 index exch definefont pop
MFontDict 1 index
null put
}
if
exch pop
exch pop
} def
/ISOLatin1 { (ISOLatin1) MCreateEncoding } def
/ISO8859 { (ISOLatin1) MCreateEncoding } def
/Mcopyfont {
dup
maxlength
dict
exch
{
1 index
/FID
eq
{
pop pop
}
{
2 index
3 1 roll
put
}
ifelse
}
forall
} def
/Plain	/Courier findfont Mcopyfont definefont pop
/Bold	/Courier-Bold findfont Mcopyfont definefont pop
/Italic /Courier-Oblique findfont Mcopyfont definefont pop
/MathPictureStart {
gsave
Mtransform
Mlmarg
Mbmarg
translate
Mwidth
Mlmarg Mrmarg add
sub
/Mwidth exch def
Mheight
Mbmarg Mtmarg add
sub
/Mheight exch def
/Mtmatrix
matrix currentmatrix
def
/Mgmatrix
matrix currentmatrix
def
} bind def
/MathPictureEnd {
grestore
} bind def
/MFill {
0 0 		moveto
Mwidth 0 	lineto
Mwidth Mheight 	lineto
0 Mheight 	lineto
fill
} bind def
/MPlotRegion {
3 index
Mwidth mul
2 index
Mheight mul
translate
exch sub
Mheight mul
/Mheight
exch def
exch sub
Mwidth mul
/Mwidth
exch def
} bind def
/MathSubStart {
Momatrix
Mgmatrix Mtmatrix
Mwidth Mheight
7 -2 roll
moveto
Mtmatrix setmatrix
currentpoint
Mgmatrix setmatrix
9 -2 roll
moveto
Mtmatrix setmatrix
currentpoint
2 copy translate
/Mtmatrix matrix currentmatrix def
3 -1 roll
exch sub
/Mheight exch def
sub
/Mwidth exch def
} bind def
/MathSubEnd {
/Mheight exch def
/Mwidth exch def
/Mtmatrix exch def
dup setmatrix
/Mgmatrix exch def
/Momatrix exch def
} bind def
/Mdot {
moveto
0 0 rlineto
stroke
} bind def
/Mtetra {
moveto
lineto
lineto
lineto
fill
} bind def
/Metetra {
moveto
lineto
lineto
lineto
closepath
gsave
fill
grestore
0 setgray
stroke
} bind def
/Mistroke {
flattenpath
0 0 0
{
4 2 roll
pop pop
}
{
4 -1 roll
2 index
sub dup mul
4 -1 roll
2 index
sub dup mul
add sqrt
4 -1 roll
add
3 1 roll
}
{
stop
}
{
stop
}
pathforall
pop pop
currentpoint
stroke
moveto
currentdash
3 -1 roll
add
setdash
} bind def
/Mfstroke {
stroke
currentdash
pop 0
setdash
} bind def
/Mrotsboxa {
gsave
dup
/Mrot
exch def
Mrotcheck
Mtmatrix
dup
setmatrix
7 1 roll
4 index
4 index
translate
rotate
3 index
-1 mul
3 index
-1 mul
translate
/Mtmatrix
matrix
currentmatrix
def
grestore
Msboxa
3  -1 roll
/Mtmatrix
exch def
/Mrot
0 def
} bind def
/Msboxa {
newpath
5 -1 roll
Mvboxa
pop
Mboxout
6 -1 roll
5 -1 roll
4 -1 roll
Msboxa1
5 -3 roll
Msboxa1
Mboxrot
[
7 -2 roll
2 copy
[
3 1 roll
10 -1 roll
9 -1 roll
]
6 1 roll
5 -2 roll
]
} bind def
/Msboxa1 {
sub
2 div
dup
2 index
1 add
mul
3 -1 roll
-1 add
3 -1 roll
mul
} bind def
/Mvboxa	{
Mfixwid
{
Mvboxa1
}
{
dup
Mwidthcal
0 exch
{
add
}
forall
exch
Mvboxa1
4 index
7 -1 roll
add
4 -1 roll
pop
3 1 roll
}
ifelse
} bind def
/Mvboxa1 {
gsave
newpath
[ true
3 -1 roll
{
Mbbox
5 -1 roll
{
0
5 1 roll
}
{
7 -1 roll
exch sub
(m) stringwidth pop
.3 mul
sub
7 1 roll
6 -1 roll
4 -1 roll
Mmin
3 -1 roll
5 index
add
5 -1 roll
4 -1 roll
Mmax
4 -1 roll
}
ifelse
false
}
forall
{ stop } if
counttomark
1 add
4 roll
]
grestore
} bind def
/Mbbox {
1 dict begin
0 0 moveto
/temp (T) def
{	gsave
currentpoint newpath moveto
temp 0 3 -1 roll put temp
false charpath flattenpath currentpoint
pathbbox
grestore moveto lineto moveto} forall
pathbbox
newpath
end
} bind def
/Mmin {
2 copy
gt
{ exch } if
pop
} bind def
/Mmax {
2 copy
lt
{ exch } if
pop
} bind def
/Mrotshowa {
dup
/Mrot
exch def
Mrotcheck
Mtmatrix
dup
setmatrix
7 1 roll
4 index
4 index
translate
rotate
3 index
-1 mul
3 index
-1 mul
translate
/Mtmatrix
matrix
currentmatrix
def
Mgmatrix setmatrix
Mshowa
/Mtmatrix
exch def
/Mrot 0 def
} bind def
/Mshowa {
4 -2 roll
moveto
2 index
Mtmatrix setmatrix
Mvboxa
7 1 roll
Mboxout
6 -1 roll
5 -1 roll
4 -1 roll
Mshowa1
4 1 roll
Mshowa1
rmoveto
currentpoint
Mfixwid
{
Mshowax
}
{
Mshoway
}
ifelse
pop pop pop pop
Mgmatrix setmatrix
} bind def
/Mshowax {
0 1
4 index length
-1 add
{
2 index
4 index
2 index
get
3 index
add
moveto
4 index
exch get
Mfixdash
{
Mfixdashp
}
if
show
} for
} bind def
/Mfixdashp {
dup
length
1
gt
1 index
true exch
{
45
eq
and
} forall
and
{
gsave
(--)
stringwidth pop
(-)
stringwidth pop
sub
2 div
0 rmoveto
dup
length
1 sub
{
(-)
show
}
repeat
grestore
}
if
} bind def
/Mshoway {
3 index
Mwidthcal
5 1 roll
0 1
4 index length
-1 add
{
2 index
4 index
2 index
get
3 index
add
moveto
4 index
exch get
[
6 index
aload
length
2 add
-1 roll
{
pop
Strform
stringwidth
pop
neg
exch
add
0 rmoveto
}
exch
kshow
cleartomark
} for
pop
} bind def
/Mwidthcal {
[
exch
{
Mwidthcal1
}
forall
]
[
exch
dup
Maxlen
-1 add
0 1
3 -1 roll
{
[
exch
2 index
{
1 index
Mget
exch
}
forall
pop
Maxget
exch
}
for
pop
]
Mreva
} bind def
/Mreva	{
[
exch
aload
length
-1 1
{1 roll}
for
]
} bind def
/Mget	{
1 index
length
-1 add
1 index
ge
{
get
}
{
pop pop
0
}
ifelse
} bind def
/Maxlen	{
[
exch
{
length
}
forall
Maxget
} bind def
/Maxget	{
counttomark
-1 add
1 1
3 -1 roll
{
pop
Mmax
}
for
exch
pop
} bind def
/Mwidthcal1 {
[
exch
{
Strform
stringwidth
pop
}
forall
]
} bind def
/Strform {
/tem (x) def
tem 0
3 -1 roll
put
tem
} bind def
/Mshowa1 {
2 copy
add
4 1 roll
sub
mul
sub
-2 div
} bind def
/MathScale {
Mwidth
Mheight
Mlp
translate
scale
/yscale exch def
/ybias exch def
/xscale exch def
/xbias exch def
/Momatrix
xscale yscale matrix scale
xbias ybias matrix translate
matrix concatmatrix def
/Mgmatrix
matrix currentmatrix
def
} bind def
/Mlp {
3 copy
Mlpfirst
{
Mnodistort
{
Mmin
dup
} if
4 index
2 index
2 index
Mlprun
11 index
11 -1 roll
10 -4 roll
Mlp1
8 index
9 -5 roll
Mlp1
4 -1 roll
and
{ exit } if
3 -1 roll
pop pop
} loop
exch
3 1 roll
7 -3 roll
pop pop pop
} bind def
/Mlpfirst {
3 -1 roll
dup length
2 copy
-2 add
get
aload
pop pop pop
4 -2 roll
-1 add
get
aload
pop pop pop
6 -1 roll
3 -1 roll
5 -1 roll
sub
div
4 1 roll
exch sub
div
} bind def
/Mlprun {
2 copy
4 index
0 get
dup
4 1 roll
Mlprun1
3 copy
8 -2 roll
9 -1 roll
{
3 copy
Mlprun1
3 copy
11 -3 roll
/gt Mlpminmax
8 3 roll
11 -3 roll
/lt Mlpminmax
8 3 roll
} forall
pop pop pop pop
3 1 roll
pop pop
aload pop
5 -1 roll
aload pop
exch
6 -1 roll
Mlprun2
8 2 roll
4 -1 roll
Mlprun2
6 2 roll
3 -1 roll
Mlprun2
4 2 roll
exch
Mlprun2
6 2 roll
} bind def
/Mlprun1 {
aload pop
exch
6 -1 roll
5 -1 roll
mul add
4 -2 roll
mul
3 -1 roll
add
} bind def
/Mlprun2 {
2 copy
add 2 div
3 1 roll
exch sub
} bind def
/Mlpminmax {
cvx
2 index
6 index
2 index
exec
{
7 -3 roll
4 -1 roll
} if
1 index
5 index
3 -1 roll
exec
{
4 1 roll
pop
5 -1 roll
aload
pop pop
4 -1 roll
aload pop
[
8 -2 roll
pop
5 -2 roll
pop
6 -2 roll
pop
5 -1 roll
]
4 1 roll
pop
}
{
pop pop pop
} ifelse
} bind def
/Mlp1 {
5 index
3 index	sub
5 index
2 index mul
1 index
le
1 index
0 le
or
dup
not
{
1 index
3 index	div
.99999 mul
8 -1 roll
pop
7 1 roll
}
if
8 -1 roll
2 div
7 -2 roll
pop sub
5 index
6 -3 roll
pop pop
mul sub
exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
outflag
1
eq
{
/outflag 0 def
/intop 0 def
/inrht 0 def
} if
5 index
gsave
Mtmatrix setmatrix
Mvboxa pop
grestore
3 -1 roll
pop
dup
intop
gt
{
/intop
exch def
}
{ pop }
ifelse
dup
inrht
gt
{
/inrht
exch def
}
{ pop }
ifelse
pop
/inflag
1 def
} bind def
/Mouter {
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
inflag
1 eq
{
dup
0 lt
{
dup
intop
mul
neg
/yadtop
exch def
} if
dup
0 gt
{
dup
intop
mul
/yadbot
exch def
}
if
pop
dup
0 lt
{
dup
inrht
mul
neg
/xadrht
exch def
} if
dup
0 gt
{
dup
inrht
mul
/xadlft
exch def
} if
pop
/outflag 1 def
}
{ pop pop}
ifelse
/inflag 0 def
/inrht 0 def
/intop 0 def
} bind def
/Mboxout {
outflag
1
eq
{
4 -1
roll
xadlft
leadjust
add
sub
4 1 roll
3 -1
roll
yadbot
leadjust
add
sub
3 1
roll
exch
xadrht
leadjust
add
add
exch
yadtop
leadjust
add
add
/outflag 0 def
/xadlft 0 def
/yadbot 0 def
/xadrht 0 def
/yadtop 0 def
} if
} bind def
/leadjust {
(m) stringwidth pop
.5 mul
} bind def
/Mrotcheck {
dup
90
eq
{
yadbot
/yadbot
xadrht
def
/xadrht
yadtop
def
/yadtop
xadlft
def
/xadlft
exch
def
}
if
dup
cos
1 index
sin
Checkaux
dup
cos
1 index
sin neg
exch
Checkaux
3 1 roll
pop pop
} bind def
/Checkaux {
4 index
exch
4 index
mul
3 1 roll
mul add
4 1 roll
} bind def
/Mboxrot {
Mrot
90 eq
{
brotaux
4 2
roll
}
if
Mrot
180 eq
{
4 2
roll
brotaux
4 2
roll
brotaux
}
if
Mrot
270 eq
{
4 2
roll
brotaux
}
if
} bind def
/brotaux {
neg
exch
neg
} bind def
/Mabsproc {
0
matrix defaultmatrix
dtransform idtransform
dup mul exch
dup mul
add sqrt
} bind def
/Mabswid {
Mabsproc
setlinewidth
} bind def
/Mabsdash {
exch
[
exch
{
Mabsproc
}
forall
]
exch
setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop}
repeat
} bind def
} ifelse
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def
/setcmykcolor where
{ pop}
{ /setcmykcolor {
4 1
roll
[
4 1
roll
]
{
1 index
sub
1
sub neg
dup
0
lt
{
pop
0
}
if
dup
1
gt
{
pop
1
}
if
exch
} forall
pop
setrgbcolor
} bind def
} ifelse
/Mcharproc
{
currentfile
(x)
readhexstring
pop
0 get
exch
div
} bind def
/Mshadeproc
{
dup
3 1
roll
{
dup
Mcharproc
3 1
roll
} repeat
1 eq
{
setgray
}
{
3 eq
{
setrgbcolor
}
{
setcmykcolor
} ifelse
} ifelse
} bind def
/Mrectproc
{
3 index
2 index
moveto
2 index
3 -1
roll
lineto
dup
3 1
roll
lineto
lineto
fill
} bind def
/Mcolorimage
{
7 1
roll
pop
pop
matrix
invertmatrix
concat
2 exch exp
1 sub
3 1 roll
1 1
2 index
{
1 1
4 index
{
dup
1 sub
exch
2 index
dup
1 sub
exch
7 index
9 index
Mshadeproc
Mrectproc
} for
pop
} for
pop pop pop pop
} bind def
/Mimage
{
pop
matrix
invertmatrix
concat
2 exch exp
1 sub
3 1 roll
1 1
2 index
{
1 1
4 index
{
dup
1 sub
exch
2 index
dup
1 sub
exch
7 index
Mcharproc
setgray
Mrectproc
} for
pop
} for
pop pop pop
} bind def

%!PS-Adobe-2.0
%%AspectRatio: 0.70711
MathPictureStart
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.168359 0.353553 0.168359 [
[(-2)] 0.16328 0.35355 0 2 Msboxa
[(-1)] 0.33164 0.35355 0 2 Msboxa
[(1)] 0.66836 0.35355 0 2 Msboxa
[(2)] 0.83672 0.35355 0 2 Msboxa
[(C-D)] 1.025 0.35355 -1 0 Msboxa
[(-2)] 0.4875 0.01684 1 0 Msboxa
[(-1)] 0.4875 0.18519 1 0 Msboxa
[(1)] 0.4875 0.52191 1 0 Msboxa
[(2)] 0.4875 0.69027 1 0 Msboxa
[(A-B)] 0.5 0.70711 0 -4 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.70811 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0.16328 0.35355 moveto
0.16328 0.3598 lineto
stroke
grestore
[(-2)] 0.16328 0.35355 0 2 Mshowa
gsave
0.002 setlinewidth
0.33164 0.35355 moveto
0.33164 0.3598 lineto
stroke
grestore
[(-1)] 0.33164 0.35355 0 2 Mshowa
gsave
0.002 setlinewidth
0.66836 0.35355 moveto
0.66836 0.3598 lineto
stroke
grestore
[(1)] 0.66836 0.35355 0 2 Mshowa
gsave
0.002 setlinewidth
0.83672 0.35355 moveto
0.83672 0.3598 lineto
stroke
grestore
[(2)] 0.83672 0.35355 0 2 Mshowa
gsave
0.001 setlinewidth
0.0286 0.35355 moveto
0.0286 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.06227 0.35355 moveto
0.06227 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.09594 0.35355 moveto
0.09594 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.12961 0.35355 moveto
0.12961 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.19695 0.35355 moveto
0.19695 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.23063 0.35355 moveto
0.23063 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.2643 0.35355 moveto
0.2643 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.29797 0.35355 moveto
0.29797 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.36531 0.35355 moveto
0.36531 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.39898 0.35355 moveto
0.39898 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.43266 0.35355 moveto
0.43266 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.46633 0.35355 moveto
0.46633 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.53367 0.35355 moveto
0.53367 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.56734 0.35355 moveto
0.56734 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.60102 0.35355 moveto
0.60102 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.63469 0.35355 moveto
0.63469 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.70203 0.35355 moveto
0.70203 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.7357 0.35355 moveto
0.7357 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.76937 0.35355 moveto
0.76937 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.80305 0.35355 moveto
0.80305 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.87039 0.35355 moveto
0.87039 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.90406 0.35355 moveto
0.90406 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.93773 0.35355 moveto
0.93773 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.9714 0.35355 moveto
0.9714 0.3573 lineto
stroke
grestore
[(C-D)] 1.025 0.35355 -1 0 Mshowa
gsave
0.002 setlinewidth
0 0.35355 moveto
1 0.35355 lineto
stroke
grestore
gsave
0.002 setlinewidth
0.5 0.01684 moveto
0.50625 0.01684 lineto
stroke
grestore
[(-2)] 0.4875 0.01684 1 0 Mshowa
gsave
0.002 setlinewidth
0.5 0.18519 moveto
0.50625 0.18519 lineto
stroke
grestore
[(-1)] 0.4875 0.18519 1 0 Mshowa
gsave
0.002 setlinewidth
0.5 0.52191 moveto
0.50625 0.52191 lineto
stroke
grestore
[(1)] 0.4875 0.52191 1 0 Mshowa
gsave
0.002 setlinewidth
0.5 0.69027 moveto
0.50625 0.69027 lineto
stroke
grestore
[(2)] 0.4875 0.69027 1 0 Mshowa
gsave
0.001 setlinewidth
0.5 0.05051 moveto
0.50375 0.05051 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.08418 moveto
0.50375 0.08418 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.11785 moveto
0.50375 0.11785 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.15152 moveto
0.50375 0.15152 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.21887 moveto
0.50375 0.21887 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.25254 moveto
0.50375 0.25254 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.28621 moveto
0.50375 0.28621 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.31988 moveto
0.50375 0.31988 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.38723 moveto
0.50375 0.38723 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.4209 moveto
0.50375 0.4209 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.45457 moveto
0.50375 0.45457 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.48824 moveto
0.50375 0.48824 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.55558 moveto
0.50375 0.55558 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.58926 moveto
0.50375 0.58926 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.62293 moveto
0.50375 0.62293 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.6566 moveto
0.50375 0.6566 lineto
stroke
grestore
[(A-B)] 0.5 0.70711 0 -4 Mshowa
gsave
0.002 setlinewidth
0.5 0 moveto
0.5 0.70711 lineto
stroke
grestore
grestore
0 0 moveto
1 0 lineto
1 0.70711 lineto
0 0.70711 lineto
closepath
clip
newpath
gsave
gsave
gsave
0.004 setlinewidth
0.97619 0.35355 moveto
0.90996 0.4407 lineto
0.83672 0.52191 lineto
0.75771 0.59165 lineto
0.71647 0.62069 lineto
0.6743 0.64516 lineto
0.63138 0.66464 lineto
0.6097 0.6724 lineto
0.5879 0.6788 lineto
0.56601 0.6838 lineto
0.55503 0.68577 lineto
0.54404 0.68739 lineto
0.53304 0.68865 lineto
0.52754 0.68914 lineto
0.52203 0.68955 lineto
0.51653 0.68987 lineto
0.51377 0.68999 lineto
0.51102 0.69009 lineto
0.50826 0.69017 lineto
0.50551 0.69023 lineto
0.50275 0.69026 lineto
0.5 0.69027 lineto
0.49725 0.69026 lineto
0.49449 0.69023 lineto
0.49174 0.69017 lineto
0.48898 0.69009 lineto
0.48347 0.68987 lineto
0.47797 0.68955 lineto
0.47246 0.68914 lineto
0.46696 0.68865 lineto
0.45596 0.68739 lineto
0.44497 0.68577 lineto
0.43399 0.6838 lineto
0.4121 0.6788 lineto
0.3903 0.6724 lineto
0.36862 0.66464 lineto
0.3257 0.64516 lineto
0.24229 0.59165 lineto
0.16328 0.52191 lineto
0.09004 0.4407 lineto
0.05597 0.3975 lineto
0.03964 0.37558 lineto
0.03166 0.36457 lineto
0.02772 0.35906 lineto
0.02576 0.35631 lineto
0.02381 0.35355 lineto
0.02772 0.34804 lineto
0.03166 0.34254 lineto
0.03964 0.33153 lineto
0.05597 0.3096 lineto
Mistroke
0.09004 0.2664 lineto
0.16328 0.18519 lineto
0.24229 0.11546 lineto
0.28353 0.08642 lineto
0.3257 0.06195 lineto
0.36862 0.04247 lineto
0.3903 0.03471 lineto
0.4121 0.02831 lineto
0.43399 0.02331 lineto
0.44497 0.02133 lineto
0.45596 0.01972 lineto
0.46696 0.01846 lineto
0.47246 0.01796 lineto
0.47797 0.01756 lineto
0.48347 0.01724 lineto
0.48623 0.01712 lineto
0.48898 0.01702 lineto
0.49174 0.01694 lineto
0.49449 0.01688 lineto
0.49725 0.01685 lineto
0.5 0.01684 lineto
0.50275 0.01685 lineto
0.50551 0.01688 lineto
0.50826 0.01694 lineto
0.51102 0.01702 lineto
0.51653 0.01724 lineto
0.52203 0.01756 lineto
0.52754 0.01796 lineto
0.53304 0.01846 lineto
0.54404 0.01972 lineto
0.55503 0.02133 lineto
0.56601 0.02331 lineto
0.5879 0.02831 lineto
0.6097 0.03471 lineto
0.63138 0.04247 lineto
0.6743 0.06195 lineto
0.75771 0.11546 lineto
0.83672 0.18519 lineto
0.90996 0.2664 lineto
0.97619 0.35355 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.75771 0.35355 moveto
0.7577 0.3555 lineto
0.75767 0.35745 lineto
0.75762 0.3594 lineto
0.75755 0.36134 lineto
0.75734 0.36524 lineto
0.75705 0.36913 lineto
0.75667 0.37301 lineto
0.75622 0.37689 lineto
0.75506 0.38463 lineto
0.75358 0.39234 lineto
0.75178 0.4 lineto
0.74725 0.41518 lineto
0.74153 0.43009 lineto
0.73468 0.44467 lineto
0.71792 0.4726 lineto
0.69759 0.4985 lineto
0.6743 0.52191 lineto
0.64861 0.54245 lineto
0.62102 0.55975 lineto
0.60665 0.56709 lineto
0.59198 0.57352 lineto
0.57704 0.57901 lineto
0.56189 0.58354 lineto
0.54656 0.58707 lineto
0.53885 0.58847 lineto
0.53111 0.58961 lineto
0.52335 0.5905 lineto
0.51947 0.59085 lineto
0.51558 0.59114 lineto
0.51168 0.59136 lineto
0.50974 0.59145 lineto
0.50779 0.59152 lineto
0.50584 0.59158 lineto
0.5039 0.59162 lineto
0.50195 0.59164 lineto
0.5 0.59165 lineto
0.49805 0.59164 lineto
0.4961 0.59162 lineto
0.49416 0.59158 lineto
0.49221 0.59152 lineto
0.48832 0.59136 lineto
0.48442 0.59114 lineto
0.48053 0.59085 lineto
0.47665 0.5905 lineto
0.46889 0.58961 lineto
0.46115 0.58847 lineto
0.45344 0.58707 lineto
0.43811 0.58354 lineto
0.42296 0.57901 lineto
Mistroke
0.40802 0.57352 lineto
0.37898 0.55975 lineto
0.35139 0.54245 lineto
0.3257 0.52191 lineto
0.30241 0.4985 lineto
0.28208 0.4726 lineto
0.26532 0.44467 lineto
0.25847 0.43009 lineto
0.25275 0.41518 lineto
0.24822 0.4 lineto
0.24642 0.39234 lineto
0.24494 0.38463 lineto
0.24378 0.37689 lineto
0.24333 0.37301 lineto
0.24295 0.36913 lineto
0.24266 0.36524 lineto
0.24255 0.36329 lineto
0.24245 0.36134 lineto
0.24238 0.3594 lineto
0.24233 0.35745 lineto
0.2423 0.3555 lineto
0.24229 0.35355 lineto
0.2423 0.35161 lineto
0.24233 0.34966 lineto
0.24238 0.34771 lineto
0.24245 0.34576 lineto
0.24266 0.34187 lineto
0.24295 0.33798 lineto
0.24333 0.3341 lineto
0.24378 0.33022 lineto
0.24494 0.32248 lineto
0.24642 0.31477 lineto
0.24822 0.3071 lineto
0.25275 0.29193 lineto
0.25847 0.27702 lineto
0.26532 0.26244 lineto
0.28208 0.23451 lineto
0.30241 0.20861 lineto
0.3257 0.18519 lineto
0.35139 0.16466 lineto
0.37898 0.14736 lineto
0.39335 0.14001 lineto
0.40802 0.13358 lineto
0.42296 0.12809 lineto
0.43811 0.12357 lineto
0.45344 0.12003 lineto
0.46115 0.11864 lineto
0.46889 0.1175 lineto
0.47665 0.1166 lineto
0.48053 0.11625 lineto
Mistroke
0.48442 0.11597 lineto
0.48832 0.11574 lineto
0.49026 0.11566 lineto
0.49221 0.11559 lineto
0.49416 0.11553 lineto
0.4961 0.11549 lineto
0.49805 0.11547 lineto
0.5 0.11546 lineto
0.50195 0.11547 lineto
0.5039 0.11549 lineto
0.50584 0.11553 lineto
0.50779 0.11559 lineto
0.51168 0.11574 lineto
0.51558 0.11597 lineto
0.51947 0.11625 lineto
0.52335 0.1166 lineto
0.53111 0.1175 lineto
0.53885 0.11864 lineto
0.54656 0.12003 lineto
0.56189 0.12357 lineto
0.57704 0.12809 lineto
0.59198 0.13358 lineto
0.62102 0.14736 lineto
0.64861 0.16466 lineto
0.6743 0.18519 lineto
0.69759 0.20861 lineto
0.71792 0.23451 lineto
0.73468 0.26244 lineto
0.74153 0.27702 lineto
0.74725 0.29193 lineto
0.75178 0.3071 lineto
0.75358 0.31477 lineto
0.75506 0.32248 lineto
0.75622 0.33022 lineto
0.75667 0.3341 lineto
0.75705 0.33798 lineto
0.75734 0.34187 lineto
0.75745 0.34382 lineto
0.75755 0.34576 lineto
0.75762 0.34771 lineto
0.75767 0.34966 lineto
0.7577 0.35161 lineto
0.75771 0.35355 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.6743 0.35355 moveto
0.67429 0.35493 lineto
0.67427 0.35631 lineto
0.67424 0.35769 lineto
0.6742 0.35906 lineto
0.67407 0.36181 lineto
0.6739 0.36456 lineto
0.67367 0.36731 lineto
0.67339 0.37006 lineto
0.67269 0.37553 lineto
0.67179 0.38098 lineto
0.6707 0.3864 lineto
0.66793 0.39713 lineto
0.6644 0.40767 lineto
0.66014 0.41798 lineto
0.64954 0.43773 lineto
0.63639 0.45604 lineto
0.62102 0.4726 lineto
0.60373 0.48712 lineto
0.58486 0.49936 lineto
0.57493 0.50455 lineto
0.56473 0.5091 lineto
0.55429 0.51298 lineto
0.54367 0.51618 lineto
0.53288 0.51868 lineto
0.52745 0.51966 lineto
0.52199 0.52047 lineto
0.51651 0.5211 lineto
0.51376 0.52135 lineto
0.51101 0.52155 lineto
0.50826 0.52171 lineto
0.50689 0.52177 lineto
0.50551 0.52182 lineto
0.50413 0.52186 lineto
0.50275 0.52189 lineto
0.50138 0.52191 lineto
0.5 0.52191 lineto
0.49862 0.52191 lineto
0.49725 0.52189 lineto
0.49587 0.52186 lineto
0.49449 0.52182 lineto
0.49174 0.52171 lineto
0.48899 0.52155 lineto
0.48624 0.52135 lineto
0.48349 0.5211 lineto
0.47801 0.52047 lineto
0.47255 0.51966 lineto
0.46712 0.51868 lineto
0.45633 0.51618 lineto
0.44571 0.51298 lineto
Mistroke
0.43527 0.5091 lineto
0.41514 0.49936 lineto
0.39627 0.48712 lineto
0.37898 0.4726 lineto
0.36361 0.45604 lineto
0.35046 0.43773 lineto
0.34483 0.42802 lineto
0.33986 0.41798 lineto
0.3356 0.40767 lineto
0.33207 0.39713 lineto
0.3293 0.3864 lineto
0.32821 0.38098 lineto
0.32731 0.37553 lineto
0.32661 0.37006 lineto
0.32633 0.36731 lineto
0.3261 0.36456 lineto
0.32593 0.36181 lineto
0.32586 0.36044 lineto
0.3258 0.35906 lineto
0.32576 0.35769 lineto
0.32573 0.35631 lineto
0.32571 0.35493 lineto
0.3257 0.35355 lineto
0.32571 0.35218 lineto
0.32573 0.3508 lineto
0.32576 0.34942 lineto
0.3258 0.34804 lineto
0.32593 0.34529 lineto
0.3261 0.34254 lineto
0.32633 0.33979 lineto
0.32661 0.33705 lineto
0.32731 0.33158 lineto
0.32821 0.32613 lineto
0.3293 0.32071 lineto
0.33207 0.30998 lineto
0.3356 0.29944 lineto
0.33986 0.28913 lineto
0.35046 0.26937 lineto
0.36361 0.25106 lineto
0.37898 0.23451 lineto
0.39627 0.21999 lineto
0.41514 0.20775 lineto
0.42507 0.20256 lineto
0.43527 0.19801 lineto
0.44571 0.19413 lineto
0.45633 0.19093 lineto
0.46712 0.18843 lineto
0.47255 0.18744 lineto
0.47801 0.18663 lineto
0.48349 0.18601 lineto
Mistroke
0.48624 0.18576 lineto
0.48899 0.18556 lineto
0.49174 0.1854 lineto
0.49311 0.18534 lineto
0.49449 0.18528 lineto
0.49587 0.18525 lineto
0.49725 0.18522 lineto
0.49862 0.1852 lineto
0.5 0.18519 lineto
0.50138 0.1852 lineto
0.50275 0.18522 lineto
0.50413 0.18525 lineto
0.50551 0.18528 lineto
0.50826 0.1854 lineto
0.51101 0.18556 lineto
0.51376 0.18576 lineto
0.51651 0.18601 lineto
0.52199 0.18663 lineto
0.52745 0.18744 lineto
0.53288 0.18843 lineto
0.54367 0.19093 lineto
0.55429 0.19413 lineto
0.56473 0.19801 lineto
0.58486 0.20775 lineto
0.60373 0.21999 lineto
0.62102 0.23451 lineto
0.63639 0.25106 lineto
0.64954 0.26937 lineto
0.65517 0.27909 lineto
0.66014 0.28913 lineto
0.6644 0.29944 lineto
0.66793 0.30998 lineto
0.6707 0.32071 lineto
0.67179 0.32613 lineto
0.67269 0.33158 lineto
0.67339 0.33705 lineto
0.67367 0.33979 lineto
0.6739 0.34254 lineto
0.67407 0.34529 lineto
0.67414 0.34667 lineto
0.6742 0.34804 lineto
0.67424 0.34942 lineto
0.67427 0.3508 lineto
0.67429 0.35218 lineto
0.6743 0.35355 lineto
Mfstroke
grestore
grestore
gsave
gsave
0.004 setlinewidth
0.57577 0.35355 moveto
0.57577 0.35417 lineto
0.57576 0.35479 lineto
0.57575 0.3554 lineto
0.57573 0.35602 lineto
0.57568 0.35725 lineto
0.57561 0.35848 lineto
0.57552 0.35971 lineto
0.5754 0.36093 lineto
0.57512 0.36338 lineto
0.57475 0.36582 lineto
0.5743 0.36824 lineto
0.57316 0.37304 lineto
0.5717 0.37776 lineto
0.56994 0.38237 lineto
0.56552 0.3912 lineto
0.55997 0.39939 lineto
0.55341 0.40679 lineto
0.54594 0.41329 lineto
0.53771 0.41876 lineto
0.53334 0.42108 lineto
0.52884 0.42311 lineto
0.52422 0.42485 lineto
0.5195 0.42628 lineto
0.51469 0.4274 lineto
0.51227 0.42784 lineto
0.50983 0.4282 lineto
0.50738 0.42848 lineto
0.50615 0.42859 lineto
0.50492 0.42868 lineto
0.50369 0.42876 lineto
0.50308 0.42878 lineto
0.50246 0.42881 lineto
0.50185 0.42882 lineto
0.50123 0.42884 lineto
0.50062 0.42884 lineto
0.5 0.42885 lineto
0.49938 0.42884 lineto
0.49877 0.42884 lineto
0.49815 0.42882 lineto
0.49754 0.42881 lineto
0.49631 0.42876 lineto
0.49508 0.42868 lineto
0.49385 0.42859 lineto
0.49262 0.42848 lineto
0.49017 0.4282 lineto
0.48773 0.42784 lineto
0.48531 0.4274 lineto
0.4805 0.42628 lineto
0.47578 0.42485 lineto
Mistroke
0.47116 0.42311 lineto
0.46229 0.41876 lineto
0.45406 0.41329 lineto
0.44659 0.40679 lineto
0.44003 0.39939 lineto
0.43448 0.3912 lineto
0.43213 0.38685 lineto
0.43006 0.38237 lineto
0.4283 0.37776 lineto
0.42684 0.37304 lineto
0.4257 0.36824 lineto
0.42525 0.36582 lineto
0.42488 0.36338 lineto
0.4246 0.36093 lineto
0.42448 0.35971 lineto
0.42439 0.35848 lineto
0.42432 0.35725 lineto
0.42429 0.35663 lineto
0.42427 0.35602 lineto
0.42425 0.3554 lineto
0.42424 0.35479 lineto
0.42423 0.35417 lineto
0.42423 0.35355 lineto
0.42423 0.35294 lineto
0.42424 0.35232 lineto
0.42425 0.35171 lineto
0.42427 0.35109 lineto
0.42432 0.34986 lineto
0.42439 0.34863 lineto
0.42448 0.3474 lineto
0.4246 0.34617 lineto
0.42488 0.34373 lineto
0.42525 0.34129 lineto
0.4257 0.33886 lineto
0.42684 0.33407 lineto
0.4283 0.32935 lineto
0.43006 0.32474 lineto
0.43448 0.31591 lineto
0.44003 0.30772 lineto
0.44659 0.30031 lineto
0.45406 0.29382 lineto
0.46229 0.28835 lineto
0.46666 0.28603 lineto
0.47116 0.28399 lineto
0.47578 0.28226 lineto
0.4805 0.28083 lineto
0.48531 0.27971 lineto
0.48773 0.27927 lineto
0.49017 0.27891 lineto
0.49262 0.27862 lineto
Mistroke
0.49385 0.27851 lineto
0.49508 0.27842 lineto
0.49631 0.27835 lineto
0.49692 0.27832 lineto
0.49754 0.2783 lineto
0.49815 0.27828 lineto
0.49877 0.27827 lineto
0.49938 0.27826 lineto
0.5 0.27826 lineto
0.50062 0.27826 lineto
0.50123 0.27827 lineto
0.50185 0.27828 lineto
0.50246 0.2783 lineto
0.50369 0.27835 lineto
0.50492 0.27842 lineto
0.50615 0.27851 lineto
0.50738 0.27862 lineto
0.50983 0.27891 lineto
0.51227 0.27927 lineto
0.51469 0.27971 lineto
0.5195 0.28083 lineto
0.52422 0.28226 lineto
0.52884 0.28399 lineto
0.53771 0.28835 lineto
0.54594 0.29382 lineto
0.55341 0.30031 lineto
0.55997 0.30772 lineto
0.56552 0.31591 lineto
0.56787 0.32025 lineto
0.56994 0.32474 lineto
0.5717 0.32935 lineto
0.57316 0.33407 lineto
0.5743 0.33886 lineto
0.57475 0.34129 lineto
0.57512 0.34373 lineto
0.5754 0.34617 lineto
0.57552 0.3474 lineto
0.57561 0.34863 lineto
0.57568 0.34986 lineto
0.57571 0.35047 lineto
0.57573 0.35109 lineto
0.57575 0.35171 lineto
0.57576 0.35232 lineto
0.57577 0.35294 lineto
0.57577 0.35355 lineto
Mfstroke
grestore
grestore
grestore
% End of Graphics
MathPictureEnd
%%:[font = input; preserveAspect; ]
%%					    Figure 1
end
showpage


%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 72.0 72.0 540.0 720.0
%%Creator: Mathematica
%%CreationDate: Mon Dec 21 18:56:53 EST 1992
%%EndComments

/Mathdict 150 dict def
Mathdict begin
/Mlmarg		1.0 72 mul def
/Mrmarg		1.0 72 mul def
/Mbmarg		1.0 72 mul def
/Mtmarg		1.0 72 mul def
/Mwidth		8.5 72 mul def
/Mheight	11 72 mul def
/Mtransform	{  } bind def
/Mnodistort	true def
/Mfixwid	true	def
/Mfixdash	false def
/Mrot		0	def
/Mpstart {
MathPictureStart
} bind def
/Mpend {
MathPictureEnd
} bind def
/Mscale {
0 1 0 1
5 -1 roll
MathScale
} bind def
/ISOLatin1Encoding dup where
{ pop pop }
{
[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft
/logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior
/acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright
/onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis
] def
} ifelse
/MFontDict 50 dict def
/MStrCat
{
exch
dup length
2 index length add
string
dup 3 1 roll
copy
length
exch dup
4 2 roll exch
putinterval
} def
/MCreateEncoding
{
1 index
255 string cvs
(-) MStrCat
1 index MStrCat
cvn exch
(Encoding) MStrCat
cvn dup where
{
exch get
}
{
pop
StandardEncoding
} ifelse
3 1 roll
dup MFontDict exch known not
{
1 index findfont
dup length dict
begin
{1 index /FID ne
{def}
{pop pop}
ifelse} forall
/Encoding 3 index
def
currentdict
end
1 index exch definefont pop
MFontDict 1 index
null put
}
if
exch pop
exch pop
} def
/ISOLatin1 { (ISOLatin1) MCreateEncoding } def
/ISO8859 { (ISOLatin1) MCreateEncoding } def
/Mcopyfont {
dup
maxlength
dict
exch
{
1 index
/FID
eq
{
pop pop
}
{
2 index
3 1 roll
put
}
ifelse
}
forall
} def
/Plain	/Courier findfont Mcopyfont definefont pop
/Bold	/Courier-Bold findfont Mcopyfont definefont pop
/Italic /Courier-Oblique findfont Mcopyfont definefont pop
/MathPictureStart {
gsave
Mtransform
Mlmarg
Mbmarg
translate
Mwidth
Mlmarg Mrmarg add
sub
/Mwidth exch def
Mheight
Mbmarg Mtmarg add
sub
/Mheight exch def
/Mtmatrix
matrix currentmatrix
def
/Mgmatrix
matrix currentmatrix
def
} bind def
/MathPictureEnd {
grestore
} bind def
/MFill {
0 0 		moveto
Mwidth 0 	lineto
Mwidth Mheight 	lineto
0 Mheight 	lineto
fill
} bind def
/MPlotRegion {
3 index
Mwidth mul
2 index
Mheight mul
translate
exch sub
Mheight mul
/Mheight
exch def
exch sub
Mwidth mul
/Mwidth
exch def
} bind def
/MathSubStart {
Momatrix
Mgmatrix Mtmatrix
Mwidth Mheight
7 -2 roll
moveto
Mtmatrix setmatrix
currentpoint
Mgmatrix setmatrix
9 -2 roll
moveto
Mtmatrix setmatrix
currentpoint
2 copy translate
/Mtmatrix matrix currentmatrix def
3 -1 roll
exch sub
/Mheight exch def
sub
/Mwidth exch def
} bind def
/MathSubEnd {
/Mheight exch def
/Mwidth exch def
/Mtmatrix exch def
dup setmatrix
/Mgmatrix exch def
/Momatrix exch def
} bind def
/Mdot {
moveto
0 0 rlineto
stroke
} bind def
/Mtetra {
moveto
lineto
lineto
lineto
fill
} bind def
/Metetra {
moveto
lineto
lineto
lineto
closepath
gsave
fill
grestore
0 setgray
stroke
} bind def
/Mistroke {
flattenpath
0 0 0
{
4 2 roll
pop pop
}
{
4 -1 roll
2 index
sub dup mul
4 -1 roll
2 index
sub dup mul
add sqrt
4 -1 roll
add
3 1 roll
}
{
stop
}
{
stop
}
pathforall
pop pop
currentpoint
stroke
moveto
currentdash
3 -1 roll
add
setdash
} bind def
/Mfstroke {
stroke
currentdash
pop 0
setdash
} bind def
/Mrotsboxa {
gsave
dup
/Mrot
exch def
Mrotcheck
Mtmatrix
dup
setmatrix
7 1 roll
4 index
4 index
translate
rotate
3 index
-1 mul
3 index
-1 mul
translate
/Mtmatrix
matrix
currentmatrix
def
grestore
Msboxa
3  -1 roll
/Mtmatrix
exch def
/Mrot
0 def
} bind def
/Msboxa {
newpath
5 -1 roll
Mvboxa
pop
Mboxout
6 -1 roll
5 -1 roll
4 -1 roll
Msboxa1
5 -3 roll
Msboxa1
Mboxrot
[
7 -2 roll
2 copy
[
3 1 roll
10 -1 roll
9 -1 roll
]
6 1 roll
5 -2 roll
]
} bind def
/Msboxa1 {
sub
2 div
dup
2 index
1 add
mul
3 -1 roll
-1 add
3 -1 roll
mul
} bind def
/Mvboxa	{
Mfixwid
{
Mvboxa1
}
{
dup
Mwidthcal
0 exch
{
add
}
forall
exch
Mvboxa1
4 index
7 -1 roll
add
4 -1 roll
pop
3 1 roll
}
ifelse
} bind def
/Mvboxa1 {
gsave
newpath
[ true
3 -1 roll
{
Mbbox
5 -1 roll
{
0
5 1 roll
}
{
7 -1 roll
exch sub
(m) stringwidth pop
.3 mul
sub
7 1 roll
6 -1 roll
4 -1 roll
Mmin
3 -1 roll
5 index
add
5 -1 roll
4 -1 roll
Mmax
4 -1 roll
}
ifelse
false
}
forall
{ stop } if
counttomark
1 add
4 roll
]
grestore
} bind def
/Mbbox {
1 dict begin
0 0 moveto
/temp (T) def
{	gsave
currentpoint newpath moveto
temp 0 3 -1 roll put temp
false charpath flattenpath currentpoint
pathbbox
grestore moveto lineto moveto} forall
pathbbox
newpath
end
} bind def
/Mmin {
2 copy
gt
{ exch } if
pop
} bind def
/Mmax {
2 copy
lt
{ exch } if
pop
} bind def
/Mrotshowa {
dup
/Mrot
exch def
Mrotcheck
Mtmatrix
dup
setmatrix
7 1 roll
4 index
4 index
translate
rotate
3 index
-1 mul
3 index
-1 mul
translate
/Mtmatrix
matrix
currentmatrix
def
Mgmatrix setmatrix
Mshowa
/Mtmatrix
exch def
/Mrot 0 def
} bind def
/Mshowa {
4 -2 roll
moveto
2 index
Mtmatrix setmatrix
Mvboxa
7 1 roll
Mboxout
6 -1 roll
5 -1 roll
4 -1 roll
Mshowa1
4 1 roll
Mshowa1
rmoveto
currentpoint
Mfixwid
{
Mshowax
}
{
Mshoway
}
ifelse
pop pop pop pop
Mgmatrix setmatrix
} bind def
/Mshowax {
0 1
4 index length
-1 add
{
2 index
4 index
2 index
get
3 index
add
moveto
4 index
exch get
Mfixdash
{
Mfixdashp
}
if
show
} for
} bind def
/Mfixdashp {
dup
length
1
gt
1 index
true exch
{
45
eq
and
} forall
and
{
gsave
(--)
stringwidth pop
(-)
stringwidth pop
sub
2 div
0 rmoveto
dup
length
1 sub
{
(-)
show
}
repeat
grestore
}
if
} bind def
/Mshoway {
3 index
Mwidthcal
5 1 roll
0 1
4 index length
-1 add
{
2 index
4 index
2 index
get
3 index
add
moveto
4 index
exch get
[
6 index
aload
length
2 add
-1 roll
{
pop
Strform
stringwidth
pop
neg
exch
add
0 rmoveto
}
exch
kshow
cleartomark
} for
pop
} bind def
/Mwidthcal {
[
exch
{
Mwidthcal1
}
forall
]
[
exch
dup
Maxlen
-1 add
0 1
3 -1 roll
{
[
exch
2 index
{
1 index
Mget
exch
}
forall
pop
Maxget
exch
}
for
pop
]
Mreva
} bind def
/Mreva	{
[
exch
aload
length
-1 1
{1 roll}
for
]
} bind def
/Mget	{
1 index
length
-1 add
1 index
ge
{
get
}
{
pop pop
0
}
ifelse
} bind def
/Maxlen	{
[
exch
{
length
}
forall
Maxget
} bind def
/Maxget	{
counttomark
-1 add
1 1
3 -1 roll
{
pop
Mmax
}
for
exch
pop
} bind def
/Mwidthcal1 {
[
exch
{
Strform
stringwidth
pop
}
forall
]
} bind def
/Strform {
/tem (x) def
tem 0
3 -1 roll
put
tem
} bind def
/Mshowa1 {
2 copy
add
4 1 roll
sub
mul
sub
-2 div
} bind def
/MathScale {
Mwidth
Mheight
Mlp
translate
scale
/yscale exch def
/ybias exch def
/xscale exch def
/xbias exch def
/Momatrix
xscale yscale matrix scale
xbias ybias matrix translate
matrix concatmatrix def
/Mgmatrix
matrix currentmatrix
def
} bind def
/Mlp {
3 copy
Mlpfirst
{
Mnodistort
{
Mmin
dup
} if
4 index
2 index
2 index
Mlprun
11 index
11 -1 roll
10 -4 roll
Mlp1
8 index
9 -5 roll
Mlp1
4 -1 roll
and
{ exit } if
3 -1 roll
pop pop
} loop
exch
3 1 roll
7 -3 roll
pop pop pop
} bind def
/Mlpfirst {
3 -1 roll
dup length
2 copy
-2 add
get
aload
pop pop pop
4 -2 roll
-1 add
get
aload
pop pop pop
6 -1 roll
3 -1 roll
5 -1 roll
sub
div
4 1 roll
exch sub
div
} bind def
/Mlprun {
2 copy
4 index
0 get
dup
4 1 roll
Mlprun1
3 copy
8 -2 roll
9 -1 roll
{
3 copy
Mlprun1
3 copy
11 -3 roll
/gt Mlpminmax
8 3 roll
11 -3 roll
/lt Mlpminmax
8 3 roll
} forall
pop pop pop pop
3 1 roll
pop pop
aload pop
5 -1 roll
aload pop
exch
6 -1 roll
Mlprun2
8 2 roll
4 -1 roll
Mlprun2
6 2 roll
3 -1 roll
Mlprun2
4 2 roll
exch
Mlprun2
6 2 roll
} bind def
/Mlprun1 {
aload pop
exch
6 -1 roll
5 -1 roll
mul add
4 -2 roll
mul
3 -1 roll
add
} bind def
/Mlprun2 {
2 copy
add 2 div
3 1 roll
exch sub
} bind def
/Mlpminmax {
cvx
2 index
6 index
2 index
exec
{
7 -3 roll
4 -1 roll
} if
1 index
5 index
3 -1 roll
exec
{
4 1 roll
pop
5 -1 roll
aload
pop pop
4 -1 roll
aload pop
[
8 -2 roll
pop
5 -2 roll
pop
6 -2 roll
pop
5 -1 roll
]
4 1 roll
pop
}
{
pop pop pop
} ifelse
} bind def
/Mlp1 {
5 index
3 index	sub
5 index
2 index mul
1 index
le
1 index
0 le
or
dup
not
{
1 index
3 index	div
.99999 mul
8 -1 roll
pop
7 1 roll
}
if
8 -1 roll
2 div
7 -2 roll
pop sub
5 index
6 -3 roll
pop pop
mul sub
exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
outflag
1
eq
{
/outflag 0 def
/intop 0 def
/inrht 0 def
} if
5 index
gsave
Mtmatrix setmatrix
Mvboxa pop
grestore
3 -1 roll
pop
dup
intop
gt
{
/intop
exch def
}
{ pop }
ifelse
dup
inrht
gt
{
/inrht
exch def
}
{ pop }
ifelse
pop
/inflag
1 def
} bind def
/Mouter {
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
inflag
1 eq
{
dup
0 lt
{
dup
intop
mul
neg
/yadtop
exch def
} if
dup
0 gt
{
dup
intop
mul
/yadbot
exch def
}
if
pop
dup
0 lt
{
dup
inrht
mul
neg
/xadrht
exch def
} if
dup
0 gt
{
dup
inrht
mul
/xadlft
exch def
} if
pop
/outflag 1 def
}
{ pop pop}
ifelse
/inflag 0 def
/inrht 0 def
/intop 0 def
} bind def
/Mboxout {
outflag
1
eq
{
4 -1
roll
xadlft
leadjust
add
sub
4 1 roll
3 -1
roll
yadbot
leadjust
add
sub
3 1
roll
exch
xadrht
leadjust
add
add
exch
yadtop
leadjust
add
add
/outflag 0 def
/xadlft 0 def
/yadbot 0 def
/xadrht 0 def
/yadtop 0 def
} if
} bind def
/leadjust {
(m) stringwidth pop
.5 mul
} bind def
/Mrotcheck {
dup
90
eq
{
yadbot
/yadbot
xadrht
def
/xadrht
yadtop
def
/yadtop
xadlft
def
/xadlft
exch
def
}
if
dup
cos
1 index
sin
Checkaux
dup
cos
1 index
sin neg
exch
Checkaux
3 1 roll
pop pop
} bind def
/Checkaux {
4 index
exch
4 index
mul
3 1 roll
mul add
4 1 roll
} bind def
/Mboxrot {
Mrot
90 eq
{
brotaux
4 2
roll
}
if
Mrot
180 eq
{
4 2
roll
brotaux
4 2
roll
brotaux
}
if
Mrot
270 eq
{
4 2
roll
brotaux
}
if
} bind def
/brotaux {
neg
exch
neg
} bind def
/Mabsproc {
0
matrix defaultmatrix
dtransform idtransform
dup mul exch
dup mul
add sqrt
} bind def
/Mabswid {
Mabsproc
setlinewidth
} bind def
/Mabsdash {
exch
[
exch
{
Mabsproc
}
forall
]
exch
setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop}
repeat
} bind def
} ifelse
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def
/setcmykcolor where
{ pop}
{ /setcmykcolor {
4 1
roll
[
4 1
roll
]
{
1 index
sub
1
sub neg
dup
0
lt
{
pop
0
}
if
dup
1
gt
{
pop
1
}
if
exch
} forall
pop
setrgbcolor
} bind def
} ifelse
/Mcharproc
{
currentfile
(x)
readhexstring
pop
0 get
exch
div
} bind def
/Mshadeproc
{
dup
3 1
roll
{
dup
Mcharproc
3 1
roll
} repeat
1 eq
{
setgray
}
{
3 eq
{
setrgbcolor
}
{
setcmykcolor
} ifelse
} ifelse
} bind def
/Mrectproc
{
3 index
2 index
moveto
2 index
3 -1
roll
lineto
dup
3 1
roll
lineto
lineto
fill
} bind def
/Mcolorimage
{
7 1
roll
pop
pop
matrix
invertmatrix
concat
2 exch exp
1 sub
3 1 roll
1 1
2 index
{
1 1
4 index
{
dup
1 sub
exch
2 index
dup
1 sub
exch
7 index
9 index
Mshadeproc
Mrectproc
} for
pop
} for
pop pop pop pop
} bind def
/Mimage
{
pop
matrix
invertmatrix
concat
2 exch exp
1 sub
3 1 roll
1 1
2 index
{
1 1
4 index
{
dup
1 sub
exch
2 index
dup
1 sub
exch
7 index
Mcharproc
setgray
Mrectproc
} for
pop
} for
pop pop pop
} bind def

%%AspectRatio: 2.47214
MathPictureStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.0238095 0.952381 -0.443867 0.952381 [
[ 0 0 0 0 ]
[ 1 2.47214 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
0 g
p
P
0 0 m
1 0 L
1 2.47214 L
0 2.47214 L
closepath
clip
newpath
p
p
% Start of sub-graphic
p
.02381  1.82467 .97619  2.41328 MathSubStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.15873 0.0147151 0.0744937 [
[(-3)] .02381  .01472  0 2 Msboxa
[(-2)] .18254  .01472  0 2 Msboxa
[(-1)] .34127  .01472  0 2 Msboxa
[(1)] .65873  .01472  0 2 Msboxa
[(2)] .81746  .01472  0 2 Msboxa
[(3)] .97619  .01472  0 2 Msboxa
[(z)] 1.025 .01472  -1 0 Msboxa
[(2)] .4875  .1637  1 0 Msboxa
[(4)] .4875  .31269  1 0 Msboxa
[(V\(z\))] .5  .61803  0 -4 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
p
p
.002  w
.02381  .01472  m
.02381  .02097  L
s
P
[(-3)] .02381  .01472  0 2 Mshowa
p
.002  w
.18254  .01472  m
.18254  .02097  L
s
P
[(-2)] .18254  .01472  0 2 Mshowa
p
.002  w
.34127  .01472  m
.34127  .02097  L
s
P
[(-1)] .34127  .01472  0 2 Mshowa
p
.002  w
.65873  .01472  m
.65873  .02097  L
s
P
[(1)] .65873  .01472  0 2 Mshowa
p
.002  w
.81746  .01472  m
.81746  .02097  L
s
P
[(2)] .81746  .01472  0 2 Mshowa
p
.002  w
.97619  .01472  m
.97619  .02097  L
s
P
[(3)] .97619  .01472  0 2 Mshowa
p
.001  w
.05556  .01472  m
.05556  .01847  L
s
P
p
.001  w
.0873  .01472  m
.0873  .01847  L
s
P
p
.001  w
.11905  .01472  m
.11905  .01847  L
s
P
p
.001  w
.15079  .01472  m
.15079  .01847  L
s
P
p
.001  w
.21429  .01472  m
.21429  .01847  L
s
P
p
.001  w
.24603  .01472  m
.24603  .01847  L
s
P
p
.001  w
.27778  .01472  m
.27778  .01847  L
s
P
p
.001  w
.30952  .01472  m
.30952  .01847  L
s
P
p
.001  w
.37302  .01472  m
.37302  .01847  L
s
P
p
.001  w
.40476  .01472  m
.40476  .01847  L
s
P
p
.001  w
.43651  .01472  m
.43651  .01847  L
s
P
p
.001  w
.46825  .01472  m
.46825  .01847  L
s
P
p
.001  w
.53175  .01472  m
.53175  .01847  L
s
P
p
.001  w
.56349  .01472  m
.56349  .01847  L
s
P
p
.001  w
.59524  .01472  m
.59524  .01847  L
s
P
p
.001  w
.62698  .01472  m
.62698  .01847  L
s
P
p
.001  w
.69048  .01472  m
.69048  .01847  L
s
P
p
.001  w
.72222  .01472  m
.72222  .01847  L
s
P
p
.001  w
.75397  .01472  m
.75397  .01847  L
s
P
p
.001  w
.78571  .01472  m
.78571  .01847  L
s
P
p
.001  w
.84921  .01472  m
.84921  .01847  L
s
P
p
.001  w
.88095  .01472  m
.88095  .01847  L
s
P
p
.001  w
.9127  .01472  m
.9127  .01847  L
s
P
p
.001  w
.94444  .01472  m
.94444  .01847  L
s
P
[(z)] 1.025 .01472  -1 0 Mshowa
p
.002  w
0 .01472  m
1 .01472  L
s
P
p
.002  w
.5  .1637  m
.50625  .1637  L
s
P
[(2)] .4875  .1637  1 0 Mshowa
p
.002  w
.5  .31269  m
.50625  .31269  L
s
P
[(4)] .4875  .31269  1 0 Mshowa
[(V\(z\))] .5  .61803  0 -4 Mshowa
p
.002  w
.5  0 m
.5  .61803  L
s
P
P
0 0 m
1 0 L
1 .61803  L
0 .61803  L
closepath
clip
newpath
p
p
.004  w
.02381  .60332  m
.06349  .50272  L
.10317  .41204  L
.14286  .33143  L
.18254  .26105  L
.22222  .20116  L
.2619  .15212  L
.28175  .13183  L
.30159  .11449  L
.32143  .10022  L
.33135  .0943  L
.34127  .08921  L
.35119  .085  L
.36111  .0817  L
.36607  .0804  L
.37103  .07936  L
.37351  .07893  L
.37599  .07857  L
.37847  .07828  L
.37971  .07815  L
.38095  .07805  L
.38219  .07796  L
.38343  .07789  L
.38467  .07784  L
.38591  .0778  L
.38715  .07778  L
.38839  .07778  L
.38963  .0778  L
.39087  .07784  L
.39211  .07789  L
.39335  .07797  L
.39583  .07817  L
.39831  .07846  L
.40079  .07883  L
.40575  .07981  L
.41071  .08115  L
.41567  .08286  L
.42063  .08497  L
.43056  .09056  L
.44048  .09826  L
.4504  .10864  L
.46032  .12264  L
.46528  .1315  L
.47024  .14203  L
.4752  .15482  L
.48016  .17078  L
.48264  .18046  L
.48512  .19171  L
.4876  .20509  L
.49008  .22155  L
Mistroke
.49256  .24285  L
.4938  .25638  L
.49504  .27296  L
.49628  .29436  L
.49752  .32454  L
.49876  .37617  L
Mfstroke
.50124  .37617  m
.50248  .32454  L
.50372  .29436  L
.50496  .27296  L
.50744  .24285  L
.50992  .22155  L
.5124  .20509  L
.51488  .19171  L
.51984  .17078  L
.5248  .15482  L
.52976  .14203  L
.53968  .12264  L
.5496  .10864  L
.55952  .09826  L
.56944  .09056  L
.5744  .08753  L
.57937  .08497  L
.58433  .08286  L
.58929  .08115  L
.59425  .07981  L
.59673  .07928  L
.59921  .07883  L
.60169  .07846  L
.60417  .07817  L
.60541  .07806  L
.60665  .07797  L
.60789  .07789  L
.60913  .07784  L
.61037  .0778  L
.61161  .07778  L
.61285  .07778  L
.61409  .0778  L
.61533  .07784  L
.61657  .07789  L
.61781  .07796  L
.61905  .07805  L
.62153  .07828  L
.62401  .07857  L
.62897  .07936  L
.63393  .0804  L
.63889  .0817  L
.64881  .085  L
.65873  .08921  L
.67857  .10022  L
.69841  .11449  L
.7381  .15212  L
.77778  .20116  L
.81746  .26105  L
.85714  .33143  L
.89683  .41204  L
Mistroke
.93651  .50272  L
.97619  .60332  L
Mfstroke
P
P
MathSubEnd
P
% End of sub-graphic
P
p
% Start of sub-graphic
p
.02381  .94177  .97619  1.53037 MathSubStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.15873 0.0147151 0.0654004 [
[(-3)] .02381  .01472  0 2 Msboxa
[(-2)] .18254  .01472  0 2 Msboxa
[(-1)] .34127  .01472  0 2 Msboxa
[(1)] .65873  .01472  0 2 Msboxa
[(2)] .81746  .01472  0 2 Msboxa
[(3)] .97619  .01472  0 2 Msboxa
[(z)] 1.025 .01472  -1 0 Msboxa
[(2)] .4875  .14552  1 0 Msboxa
[(4)] .4875  .27632  1 0 Msboxa
[(6)] .4875  .40712  1 0 Msboxa
[(V\(z\))] .5  .61803  0 -4 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
p
p
.002  w
.02381  .01472  m
.02381  .02097  L
s
P
[(-3)] .02381  .01472  0 2 Mshowa
p
.002  w
.18254  .01472  m
.18254  .02097  L
s
P
[(-2)] .18254  .01472  0 2 Mshowa
p
.002  w
.34127  .01472  m
.34127  .02097  L
s
P
[(-1)] .34127  .01472  0 2 Mshowa
p
.002  w
.65873  .01472  m
.65873  .02097  L
s
P
[(1)] .65873  .01472  0 2 Mshowa
p
.002  w
.81746  .01472  m
.81746  .02097  L
s
P
[(2)] .81746  .01472  0 2 Mshowa
p
.002  w
.97619  .01472  m
.97619  .02097  L
s
P
[(3)] .97619  .01472  0 2 Mshowa
p
.001  w
.05556  .01472  m
.05556  .01847  L
s
P
p
.001  w
.0873  .01472  m
.0873  .01847  L
s
P
p
.001  w
.11905  .01472  m
.11905  .01847  L
s
P
p
.001  w
.15079  .01472  m
.15079  .01847  L
s
P
p
.001  w
.21429  .01472  m
.21429  .01847  L
s
P
p
.001  w
.24603  .01472  m
.24603  .01847  L
s
P
p
.001  w
.27778  .01472  m
.27778  .01847  L
s
P
p
.001  w
.30952  .01472  m
.30952  .01847  L
s
P
p
.001  w
.37302  .01472  m
.37302  .01847  L
s
P
p
.001  w
.40476  .01472  m
.40476  .01847  L
s
P
p
.001  w
.43651  .01472  m
.43651  .01847  L
s
P
p
.001  w
.46825  .01472  m
.46825  .01847  L
s
P
p
.001  w
.53175  .01472  m
.53175  .01847  L
s
P
p
.001  w
.56349  .01472  m
.56349  .01847  L
s
P
p
.001  w
.59524  .01472  m
.59524  .01847  L
s
P
p
.001  w
.62698  .01472  m
.62698  .01847  L
s
P
p
.001  w
.69048  .01472  m
.69048  .01847  L
s
P
p
.001  w
.72222  .01472  m
.72222  .01847  L
s
P
p
.001  w
.75397  .01472  m
.75397  .01847  L
s
P
p
.001  w
.78571  .01472  m
.78571  .01847  L
s
P
p
.001  w
.84921  .01472  m
.84921  .01847  L
s
P
p
.001  w
.88095  .01472  m
.88095  .01847  L
s
P
p
.001  w
.9127  .01472  m
.9127  .01847  L
s
P
p
.001  w
.94444  .01472  m
.94444  .01847  L
s
P
[(z)] 1.025 .01472  -1 0 Mshowa
p
.002  w
0 .01472  m
1 .01472  L
s
P
p
.002  w
.5  .14552  m
.50625  .14552  L
s
P
[(2)] .4875  .14552  1 0 Mshowa
p
.002  w
.5  .27632  m
.50625  .27632  L
s
P
[(4)] .4875  .27632  1 0 Mshowa
p
.002  w
.5  .40712  m
.50625  .40712  L
s
P
[(6)] .4875  .40712  1 0 Mshowa
[(V\(z\))] .5  .61803  0 -4 Mshowa
p
.002  w
.5  0 m
.5  .61803  L
s
P
P
0 0 m
1 0 L
1 .61803  L
0 .61803  L
closepath
clip
newpath
p
p
.004  w
.02381  .60332  m
.06349  .50931  L
.10317  .42347  L
.14286  .3458  L
.18254  .27632  L
.22222  .215  L
.2619  .16187  L
.30159  .1169  L
.34127  .08012  L
.38095  .0515  L
.40079  .04026  L
.42063  .03107  L
.44048  .02391  L
.4504  .0211  L
.46032  .0188  L
.47024  .01701  L
.4752  .01631  L
.48016  .01574  L
.48512  .01529  L
.4876  .01511  L
.49008  .01497  L
.49256  .01486  L
.4938  .01481  L
.49504  .01478  L
.49628  .01475  L
.49752  .01473  L
.49876  .01472  L
s
.50124  .01472  m
.50248  .01473  L
.50372  .01475  L
.50496  .01478  L
.50744  .01486  L
.50992  .01497  L
.5124  .01511  L
.51488  .01529  L
.51984  .01574  L
.5248  .01631  L
.52976  .01701  L
.53968  .0188  L
.5496  .0211  L
.55952  .02391  L
.57937  .03107  L
.59921  .04026  L
.61905  .0515  L
.65873  .08012  L
.69841  .1169  L
.7381  .16187  L
.77778  .215  L
.81746  .27632  L
.85714  .3458  L
.89683  .42347  L
.93651  .50931  L
.97619  .60332  L
s
P
P
MathSubEnd
P
% End of sub-graphic
P
p
% Start of sub-graphic
p
.02381  .05886  .97619  .64746  MathSubStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.15873 0.205737 0.03937 [
[(-3)] .02381  .20574  0 2 Msboxa
[(-2)] .18254  .20574  0 2 Msboxa
[(-1)] .34127  .20574  0 2 Msboxa
[(1)] .65873  .20574  0 2 Msboxa
[(2)] .81746  .20574  0 2 Msboxa
[(3)] .97619  .20574  0 2 Msboxa
[(z)] 1.025 .20574  -1 0 Msboxa
[(-4)] .4875  .04826  1 0 Msboxa
[(-2)] .4875  .127  1 0 Msboxa
[(2)] .4875  .28448  1 0 Msboxa
[(4)] .4875  .36322  1 0 Msboxa
[(V\(z\))] .5  .61803  0 -4 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
p
p
.002  w
.02381  .20574  m
.02381  .21199  L
s
P
[(-3)] .02381  .20574  0 2 Mshowa
p
.002  w
.18254  .20574  m
.18254  .21199  L
s
P
[(-2)] .18254  .20574  0 2 Mshowa
p
.002  w
.34127  .20574  m
.34127  .21199  L
s
P
[(-1)] .34127  .20574  0 2 Mshowa
p
.002  w
.65873  .20574  m
.65873  .21199  L
s
P
[(1)] .65873  .20574  0 2 Mshowa
p
.002  w
.81746  .20574  m
.81746  .21199  L
s
P
[(2)] .81746  .20574  0 2 Mshowa
p
.002  w
.97619  .20574  m
.97619  .21199  L
s
P
[(3)] .97619  .20574  0 2 Mshowa
p
.001  w
.05556  .20574  m
.05556  .20949  L
s
P
p
.001  w
.0873  .20574  m
.0873  .20949  L
s
P
p
.001  w
.11905  .20574  m
.11905  .20949  L
s
P
p
.001  w
.15079  .20574  m
.15079  .20949  L
s
P
p
.001  w
.21429  .20574  m
.21429  .20949  L
s
P
p
.001  w
.24603  .20574  m
.24603  .20949  L
s
P
p
.001  w
.27778  .20574  m
.27778  .20949  L
s
P
p
.001  w
.30952  .20574  m
.30952  .20949  L
s
P
p
.001  w
.37302  .20574  m
.37302  .20949  L
s
P
p
.001  w
.40476  .20574  m
.40476  .20949  L
s
P
p
.001  w
.43651  .20574  m
.43651  .20949  L
s
P
p
.001  w
.46825  .20574  m
.46825  .20949  L
s
P
p
.001  w
.53175  .20574  m
.53175  .20949  L
s
P
p
.001  w
.56349  .20574  m
.56349  .20949  L
s
P
p
.001  w
.59524  .20574  m
.59524  .20949  L
s
P
p
.001  w
.62698  .20574  m
.62698  .20949  L
s
P
p
.001  w
.69048  .20574  m
.69048  .20949  L
s
P
p
.001  w
.72222  .20574  m
.72222  .20949  L
s
P
p
.001  w
.75397  .20574  m
.75397  .20949  L
s
P
p
.001  w
.78571  .20574  m
.78571  .20949  L
s
P
p
.001  w
.84921  .20574  m
.84921  .20949  L
s
P
p
.001  w
.88095  .20574  m
.88095  .20949  L
s
P
p
.001  w
.9127  .20574  m
.9127  .20949  L
s
P
p
.001  w
.94444  .20574  m
.94444  .20949  L
s
P
[(z)] 1.025 .20574  -1 0 Mshowa
p
.002  w
0 .20574  m
1 .20574  L
s
P
p
.002  w
.5  .04826  m
.50625  .04826  L
s
P
[(-4)] .4875  .04826  1 0 Mshowa
p
.002  w
.5  .127  m
.50625  .127  L
s
P
[(-2)] .4875  .127  1 0 Mshowa
p
.002  w
.5  .28448  m
.50625  .28448  L
s
P
[(2)] .4875  .28448  1 0 Mshowa
p
.002  w
.5  .36322  m
.50625  .36322  L
s
P
[(4)] .4875  .36322  1 0 Mshowa
[(V\(z\))] .5  .61803  0 -4 Mshowa
p
.002  w
.5  0 m
.5  .61803  L
s
P
P
0 0 m
1 0 L
1 .61803  L
0 .61803  L
closepath
clip
newpath
p
p
.004  w
.02381  .60332  m
.06349  .5433  L
.10317  .48787  L
.14286  .43697  L
.18254  .39051  L
.22222  .34834  L
.2619  .31028  L
.30159  .27604  L
.34127  .24511  L
.38095  .21656  L
.42063  .18829  L
.44048  .17266  L
.4504  .16379  L
.46032  .15362  L
.47024  .14122  L
.4752  .13362  L
.48016  .12448  L
.48512  .11289  L
.4876  .10561  L
.49008  .09673  L
.49256  .08534  L
.4938  .07814  L
.49504  .06933  L
.49628  .05799  L
.49752  .04201  L
.49876  .01472  L
s
.50124  .01472  m
.50248  .04201  L
.50372  .05799  L
.50496  .06933  L
.50744  .08534  L
.50992  .09673  L
.51488  .11289  L
.51984  .12448  L
.52976  .14122  L
.53968  .15362  L
.55952  .17266  L
.57937  .18829  L
.61905  .21656  L
.65873  .24511  L
.69841  .27604  L
.7381  .31028  L
.77778  .34834  L
.81746  .39051  L
.85714  .43697  L
.89683  .48787  L
.93651  .5433  L
.97619  .60332  L
s
P
P
MathSubEnd
P
% End of sub-graphic
P
P
% End of Graphics
MathPictureEnd
end
showpage

%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 72.0 72.0 540.0 720.0
%%Creator: Mathematica
%%CreationDate: Mon Dec 21 17:04:11 EST 1992
%%EndComments

/Mathdict 150 dict def
Mathdict begin
/Mlmarg		1.0 72 mul def
/Mrmarg		1.0 72 mul def
/Mbmarg		1.0 72 mul def
/Mtmarg		1.0 72 mul def
/Mwidth		8.5 72 mul def
/Mheight	11 72 mul def
/Mtransform	{  } bind def
/Mnodistort	true def
/Mfixwid	true	def
/Mfixdash	false def
/Mrot		0	def
/Mpstart {
MathPictureStart
} bind def
/Mpend {
MathPictureEnd
} bind def
/Mscale {
0 1 0 1
5 -1 roll
MathScale
} bind def
/ISOLatin1Encoding dup where
{ pop pop }
{
[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft
/logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior
/acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright
/onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis
] def
} ifelse
/MFontDict 50 dict def
/MStrCat
{
exch
dup length
2 index length add
string
dup 3 1 roll
copy
length
exch dup
4 2 roll exch
putinterval
} def
/MCreateEncoding
{
1 index
255 string cvs
(-) MStrCat
1 index MStrCat
cvn exch
(Encoding) MStrCat
cvn dup where
{
exch get
}
{
pop
StandardEncoding
} ifelse
3 1 roll
dup MFontDict exch known not
{
1 index findfont
dup length dict
begin
{1 index /FID ne
{def}
{pop pop}
ifelse} forall
/Encoding 3 index
def
currentdict
end
1 index exch definefont pop
MFontDict 1 index
null put
}
if
exch pop
exch pop
} def
/ISOLatin1 { (ISOLatin1) MCreateEncoding } def
/ISO8859 { (ISOLatin1) MCreateEncoding } def
/Mcopyfont {
dup
maxlength
dict
exch
{
1 index
/FID
eq
{
pop pop
}
{
2 index
3 1 roll
put
}
ifelse
}
forall
} def
/Plain	/Courier findfont Mcopyfont definefont pop
/Bold	/Courier-Bold findfont Mcopyfont definefont pop
/Italic /Courier-Oblique findfont Mcopyfont definefont pop
/MathPictureStart {
gsave
Mtransform
Mlmarg
Mbmarg
translate
Mwidth
Mlmarg Mrmarg add
sub
/Mwidth exch def
Mheight
Mbmarg Mtmarg add
sub
/Mheight exch def
/Mtmatrix
matrix currentmatrix
def
/Mgmatrix
matrix currentmatrix
def
} bind def
/MathPictureEnd {
grestore
} bind def
/MFill {
0 0 		moveto
Mwidth 0 	lineto
Mwidth Mheight 	lineto
0 Mheight 	lineto
fill
} bind def
/MPlotRegion {
3 index
Mwidth mul
2 index
Mheight mul
translate
exch sub
Mheight mul
/Mheight
exch def
exch sub
Mwidth mul
/Mwidth
exch def
} bind def
/MathSubStart {
Momatrix
Mgmatrix Mtmatrix
Mwidth Mheight
7 -2 roll
moveto
Mtmatrix setmatrix
currentpoint
Mgmatrix setmatrix
9 -2 roll
moveto
Mtmatrix setmatrix
currentpoint
2 copy translate
/Mtmatrix matrix currentmatrix def
3 -1 roll
exch sub
/Mheight exch def
sub
/Mwidth exch def
} bind def
/MathSubEnd {
/Mheight exch def
/Mwidth exch def
/Mtmatrix exch def
dup setmatrix
/Mgmatrix exch def
/Momatrix exch def
} bind def
/Mdot {
moveto
0 0 rlineto
stroke
} bind def
/Mtetra {
moveto
lineto
lineto
lineto
fill
} bind def
/Metetra {
moveto
lineto
lineto
lineto
closepath
gsave
fill
grestore
0 setgray
stroke
} bind def
/Mistroke {
flattenpath
0 0 0
{
4 2 roll
pop pop
}
{
4 -1 roll
2 index
sub dup mul
4 -1 roll
2 index
sub dup mul
add sqrt
4 -1 roll
add
3 1 roll
}
{
stop
}
{
stop
}
pathforall
pop pop
currentpoint
stroke
moveto
currentdash
3 -1 roll
add
setdash
} bind def
/Mfstroke {
stroke
currentdash
pop 0
setdash
} bind def
/Mrotsboxa {
gsave
dup
/Mrot
exch def
Mrotcheck
Mtmatrix
dup
setmatrix
7 1 roll
4 index
4 index
translate
rotate
3 index
-1 mul
3 index
-1 mul
translate
/Mtmatrix
matrix
currentmatrix
def
grestore
Msboxa
3  -1 roll
/Mtmatrix
exch def
/Mrot
0 def
} bind def
/Msboxa {
newpath
5 -1 roll
Mvboxa
pop
Mboxout
6 -1 roll
5 -1 roll
4 -1 roll
Msboxa1
5 -3 roll
Msboxa1
Mboxrot
[
7 -2 roll
2 copy
[
3 1 roll
10 -1 roll
9 -1 roll
]
6 1 roll
5 -2 roll
]
} bind def
/Msboxa1 {
sub
2 div
dup
2 index
1 add
mul
3 -1 roll
-1 add
3 -1 roll
mul
} bind def
/Mvboxa	{
Mfixwid
{
Mvboxa1
}
{
dup
Mwidthcal
0 exch
{
add
}
forall
exch
Mvboxa1
4 index
7 -1 roll
add
4 -1 roll
pop
3 1 roll
}
ifelse
} bind def
/Mvboxa1 {
gsave
newpath
[ true
3 -1 roll
{
Mbbox
5 -1 roll
{
0
5 1 roll
}
{
7 -1 roll
exch sub
(m) stringwidth pop
.3 mul
sub
7 1 roll
6 -1 roll
4 -1 roll
Mmin
3 -1 roll
5 index
add
5 -1 roll
4 -1 roll
Mmax
4 -1 roll
}
ifelse
false
}
forall
{ stop } if
counttomark
1 add
4 roll
]
grestore
} bind def
/Mbbox {
1 dict begin
0 0 moveto
/temp (T) def
{	gsave
currentpoint newpath moveto
temp 0 3 -1 roll put temp
false charpath flattenpath currentpoint
pathbbox
grestore moveto lineto moveto} forall
pathbbox
newpath
end
} bind def
/Mmin {
2 copy
gt
{ exch } if
pop
} bind def
/Mmax {
2 copy
lt
{ exch } if
pop
} bind def
/Mrotshowa {
dup
/Mrot
exch def
Mrotcheck
Mtmatrix
dup
setmatrix
7 1 roll
4 index
4 index
translate
rotate
3 index
-1 mul
3 index
-1 mul
translate
/Mtmatrix
matrix
currentmatrix
def
Mgmatrix setmatrix
Mshowa
/Mtmatrix
exch def
/Mrot 0 def
} bind def
/Mshowa {
4 -2 roll
moveto
2 index
Mtmatrix setmatrix
Mvboxa
7 1 roll
Mboxout
6 -1 roll
5 -1 roll
4 -1 roll
Mshowa1
4 1 roll
Mshowa1
rmoveto
currentpoint
Mfixwid
{
Mshowax
}
{
Mshoway
}
ifelse
pop pop pop pop
Mgmatrix setmatrix
} bind def
/Mshowax {
0 1
4 index length
-1 add
{
2 index
4 index
2 index
get
3 index
add
moveto
4 index
exch get
Mfixdash
{
Mfixdashp
}
if
show
} for
} bind def
/Mfixdashp {
dup
length
1
gt
1 index
true exch
{
45
eq
and
} forall
and
{
gsave
(--)
stringwidth pop
(-)
stringwidth pop
sub
2 div
0 rmoveto
dup
length
1 sub
{
(-)
show
}
repeat
grestore
}
if
} bind def
/Mshoway {
3 index
Mwidthcal
5 1 roll
0 1
4 index length
-1 add
{
2 index
4 index
2 index
get
3 index
add
moveto
4 index
exch get
[
6 index
aload
length
2 add
-1 roll
{
pop
Strform
stringwidth
pop
neg
exch
add
0 rmoveto
}
exch
kshow
cleartomark
} for
pop
} bind def
/Mwidthcal {
[
exch
{
Mwidthcal1
}
forall
]
[
exch
dup
Maxlen
-1 add
0 1
3 -1 roll
{
[
exch
2 index
{
1 index
Mget
exch
}
forall
pop
Maxget
exch
}
for
pop
]
Mreva
} bind def
/Mreva	{
[
exch
aload
length
-1 1
{1 roll}
for
]
} bind def
/Mget	{
1 index
length
-1 add
1 index
ge
{
get
}
{
pop pop
0
}
ifelse
} bind def
/Maxlen	{
[
exch
{
length
}
forall
Maxget
} bind def
/Maxget	{
counttomark
-1 add
1 1
3 -1 roll
{
pop
Mmax
}
for
exch
pop
} bind def
/Mwidthcal1 {
[
exch
{
Strform
stringwidth
pop
}
forall
]
} bind def
/Strform {
/tem (x) def
tem 0
3 -1 roll
put
tem
} bind def
/Mshowa1 {
2 copy
add
4 1 roll
sub
mul
sub
-2 div
} bind def
/MathScale {
Mwidth
Mheight
Mlp
translate
scale
/yscale exch def
/ybias exch def
/xscale exch def
/xbias exch def
/Momatrix
xscale yscale matrix scale
xbias ybias matrix translate
matrix concatmatrix def
/Mgmatrix
matrix currentmatrix
def
} bind def
/Mlp {
3 copy
Mlpfirst
{
Mnodistort
{
Mmin
dup
} if
4 index
2 index
2 index
Mlprun
11 index
11 -1 roll
10 -4 roll
Mlp1
8 index
9 -5 roll
Mlp1
4 -1 roll
and
{ exit } if
3 -1 roll
pop pop
} loop
exch
3 1 roll
7 -3 roll
pop pop pop
} bind def
/Mlpfirst {
3 -1 roll
dup length
2 copy
-2 add
get
aload
pop pop pop
4 -2 roll
-1 add
get
aload
pop pop pop
6 -1 roll
3 -1 roll
5 -1 roll
sub
div
4 1 roll
exch sub
div
} bind def
/Mlprun {
2 copy
4 index
0 get
dup
4 1 roll
Mlprun1
3 copy
8 -2 roll
9 -1 roll
{
3 copy
Mlprun1
3 copy
11 -3 roll
/gt Mlpminmax
8 3 roll
11 -3 roll
/lt Mlpminmax
8 3 roll
} forall
pop pop pop pop
3 1 roll
pop pop
aload pop
5 -1 roll
aload pop
exch
6 -1 roll
Mlprun2
8 2 roll
4 -1 roll
Mlprun2
6 2 roll
3 -1 roll
Mlprun2
4 2 roll
exch
Mlprun2
6 2 roll
} bind def
/Mlprun1 {
aload pop
exch
6 -1 roll
5 -1 roll
mul add
4 -2 roll
mul
3 -1 roll
add
} bind def
/Mlprun2 {
2 copy
add 2 div
3 1 roll
exch sub
} bind def
/Mlpminmax {
cvx
2 index
6 index
2 index
exec
{
7 -3 roll
4 -1 roll
} if
1 index
5 index
3 -1 roll
exec
{
4 1 roll
pop
5 -1 roll
aload
pop pop
4 -1 roll
aload pop
[
8 -2 roll
pop
5 -2 roll
pop
6 -2 roll
pop
5 -1 roll
]
4 1 roll
pop
}
{
pop pop pop
} ifelse
} bind def
/Mlp1 {
5 index
3 index	sub
5 index
2 index mul
1 index
le
1 index
0 le
or
dup
not
{
1 index
3 index	div
.99999 mul
8 -1 roll
pop
7 1 roll
}
if
8 -1 roll
2 div
7 -2 roll
pop sub
5 index
6 -3 roll
pop pop
mul sub
exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
outflag
1
eq
{
/outflag 0 def
/intop 0 def
/inrht 0 def
} if
5 index
gsave
Mtmatrix setmatrix
Mvboxa pop
grestore
3 -1 roll
pop
dup
intop
gt
{
/intop
exch def
}
{ pop }
ifelse
dup
inrht
gt
{
/inrht
exch def
}
{ pop }
ifelse
pop
/inflag
1 def
} bind def
/Mouter {
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
inflag
1 eq
{
dup
0 lt
{
dup
intop
mul
neg
/yadtop
exch def
} if
dup
0 gt
{
dup
intop
mul
/yadbot
exch def
}
if
pop
dup
0 lt
{
dup
inrht
mul
neg
/xadrht
exch def
} if
dup
0 gt
{
dup
inrht
mul
/xadlft
exch def
} if
pop
/outflag 1 def
}
{ pop pop}
ifelse
/inflag 0 def
/inrht 0 def
/intop 0 def
} bind def
/Mboxout {
outflag
1
eq
{
4 -1
roll
xadlft
leadjust
add
sub
4 1 roll
3 -1
roll
yadbot
leadjust
add
sub
3 1
roll
exch
xadrht
leadjust
add
add
exch
yadtop
leadjust
add
add
/outflag 0 def
/xadlft 0 def
/yadbot 0 def
/xadrht 0 def
/yadtop 0 def
} if
} bind def
/leadjust {
(m) stringwidth pop
.5 mul
} bind def
/Mrotcheck {
dup
90
eq
{
yadbot
/yadbot
xadrht
def
/xadrht
yadtop
def
/yadtop
xadlft
def
/xadlft
exch
def
}
if
dup
cos
1 index
sin
Checkaux
dup
cos
1 index
sin neg
exch
Checkaux
3 1 roll
pop pop
} bind def
/Checkaux {
4 index
exch
4 index
mul
3 1 roll
mul add
4 1 roll
} bind def
/Mboxrot {
Mrot
90 eq
{
brotaux
4 2
roll
}
if
Mrot
180 eq
{
4 2
roll
brotaux
4 2
roll
brotaux
}
if
Mrot
270 eq
{
4 2
roll
brotaux
}
if
} bind def
/brotaux {
neg
exch
neg
} bind def
/Mabsproc {
0
matrix defaultmatrix
dtransform idtransform
dup mul exch
dup mul
add sqrt
} bind def
/Mabswid {
Mabsproc
setlinewidth
} bind def
/Mabsdash {
exch
[
exch
{
Mabsproc
}
forall
]
exch
setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop}
repeat
} bind def
} ifelse
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def
/setcmykcolor where
{ pop}
{ /setcmykcolor {
4 1
roll
[
4 1
roll
]
{
1 index
sub
1
sub neg
dup
0
lt
{
pop
0
}
if
dup
1
gt
{
pop
1
}
if
exch
} forall
pop
setrgbcolor
} bind def
} ifelse
/Mcharproc
{
currentfile
(x)
readhexstring
pop
0 get
exch
div
} bind def
/Mshadeproc
{
dup
3 1
roll
{
dup
Mcharproc
3 1
roll
} repeat
1 eq
{
setgray
}
{
3 eq
{
setrgbcolor
}
{
setcmykcolor
} ifelse
} ifelse
} bind def
/Mrectproc
{
3 index
2 index
moveto
2 index
3 -1
roll
lineto
dup
3 1
roll
lineto
lineto
fill
} bind def
/Mcolorimage
{
7 1
roll
pop
pop
matrix
invertmatrix
concat
2 exch exp
1 sub
3 1 roll
1 1
2 index
{
1 1
4 index
{
dup
1 sub
exch
2 index
dup
1 sub
exch
7 index
9 index
Mshadeproc
Mrectproc
} for
pop
} for
pop pop pop pop
} bind def
/Mimage
{
pop
matrix
invertmatrix
concat
2 exch exp
1 sub
3 1 roll
1 1
2 index
{
1 1
4 index
{
dup
1 sub
exch
2 index
dup
1 sub
exch
7 index
Mcharproc
setgray
Mrectproc
} for
pop
} for
pop pop pop
} bind def

%%AspectRatio: .73575
MathPictureStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.0238095 0.952381 0.033928 0.952381 [
[ 0 0 0 0 ]
[ 1 .73575  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
0 g
p
P
0 0 m
1 0 L
1 .73575  L
0 .73575  L
closepath
clip
newpath
p
p
% Start of sub-graphic
p
.02381  .43795  .47732  .71824  MathSubStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.190476 0.0147151 0.214508 [
[(\(a\))] .5  0 0 2 0 0 -1 Mouter Mrotsboxa
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotsboxa
[( )] .5  .61803  0 -4 Msboxa
[( )] 1.0375 .30902  -1 0 90 Mrotsboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
p
[(\(a\))] .5  0 0 2 0 0 -1 Mouter Mrotshowa
p
.002  w
0 0 m
1 0 L
s
P
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotshowa
p
.002  w
0 0 m
0 .61803  L
s
P
P
p
[( )] .5  .61803  0 -4 Mshowa
p
.002  w
0 .61803  m
1 .61803  L
s
P
[( )] 1.0375 .30902  -1 0 90 Mrotshowa
p
.002  w
1 0 m
1 .61803  L
s
P
P
p
P
0 0 m
1 0 L
1 .61803  L
0 .61803  L
closepath
clip
newpath
p
p
3 Mabswid
.85973  .25067  Mdot
.14027  .25067  Mdot
.84128  .25067  Mdot
.15872  .25067  Mdot
.82471  .25067  Mdot
.80868  .25067  Mdot
.61117  .25067  Mdot
.79256  .25067  Mdot
.66094  .25067  Mdot
.77592  .25067  Mdot
.75834  .25067  Mdot
.73926  .25067  Mdot
.69284  .25067  Mdot
.7179  .25067  Mdot
.17529  .25067  Mdot
.19132  .25067  Mdot
.38883  .25067  Mdot
.20744  .25067  Mdot
.33906  .25067  Mdot
.22408  .25067  Mdot
.24166  .25067  Mdot
.26074  .25067  Mdot
.30716  .25067  Mdot
.2821  .25067  Mdot
P
p
p
.004  w
s
s
.05956  .61803  m
.06349  .58175  L
s
.06349  .58175  m
.08333  .4307  L
.10317  .30842  L
.12302  .21181  L
.14286  .1379  L
.15278  .10858  L
.1627  .0839  L
.17262  .06353  L
.18254  .04716  L
.19246  .03447  L
.20238  .02516  L
.20734  .02169  L
.2123  .01896  L
.21726  .01693  L
.21974  .01617  L
.22222  .01558  L
.2247  .01514  L
.22594  .01498  L
.22718  .01486  L
.22842  .01477  L
.22966  .01473  L
.2309  .01472  L
.23214  .01474  L
.23338  .0148  L
.23462  .0149  L
.23586  .01503  L
.2371  .0152  L
.23958  .01563  L
.24206  .0162  L
.24702  .0177  L
.25198  .01969  L
.2619  .02498  L
.27183  .03183  L
.28175  .04003  L
.30159  .05961  L
.34127  .10612  L
.38095  .15361  L
.40079  .17498  L
.42063  .1936  L
.44048  .20879  L
.46032  .22001  L
.47024  .22402  L
.4752  .2256  L
.48016  .2269  L
.48512  .22792  L
.4876  .22831  L
.49008  .22864  L
.49256  .2289  L
.4938  .229  L
.49504  .22908  L
Mistroke
.49628  .22914  L
.49752  .22919  L
.49876  .22921  L
.5  .22922  L
.50124  .22921  L
.50248  .22919  L
.50372  .22914  L
.50496  .22908  L
.50744  .2289  L
.50992  .22864  L
.5124  .22831  L
.51488  .22792  L
.51984  .2269  L
.5248  .2256  L
.52976  .22402  L
.53968  .22001  L
.55952  .20879  L
.57937  .1936  L
.61905  .15361  L
.65873  .10612  L
.69841  .05961  L
.71825  .04003  L
.72817  .03183  L
.7381  .02498  L
.74306  .02212  L
.74802  .01969  L
.75298  .0177  L
.75794  .0162  L
.76042  .01563  L
.76166  .0154  L
.7629  .0152  L
.76414  .01503  L
.76538  .0149  L
.76662  .0148  L
.76786  .01474  L
.7691  .01472  L
.77034  .01473  L
.77158  .01477  L
.77282  .01486  L
.77406  .01498  L
.7753  .01514  L
.77778  .01558  L
.78026  .01617  L
.78274  .01693  L
.7877  .01896  L
.79266  .02169  L
.79762  .02516  L
.80754  .03447  L
.81746  .04716  L
.82738  .06353  L
Mistroke
.8373  .0839  L
.85714  .1379  L
.87698  .21181  L
.89683  .30842  L
.91667  .4307  L
.93651  .58175  L
Mfstroke
.94009  .61803  m
.93651  .58175  L
s
s
P
P
P
MathSubEnd
P
% End of sub-graphic
% Start of sub-graphic
p
.52268  .43795  .97619  .71824  MathSubStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.190476 0.0147151 0.214508 [
[(\(b\))] .5  0 0 2 0 0 -1 Mouter Mrotsboxa
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotsboxa
[( )] .5  .61803  0 -4 Msboxa
[( )] 1.0375 .30902  -1 0 90 Mrotsboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
p
[(\(b\))] .5  0 0 2 0 0 -1 Mouter Mrotshowa
p
.002  w
0 0 m
1 0 L
s
P
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotshowa
p
.002  w
0 0 m
0 .61803  L
s
P
P
p
[( )] .5  .61803  0 -4 Mshowa
p
.002  w
0 .61803  m
1 .61803  L
s
P
[( )] 1.0375 .30902  -1 0 90 Mrotshowa
p
.002  w
1 0 m
1 .61803  L
s
P
P
p
P
0 0 m
1 0 L
1 .61803  L
0 .61803  L
closepath
clip
newpath
p
p
3 Mabswid
.86088  .25067  Mdot
.84269  .25067  Mdot
.82644  .25067  Mdot
.81073  .25067  Mdot
.79457  .25067  Mdot
.7771  .25067  Mdot
.75807  .25067  Mdot
.7375  .25067  Mdot
.71473  .25067  Mdot
.57878  .25067  Mdot
.6523  .25067  Mdot
.68786  .25067  Mdot
.13904  .25067  Mdot
.1572  .25067  Mdot
.17341  .25067  Mdot
.18871  .25067  Mdot
.20258  .25067  Mdot
.21598  .25067  Mdot
.23249  .25067  Mdot
.25173  .25067  Mdot
.3693  .25067  Mdot
.27303  .25067  Mdot
.32693  .25067  Mdot
.29725  .25067  Mdot
P
p
p
.004  w
s
s
.05956  .61803  m
.06349  .58175  L
s
.06349  .58175  m
.08333  .4307  L
.10317  .30842  L
.12302  .21181  L
.14286  .1379  L
.15278  .10858  L
.1627  .0839  L
.17262  .06353  L
.18254  .04716  L
.19246  .03447  L
.20238  .02516  L
.20734  .02169  L
.2123  .01896  L
.21726  .01693  L
.21974  .01617  L
.22222  .01558  L
.2247  .01514  L
.22594  .01498  L
.22718  .01486  L
.22842  .01477  L
.22966  .01473  L
.2309  .01472  L
.23214  .01474  L
.23338  .0148  L
.23462  .0149  L
.23586  .01503  L
.2371  .0152  L
.23958  .01563  L
.24206  .0162  L
.24702  .0177  L
.25198  .01969  L
.2619  .02498  L
.27183  .03183  L
.28175  .04003  L
.30159  .05961  L
.34127  .10612  L
.38095  .15361  L
.40079  .17498  L
.42063  .1936  L
.44048  .20879  L
.46032  .22001  L
.47024  .22402  L
.4752  .2256  L
.48016  .2269  L
.48512  .22792  L
.4876  .22831  L
.49008  .22864  L
.49256  .2289  L
.4938  .229  L
.49504  .22908  L
Mistroke
.49628  .22914  L
.49752  .22919  L
.49876  .22921  L
.5  .22922  L
.50124  .22921  L
.50248  .22919  L
.50372  .22914  L
.50496  .22908  L
.50744  .2289  L
.50992  .22864  L
.5124  .22831  L
.51488  .22792  L
.51984  .2269  L
.5248  .2256  L
.52976  .22402  L
.53968  .22001  L
.55952  .20879  L
.57937  .1936  L
.61905  .15361  L
.65873  .10612  L
.69841  .05961  L
.71825  .04003  L
.72817  .03183  L
.7381  .02498  L
.74306  .02212  L
.74802  .01969  L
.75298  .0177  L
.75794  .0162  L
.76042  .01563  L
.76166  .0154  L
.7629  .0152  L
.76414  .01503  L
.76538  .0149  L
.76662  .0148  L
.76786  .01474  L
.7691  .01472  L
.77034  .01473  L
.77158  .01477  L
.77282  .01486  L
.77406  .01498  L
.7753  .01514  L
.77778  .01558  L
.78026  .01617  L
.78274  .01693  L
.7877  .01896  L
.79266  .02169  L
.79762  .02516  L
.80754  .03447  L
.81746  .04716  L
.82738  .06353  L
Mistroke
.8373  .0839  L
.85714  .1379  L
.87698  .21181  L
.89683  .30842  L
.91667  .4307  L
.93651  .58175  L
Mfstroke
.94009  .61803  m
.93651  .58175  L
s
s
P
P
P
MathSubEnd
P
% End of sub-graphic
P
p
% Start of sub-graphic
p
.02381  .01752  .47732  .29781  MathSubStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.190476 0.0147151 0.214508 [
[(\(c\))] .5  0 0 2 0 0 -1 Mouter Mrotsboxa
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotsboxa
[( )] .5  .61803  0 -4 Msboxa
[( )] 1.0375 .30902  -1 0 90 Mrotsboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
p
[(\(c\))] .5  0 0 2 0 0 -1 Mouter Mrotshowa
p
.002  w
0 0 m
1 0 L
s
P
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotshowa
p
.002  w
0 0 m
0 .61803  L
s
P
P
p
[( )] .5  .61803  0 -4 Mshowa
p
.002  w
0 .61803  m
1 .61803  L
s
P
[( )] 1.0375 .30902  -1 0 90 Mrotshowa
p
.002  w
1 0 m
1 .61803  L
s
P
P
p
P
0 0 m
1 0 L
1 .61803  L
0 .61803  L
closepath
clip
newpath
p
p
3 Mabswid
.86028  .25067  Mdot
.8424  .25067  Mdot
.82639  .25067  Mdot
.81095  .25067  Mdot
.7955  .25067  Mdot
.77963  .25067  Mdot
.76298  .25067  Mdot
.74508  .25067  Mdot
.72531  .25067  Mdot
.70261  .25067  Mdot
.63624  .25067  Mdot
.67489  .25067  Mdot
.5  .25067  Mdot
.13972  .25067  Mdot
.1576  .25067  Mdot
.17361  .25067  Mdot
.18905  .25067  Mdot
.2045  .25067  Mdot
.22037  .25067  Mdot
.23702  .25067  Mdot
.25492  .25067  Mdot
.27469  .25067  Mdot
.29739  .25067  Mdot
.36376  .25067  Mdot
.32511  .25067  Mdot
P
p
p
.004  w
s
s
.05956  .61803  m
.06349  .58175  L
s
.06349  .58175  m
.08333  .4307  L
.10317  .30842  L
.12302  .21181  L
.14286  .1379  L
.15278  .10858  L
.1627  .0839  L
.17262  .06353  L
.18254  .04716  L
.19246  .03447  L
.20238  .02516  L
.20734  .02169  L
.2123  .01896  L
.21726  .01693  L
.21974  .01617  L
.22222  .01558  L
.2247  .01514  L
.22594  .01498  L
.22718  .01486  L
.22842  .01477  L
.22966  .01473  L
.2309  .01472  L
.23214  .01474  L
.23338  .0148  L
.23462  .0149  L
.23586  .01503  L
.2371  .0152  L
.23958  .01563  L
.24206  .0162  L
.24702  .0177  L
.25198  .01969  L
.2619  .02498  L
.27183  .03183  L
.28175  .04003  L
.30159  .05961  L
.34127  .10612  L
.38095  .15361  L
.40079  .17498  L
.42063  .1936  L
.44048  .20879  L
.46032  .22001  L
.47024  .22402  L
.4752  .2256  L
.48016  .2269  L
.48512  .22792  L
.4876  .22831  L
.49008  .22864  L
.49256  .2289  L
.4938  .229  L
.49504  .22908  L
Mistroke
.49628  .22914  L
.49752  .22919  L
.49876  .22921  L
.5  .22922  L
.50124  .22921  L
.50248  .22919  L
.50372  .22914  L
.50496  .22908  L
.50744  .2289  L
.50992  .22864  L
.5124  .22831  L
.51488  .22792  L
.51984  .2269  L
.5248  .2256  L
.52976  .22402  L
.53968  .22001  L
.55952  .20879  L
.57937  .1936  L
.61905  .15361  L
.65873  .10612  L
.69841  .05961  L
.71825  .04003  L
.72817  .03183  L
.7381  .02498  L
.74306  .02212  L
.74802  .01969  L
.75298  .0177  L
.75794  .0162  L
.76042  .01563  L
.76166  .0154  L
.7629  .0152  L
.76414  .01503  L
.76538  .0149  L
.76662  .0148  L
.76786  .01474  L
.7691  .01472  L
.77034  .01473  L
.77158  .01477  L
.77282  .01486  L
.77406  .01498  L
.7753  .01514  L
.77778  .01558  L
.78026  .01617  L
.78274  .01693  L
.7877  .01896  L
.79266  .02169  L
.79762  .02516  L
.80754  .03447  L
.81746  .04716  L
.82738  .06353  L
Mistroke
.8373  .0839  L
.85714  .1379  L
.87698  .21181  L
.89683  .30842  L
.91667  .4307  L
.93651  .58175  L
Mfstroke
.94009  .61803  m
.93651  .58175  L
s
s
P
P
P
MathSubEnd
P
% End of sub-graphic
% Start of sub-graphic
p
.52268  .01752  .97619  .29781  MathSubStart
%% Graphics
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.190476 0.0147151 0.214508 [
[(\(d\))] .5  0 0 2 0 0 -1 Mouter Mrotsboxa
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotsboxa
[( )] .5  .61803  0 -4 Msboxa
[( )] 1.0375 .30902  -1 0 90 Mrotsboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903  0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
p
[(\(d\))] .5  0 0 2 0 0 -1 Mouter Mrotshowa
p
.002  w
0 0 m
1 0 L
s
P
[( )] -0.0125 .30902  1 0 90 -1 0 Mouter Mrotshowa
p
.002  w
0 0 m
0 .61803  L
s
P
P
p
[( )] .5  .61803  0 -4 Mshowa
p
.002  w
0 .61803  m
1 .61803  L
s
P
[( )] 1.0375 .30902  -1 0 90 Mrotshowa
p
.002  w
1 0 m
1 .61803  L
s
P
P
p
P
0 0 m
1 0 L
1 .61803  L
0 .61803  L
closepath
clip
newpath
p
p
3 Mabswid
.86149  .25067  Mdot
.84387  .25067  Mdot
.82818  .25067  Mdot
.8131  .25067  Mdot
.79777  .25067  Mdot
.78347  .25067  Mdot
.76355  .25067  Mdot
.62888  .25067  Mdot
.74437  .25067  Mdot
.6706  .25067  Mdot
.7235  .25067  Mdot
.69976  .25067  Mdot
.13859  .25067  Mdot
.15622  .25067  Mdot
.17192  .25067  Mdot
.18679  .25067  Mdot
.20051  .25067  Mdot
.21322  .25067  Mdot
.22837  .25067  Mdot
.24635  .25067  Mdot
.42232  .25067  Mdot
.26625  .25067  Mdot
.34986  .25067  Mdot
.2885  .25067  Mdot
.31487  .25067  Mdot
P
p
p
.004  w
s
s
.05956  .61803  m
.06349  .58175  L
s
.06349  .58175  m
.08333  .4307  L
.10317  .30842  L
.12302  .21181  L
.14286  .1379  L
.15278  .10858  L
.1627  .0839  L
.17262  .06353  L
.18254  .04716  L
.19246  .03447  L
.20238  .02516  L
.20734  .02169  L
.2123  .01896  L
.21726  .01693  L
.21974  .01617  L
.22222  .01558  L
.2247  .01514  L
.22594  .01498  L
.22718  .01486  L
.22842  .01477  L
.22966  .01473  L
.2309  .01472  L
.23214  .01474  L
.23338  .0148  L
.23462  .0149  L
.23586  .01503  L
.2371  .0152  L
.23958  .01563  L
.24206  .0162  L
.24702  .0177  L
.25198  .01969  L
.2619  .02498  L
.27183  .03183  L
.28175  .04003  L
.30159  .05961  L
.34127  .10612  L
.38095  .15361  L
.40079  .17498  L
.42063  .1936  L
.44048  .20879  L
.46032  .22001  L
.47024  .22402  L
.4752  .2256  L
.48016  .2269  L
.48512  .22792  L
.4876  .22831  L
.49008  .22864  L
.49256  .2289  L
.4938  .229  L
.49504  .22908  L
Mistroke
.49628  .22914  L
.49752  .22919  L
.49876  .22921  L
.5  .22922  L
.50124  .22921  L
.50248  .22919  L
.50372  .22914  L
.50496  .22908  L
.50744  .2289  L
.50992  .22864  L
.5124  .22831  L
.51488  .22792  L
.51984  .2269  L
.5248  .2256  L
.52976  .22402  L
.53968  .22001  L
.55952  .20879  L
.57937  .1936  L
.61905  .15361  L
.65873  .10612  L
.69841  .05961  L
.71825  .04003  L
.72817  .03183  L
.7381  .02498  L
.74306  .02212  L
.74802  .01969  L
.75298  .0177  L
.75794  .0162  L
.76042  .01563  L
.76166  .0154  L
.7629  .0152  L
.76414  .01503  L
.76538  .0149  L
.76662  .0148  L
.76786  .01474  L
.7691  .01472  L
.77034  .01473  L
.77158  .01477  L
.77282  .01486  L
.77406  .01498  L
.7753  .01514  L
.77778  .01558  L
.78026  .01617  L
.78274  .01693  L
.7877  .01896  L
.79266  .02169  L
.79762  .02516  L
.80754  .03447  L
.81746  .04716  L
.82738  .06353  L
Mistroke
.8373  .0839  L
.85714  .1379  L
.87698  .21181  L
.89683  .30842  L
.91667  .4307  L
.93651  .58175  L
Mfstroke
.94009  .61803  m
.93651  .58175  L
s
s
P
P
P
MathSubEnd
P
% End of sub-graphic
P
P
% End of Graphics
MathPictureEnd
end
showpage

%!PS-Adobe-2.0
%%Title: Untitled-3
%%Creator: Mathematica
%%CreationDate: Wed Aug 12 15:10:05 1992
%%For: brower
%%DocumentFonts: (atend)
%%Pages: (atend) 1
%%BoundingBox: (atend)
%%DocumentPaperSizes: Letter
%%Orientation: Portrait
%%EndComments

%%BeginDocument: /usr/lib/NextStep/printPackage.ps
%!PS-Adobe-2.0
%%Title: Printing Package
%%EndComments
%Version: 2.0
%Copyright: 1988, NeXT, Inc.

/__NXdef{1 index where{pop pop pop}{def}ifelse}bind def
/__NXbdef{1 index where{pop pop pop}{bind def}ifelse}bind def
/UserObjects 10 array __NXdef
/defineuserobject{
	exch dup 1 add dup UserObjects length gt{
		array dup 0 UserObjects putinterval
		/UserObjects exch def
	}{pop}ifelse UserObjects exch 3 -1 roll put
}__NXbdef
/undefineuserobject{UserObjects exch null put}__NXbdef
/execuserobject{UserObjects exch get exec}__NXbdef
/__NXRectPath{4 2 roll moveto 1 index 0 rlineto
0 exch rlineto neg 0 rlineto closepath}__NXbdef
/__NXProcessRectArgs{
	1 index type /arraytype eq{
		exch 0 4 2 index length 1 sub{
			dup 3 add 1 exch{1 index exch get exch}for
			5 1 roll 5 index exec
		}for pop pop
	}{exec}ifelse
}__NXbdef
/rectfill{gsave newpath {__NXRectPath fill} __NXProcessRectArgs
grestore}__NXbdef
/rectclip{newpath {__NXRectPath} __NXProcessRectArgs clip newpath}__NXbdef
/rectstroke{
	gsave newpath dup type /arraytype eq{dup length 6 eq}{false}ifelse{
		{gsave __NXRectPath null concat stroke grestore}
		dup length array cvx copy dup 2 4 -1 roll put __NXProcessRectArgs
	}{{__NXRectPath stroke} __NXProcessRectArgs}ifelse grestore
}__NXbdef
/xyshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		3 index 3 index 2 mul 1 add get add exch
		3 index	3 index 2 mul get add exch moveto pop
	}for pop pop
}__NXbdef
/xshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		exch 3 index 3 index get add exch moveto pop
	}for pop pop
}__NXbdef
/yshow{
	0 1 3 index length 1 sub{
		currentpoint 4 index 3 index 1 getinterval show
		3 index 3 index get add moveto pop
	}for pop pop
}__NXbdef
/arct{arcto pop pop pop pop}__NXbdef
/setbbox{pop pop pop pop}__NXbdef
/ucache{}__NXbdef
/ucachestatus{mark 0 0 0 0 0}__NXbdef
/setucacheparams{cleartomark}__NXbdef
/uappend{systemdict begin cvx exec end}__NXbdef
/ueofill{gsave newpath uappend eofill grestore}__NXbdef
/ufill{gsave newpath uappend fill grestore}__NXbdef
/ustroke{
	gsave newpath dup length 6 eq
	{exch uappend concat}{uappend}ifelse
	stroke grestore
}__NXbdef
/__NXustrokepathMatrix dup where {pop pop}{matrix def}ifelse
/ustrokepath{
	newpath dup length 6 eq{
		exch uappend __NXustrokepathMatrix currentmatrix exch concat
		strokepath setmatrix
	}{uappend strokepath}ifelse
} __NXbdef
/upath{
	[exch {/ucache cvx}if pathbbox /setbbox cvx
	 {/moveto cvx}{/lineto cvx}{/curveto cvx}{/closepath cvx}pathforall]cvx
} __NXbdef
/setstrokeadjust{pop}__NXbdef
/currentstrokeadjust{false}__NXbdef
/selectfont{exch findfont exch
dup type /arraytype eq {makefont}{scalefont}ifelse setfont}__NXbdef
/_NXCombineArrays{
	counttomark dup 2 add index dup length 3 -1 roll {
		2 index length sub dup 4 1 roll 1 index exch 4 -1 roll putinterval exch
	}repeat pop pop pop
}__NXbdef
/setcmykcolor{
	1.0 exch sub dup dup 6 -1 roll
	sub dup 0 lt{pop 0}if 5 1 roll
	4 -1 roll sub dup 0 lt{pop 0}if 3 1 roll
	exch sub dup 0 lt{pop 0}if setrgbcolor
}__NXbdef
/currentcmykcolor{currentrgbcolor 3{1.0 exch sub 3 1 roll}repeat 0}__NXbdef
/flushgraphics{}def
/setwindowtype{pop pop}def
/currentwindowtype{pop 0}def
/setalpha{pop}def
/currentalpha{1.0}def
/hidecursor{}def
/obscurecursor{}def
/revealcursor{}def
/setcursor{4 {pop}repeat}bind def
/showcursor{}def
/NextStepEncoding where not{
/NextStepEncoding StandardEncoding 256 array copy def
0 [129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla/Egrave
/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/Ugrave/Uacute
/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply/divide/copyright
176/registered 181/brokenbar 190/logicalnot 192/onesuperior 201/twosuperior
204/threesuperior 209/plusminus/onequarter/onehalf/threequarters/agrave
/aacute/acircumflex/atilde/adieresis/aring/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth
/ntilde 236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis]
{dup type /nametype eq
 {NextStepEncoding 2 index 2 index put pop 1 add}{exch pop}ifelse
}forall pop
/NextStepEncoding NextStepEncoding readonly def
/_NXfstr 128 string dup 0 (_NX) putinterval def
/findfont{
 % Because we can never let NextStepEncoding get into
 % SharedFontDirectory, we cannot reencode a font to NextStepEncoding
 % if we are in shared mode.  So if currentshared is true,
 % we call the normal findfont and return that
 /currentshared where {pop currentshared} {false} ifelse
 {//findfont exec}
 {dup _NXfstr 3 125 getinterval cvs length 3 add _NXfstr 0 3 -1 roll
  getinterval cvn exch FontDirectory 2 index known
  {pop FontDirectory exch get}
  {//findfont exec dup /Encoding get StandardEncoding eq
   {	dup length dict exch
	{1 index /FID ne {2 index 3 1 roll put}{pop pop}ifelse}forall
	 dup /Encoding NextStepEncoding put definefont
	}{exch pop} ifelse
   }ifelse
 }ifelse
}bind def
}{pop}ifelse
/_NXProcArray 5 array __NXdef
/_NXChannels 0 __NXdef
/_NXTotalBytes 0 __NXdef
/_NXDoImageOp{
	1 index{dup}{1}ifelse /_NXChannels exch store
	_NXChannels 2 add 2 roll _NXProcArray 0 _NXChannels getinterval astore pop
	5 index 4 index mul 2 index{1 sub 8 idiv 1 add mul}{mul 1 sub 8 idiv 1
add}ifelse
	4 index mul /_NXTotalBytes exch store pop exch pop
	gsave matrix invertmatrix concat 0.5 setgray 0 0 4 2 roll rectfill grestore
	{	0 1 _NXChannels 1 sub{
			_NXProcArray exch get exec
			length _NXTotalBytes exch sub /_NXTotalBytes exch store}for
		_NXTotalBytes 0 le{exit}if
	}loop /_NXProcArray 5 array def
}__NXbdef
/colorimage{_NXDoImageOp}__NXbdef
/alphaimage{1 add _NXDoImageOp}def
%%EndDocument

gsave
-20 9972 translate
 /__NXbasematrix matrix currentmatrix def
grestore
%%EndProlog
%%BeginSetup
%%PaperSize: Letter
%%Feature: *ManualFeed False
%%EndSetup

%%Page: 1 1
%%PageBoundingBox: 0 0 612 792
%%PageFonts: (atend)
%%BeginPageSetup
%%PaperSize: Letter
/__NXsheetsavetoken save def
0 0 translate
gsave
-20 9972 translate
 /__NXbasematrix matrix currentmatrix def
grestore
gsave
[1 0 0 -1 -19 10752] concat
19 9960 translate
%%EndPageSetup
gsave
0 0 612 792 rectclip
gsave
54 36 466 756 rectclip
1 setlinewidth 0 setgray
gsave
148 41 293.887665 181 rectclip
/Mnodistort true def
100 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	1 -1 scale
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        8 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        10 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {
	0 0 moveto
	false charpath
	flattenpath
	pathbbox
	newpath
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
	Mwidth
	Mheight
	Mlp
	translate
	scale
	/Msaveaa exch def
	/Msavebb exch def
	/Msavecc exch def
	/Msavedd exch def
	/Mgmatrix
	matrix currentmatrix
	def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabswid {
	Mimatrix
	0 get
	Mgmatrix
	0 get
	div
	mul
	setlinewidth
} bind def
/Mabsdash {
	exch
	Mimatrix
	0 get
	Mgmatrix
	0 get
	div
	[
	3 1 roll
	exch
	{
	exch
	dup
	3 -1 roll
	mul
	exch
	}
	forall
	pop ]
	exch
	setdash
} bind def
/colorimage where
{ pop }
{
/colorimage {
3 1 roll
 pop pop
 5 -1 roll
 mul
 4 1 roll
{
currentfile
1 index
readhexstring
pop }
image
} bind def
} ifelse
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse

/Mleft		148.000000 def
/Mbottom	222.855438 def
/Mwidth		293.887665 def
/Mheight	181.855438 def
/Mfontsize 12 def
/Plain /Courier findfont def
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803
MathPictureStart
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.022879 0.000931 0.01389 0.307986 [
[(200)] 0.20907 0.01389 0 2 Msboxa
[(400)] 0.39527 0.01389 0 2 Msboxa
[(600)] 0.58146 0.01389 0 2 Msboxa
[(800)] 0.76765 0.01389 0 2 Msboxa
[(1000)] 0.95385 0.01389 0 2 Msboxa
[(n)] 1.025 0.01389 -1 0 Msboxa
[(0.5)] 0.01038 0.16788 1 0 Msboxa
[(1)] 0.01038 0.32188 1 0 Msboxa
[(1.5)] 0.01038 0.47587 1 0 Msboxa
[(R_n)] 0.02288 0.61803 0 -4 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0.20907 0.01389 moveto
0.20907 0.02014 lineto
stroke
grestore
[(200)] 0.20907 0.01389 0 2 Mshowa
gsave
0.002 setlinewidth
0.39527 0.01389 moveto
0.39527 0.02014 lineto
stroke
grestore
[(400)] 0.39527 0.01389 0 2 Mshowa
gsave
0.002 setlinewidth
0.58146 0.01389 moveto
0.58146 0.02014 lineto
stroke
grestore
[(600)] 0.58146 0.01389 0 2 Mshowa
gsave
0.002 setlinewidth
0.76765 0.01389 moveto
0.76765 0.02014 lineto
stroke
grestore
[(800)] 0.76765 0.01389 0 2 Mshowa
gsave
0.002 setlinewidth
0.95385 0.01389 moveto
0.95385 0.02014 lineto
stroke
grestore
[(1000)] 0.95385 0.01389 0 2 Mshowa
gsave
0.001 setlinewidth
0.06012 0.01389 moveto
0.06012 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.09736 0.01389 moveto
0.09736 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.13459 0.01389 moveto
0.13459 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.17183 0.01389 moveto
0.17183 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.24631 0.01389 moveto
0.24631 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.28355 0.01389 moveto
0.28355 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.32079 0.01389 moveto
0.32079 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.35803 0.01389 moveto
0.35803 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.4325 0.01389 moveto
0.4325 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.46974 0.01389 moveto
0.46974 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.50698 0.01389 moveto
0.50698 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.54422 0.01389 moveto
0.54422 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.6187 0.01389 moveto
0.6187 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.65594 0.01389 moveto
0.65594 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.69318 0.01389 moveto
0.69318 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.73041 0.01389 moveto
0.73041 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.80489 0.01389 moveto
0.80489 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.84213 0.01389 moveto
0.84213 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.87937 0.01389 moveto
0.87937 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.91661 0.01389 moveto
0.91661 0.01764 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.99109 0.01389 moveto
0.99109 0.01764 lineto
stroke
grestore
[(n)] 1.025 0.01389 -1 0 Mshowa
gsave
0.002 setlinewidth
0 0.01389 moveto
1 0.01389 lineto
stroke
grestore
gsave
0.002 setlinewidth
0.02288 0.16788 moveto
0.02913 0.16788 lineto
stroke
grestore
[(0.5)] 0.01038 0.16788 1 0 Mshowa
gsave
0.002 setlinewidth
0.02288 0.32188 moveto
0.02913 0.32188 lineto
stroke
grestore
[(1)] 0.01038 0.32188 1 0 Mshowa
gsave
0.002 setlinewidth
0.02288 0.47587 moveto
0.02913 0.47587 lineto
stroke
grestore
[(1.5)] 0.01038 0.47587 1 0 Mshowa
gsave
0.001 setlinewidth
0.02288 0.04469 moveto
0.02663 0.04469 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.07549 moveto
0.02663 0.07549 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.10629 moveto
0.02663 0.10629 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.13708 moveto
0.02663 0.13708 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.19868 moveto
0.02663 0.19868 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.22948 moveto
0.02663 0.22948 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.26028 moveto
0.02663 0.26028 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.29108 moveto
0.02663 0.29108 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.35267 moveto
0.02663 0.35267 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.38347 moveto
0.02663 0.38347 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.41427 moveto
0.02663 0.41427 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.44507 moveto
0.02663 0.44507 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.50667 moveto
0.02663 0.50667 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.53747 moveto
0.02663 0.53747 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.56826 moveto
0.02663 0.56826 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.59906 moveto
0.02663 0.59906 lineto
stroke
grestore
[(R_n)] 0.02288 0.61803 0 -4 Mshowa
gsave
0.002 setlinewidth
0.02288 0 moveto
0.02288 0.61803 lineto
stroke
grestore
grestore
gsave
0.008 setlinewidth
0.02381 0.50464 Mdot
0.02474 0.01472 Mdot
0.02567 0.16693 Mdot
0.0266 0.02105 Mdot
0.02753 0.03215 Mdot
0.02846 0.11708 Mdot
0.0294 0.01548 Mdot
0.03033 0.52087 Mdot
0.03126 0.01831 Mdot
0.03219 0.01552 Mdot
0.03312 0.1455 Mdot
0.03405 0.04439 Mdot
0.03498 0.01638 Mdot
0.03591 0.37465 Mdot
0.03684 0.02623 Mdot
0.03777 0.0166 Mdot
0.03871 0.19449 Mdot
0.03964 0.04711 Mdot
0.04057 0.01786 Mdot
0.0415 0.46744 Mdot
0.04243 0.02668 Mdot
0.04336 0.04335 Mdot
0.04429 0.25895 Mdot
0.04522 0.01965 Mdot
0.04615 0.5273 Mdot
0.04708 0.02665 Mdot
0.04801 0.09367 Mdot
0.04895 0.12617 Mdot
0.04988 0.02625 Mdot
0.05081 0.56974 Mdot
0.05174 0.02203 Mdot
0.05267 0.34679 Mdot
0.0536 0.04224 Mdot
0.05453 0.07461 Mdot
0.05546 0.1891 Mdot
0.05639 0.02796 Mdot
0.05732 0.5868 Mdot
0.05826 0.0244 Mdot
0.05919 0.3873 Mdot
0.06012 0.04308 Mdot
0.06105 0.10477 Mdot
0.06198 0.15146 Mdot
0.06291 0.03689 Mdot
0.06384 0.48646 Mdot
0.06477 0.02629 Mdot
0.0657 0.5516 Mdot
0.06663 0.03407 Mdot
0.06757 0.22056 Mdot
0.0685 0.08128 Mdot
0.06943 0.0719 Mdot
0.07036 0.25744 Mdot
0.07129 0.03495 Mdot
0.07222 0.56596 Mdot
0.07315 0.02935 Mdot
0.07408 0.51746 Mdot
0.07501 0.03995 Mdot
0.07594 0.23304 Mdot
0.07687 0.0858 Mdot
0.07781 0.09002 Mdot
0.07874 0.22555 Mdot
0.07967 0.04451 Mdot
0.0806 0.48613 Mdot
0.08153 0.03305 Mdot
0.08246 0.60224 Mdot
0.08339 0.036 Mdot
0.08432 0.40268 Mdot
0.08525 0.05598 Mdot
0.08618 0.19281 Mdot
0.08712 0.11409 Mdot
0.08805 0.09047 Mdot
0.08898 0.24855 Mdot
0.08991 0.05115 Mdot
0.09084 0.46164 Mdot
0.09177 0.03821 Mdot
0.0927 0.60332 Mdot
0.09363 0.03766 Mdot
0.09456 0.51739 Mdot
0.09549 0.04784 Mdot
0.09643 0.32443 Mdot
0.09736 0.07556 Mdot
0.09829 0.17823 Mdot
0.09922 0.13602 Mdot
0.10015 0.09965 Mdot
0.10108 0.2481 Mdot
0.10201 0.06264 Mdot
0.10294 0.41026 Mdot
0.10387 0.04668 Mdot
0.1048 0.5598 Mdot
0.10573 0.04171 Mdot
0.10667 0.59554 Mdot
0.1076 0.04423 Mdot
0.10853 0.49897 Mdot
0.10946 0.05476 Mdot
0.11039 0.35241 Mdot
0.11132 0.07703 Mdot
0.11225 0.22849 Mdot
0.11318 0.11767 Mdot
0.11411 0.14633 Mdot
0.11504 0.18476 Mdot
0.11598 0.09764 Mdot
0.11691 0.28319 Mdot
0.11784 0.07037 Mdot
0.11877 0.40517 Mdot
0.1197 0.05591 Mdot
0.12063 0.52148 Mdot
0.12156 0.04929 Mdot
0.12249 0.58886 Mdot
0.12342 0.04813 Mdot
0.12435 0.57994 Mdot
0.12529 0.05168 Mdot
0.12622 0.50583 Mdot
0.12715 0.06045 Mdot
0.12808 0.40252 Mdot
0.12901 0.07592 Mdot
0.12994 0.30248 Mdot
0.13087 0.10045 Mdot
0.1318 0.2216 Mdot
0.13273 0.13694 Mdot
0.13366 0.16248 Mdot
0.13459 0.18816 Mdot
0.13553 0.12164 Mdot
0.13646 0.2554 Mdot
0.13739 0.09438 Mdot
0.13832 0.33657 Mdot
0.13925 0.07667 Mdot
0.14018 0.42423 Mdot
0.14111 0.06561 Mdot
0.14204 0.50518 Mdot
0.14297 0.05933 Mdot
0.1439 0.56343 Mdot
0.14484 0.05667 Mdot
0.14577 0.58636 Mdot
0.1467 0.05709 Mdot
0.14763 0.57052 Mdot
0.14856 0.06044 Mdot
0.14949 0.52271 Mdot
0.15042 0.06696 Mdot
0.15135 0.4558 Mdot
0.15228 0.07716 Mdot
0.15321 0.38298 Mdot
0.15415 0.09185 Mdot
0.15508 0.31397 Mdot
0.15601 0.11201 Mdot
0.15694 0.25402 Mdot
0.15787 0.13873 Mdot
0.1588 0.20489 Mdot
0.15973 0.173 Mdot
0.16066 0.16615 Mdot
0.16159 0.21549 Mdot
0.16252 0.13642 Mdot
0.16345 0.2661 Mdot
0.16439 0.11405 Mdot
0.16532 0.3236 Mdot
0.16625 0.09752 Mdot
0.16718 0.38519 Mdot
0.16811 0.08559 Mdot
0.16904 0.4464 Mdot
0.16997 0.07728 Mdot
0.1709 0.50142 Mdot
0.17183 0.07188 Mdot
0.17276 0.54411 Mdot
0.1737 0.06891 Mdot
0.17463 0.56933 Mdot
0.17556 0.06808 Mdot
0.17649 0.57433 Mdot
0.17742 0.06926 Mdot
0.17835 0.5594 Mdot
0.17928 0.07244 Mdot
0.18021 0.52762 Mdot
0.18114 0.07774 Mdot
0.18207 0.48385 Mdot
0.18301 0.0854 Mdot
0.18394 0.43348 Mdot
0.18487 0.09573 Mdot
0.1858 0.38132 Mdot
0.18673 0.10915 Mdot
0.18766 0.33103 Mdot
0.18859 0.1261 Mdot
0.18952 0.28499 Mdot
0.19045 0.14704 Mdot
0.19138 0.24442 Mdot
0.19231 0.17239 Mdot
0.19325 0.20967 Mdot
0.19418 0.20243 Mdot
0.19511 0.18057 Mdot
0.19604 0.23722 Mdot
0.19697 0.15662 Mdot
0.1979 0.27648 Mdot
0.19883 0.13721 Mdot
0.19976 0.31944 Mdot
0.20069 0.12169 Mdot
0.20162 0.36479 Mdot
0.20256 0.10948 Mdot
0.20349 0.41062 Mdot
0.20442 0.10008 Mdot
0.20535 0.45453 Mdot
0.20628 0.09306 Mdot
0.20721 0.49378 Mdot
0.20814 0.08811 Mdot
0.20907 0.52564 Mdot
0.21 0.08497 Mdot
0.21093 0.5478 Mdot
0.21187 0.08347 Mdot
0.2128 0.55873 Mdot
0.21373 0.08351 Mdot
0.21466 0.55789 Mdot
0.21559 0.08505 Mdot
0.21652 0.54586 Mdot
0.21745 0.08809 Mdot
0.21838 0.52412 Mdot
0.21931 0.09269 Mdot
0.22024 0.49478 Mdot
0.22117 0.09896 Mdot
0.22211 0.46023 Mdot
0.22304 0.10702 Mdot
0.22397 0.42283 Mdot
0.2249 0.11704 Mdot
0.22583 0.38463 Mdot
0.22676 0.12921 Mdot
0.22769 0.34729 Mdot
0.22862 0.1437 Mdot
0.22955 0.31199 Mdot
0.23048 0.16067 Mdot
0.23142 0.2795 Mdot
0.23235 0.18026 Mdot
0.23328 0.25021 Mdot
0.23421 0.20253 Mdot
0.23514 0.22427 Mdot
0.23607 0.22746 Mdot
0.237 0.20162 Mdot
0.23793 0.2549 Mdot
0.23886 0.18207 Mdot
0.23979 0.28457 Mdot
0.24073 0.16538 Mdot
0.24166 0.31602 Mdot
0.24259 0.15128 Mdot
0.24352 0.34861 Mdot
0.24445 0.13949 Mdot
0.24538 0.38154 Mdot
0.24631 0.12975 Mdot
0.24724 0.41385 Mdot
0.24817 0.12184 Mdot
0.2491 0.44449 Mdot
0.25003 0.11555 Mdot
0.25097 0.47236 Mdot
0.2519 0.11072 Mdot
0.25283 0.49641 Mdot
0.25376 0.1072 Mdot
0.25469 0.51572 Mdot
0.25562 0.10488 Mdot
0.25655 0.52957 Mdot
0.25748 0.10368 Mdot
0.25841 0.53755 Mdot
0.25934 0.10354 Mdot
0.26028 0.53952 Mdot
0.26121 0.10442 Mdot
0.26214 0.53567 Mdot
0.26307 0.10629 Mdot
0.264 0.52646 Mdot
0.26493 0.10914 Mdot
0.26586 0.51256 Mdot
0.26679 0.113 Mdot
0.26772 0.49479 Mdot
0.26865 0.11786 Mdot
0.26959 0.47402 Mdot
0.27052 0.12376 Mdot
0.27145 0.45114 Mdot
0.27238 0.13073 Mdot
0.27331 0.42698 Mdot
0.27424 0.1388 Mdot
0.27517 0.40227 Mdot
0.2761 0.148 Mdot
0.27703 0.37764 Mdot
0.27796 0.15836 Mdot
0.27889 0.35359 Mdot
0.27983 0.16987 Mdot
0.28076 0.33051 Mdot
0.28169 0.18256 Mdot
0.28262 0.30868 Mdot
0.28355 0.1964 Mdot
0.28448 0.28827 Mdot
0.28541 0.21135 Mdot
0.28634 0.26938 Mdot
0.28727 0.22734 Mdot
0.2882 0.25205 Mdot
0.28914 0.24431 Mdot
0.29007 0.23627 Mdot
0.291 0.26212 Mdot
0.29193 0.222 Mdot
0.29286 0.28064 Mdot
0.29379 0.20917 Mdot
0.29472 0.29971 Mdot
0.29565 0.19769 Mdot
0.29658 0.31913 Mdot
0.29751 0.18747 Mdot
0.29845 0.3387 Mdot
0.29938 0.17844 Mdot
0.30031 0.35818 Mdot
0.30124 0.17049 Mdot
0.30217 0.37734 Mdot
0.3031 0.16355 Mdot
0.30403 0.39593 Mdot
0.30496 0.15753 Mdot
0.30589 0.4137 Mdot
0.30682 0.15236 Mdot
0.30775 0.43043 Mdot
0.30869 0.14797 Mdot
0.30962 0.4459 Mdot
0.31055 0.14432 Mdot
0.31148 0.45989 Mdot
0.31241 0.14133 Mdot
0.31334 0.47226 Mdot
0.31427 0.13897 Mdot
0.3152 0.48288 Mdot
0.31613 0.13719 Mdot
0.31706 0.49164 Mdot
0.318 0.13596 Mdot
0.31893 0.49849 Mdot
0.31986 0.13525 Mdot
0.32079 0.50342 Mdot
0.32172 0.13502 Mdot
0.32265 0.50645 Mdot
0.32358 0.13525 Mdot
0.32451 0.50764 Mdot
0.32544 0.13593 Mdot
0.32637 0.50709 Mdot
0.32731 0.13703 Mdot
0.32824 0.50489 Mdot
0.32917 0.13853 Mdot
0.3301 0.5012 Mdot
0.33103 0.14042 Mdot
0.33196 0.49615 Mdot
0.33289 0.14269 Mdot
0.33382 0.48991 Mdot
0.33475 0.14532 Mdot
0.33568 0.48263 Mdot
0.33661 0.1483 Mdot
0.33755 0.47448 Mdot
0.33848 0.15162 Mdot
0.33941 0.46562 Mdot
0.34034 0.15528 Mdot
0.34127 0.45618 Mdot
0.3422 0.15925 Mdot
0.34313 0.44632 Mdot
0.34406 0.16352 Mdot
0.34499 0.43616 Mdot
0.34592 0.16809 Mdot
0.34686 0.42581 Mdot
0.34779 0.17294 Mdot
0.34872 0.41539 Mdot
0.34965 0.17806 Mdot
0.35058 0.40499 Mdot
0.35151 0.18343 Mdot
0.35244 0.39468 Mdot
0.35337 0.18903 Mdot
0.3543 0.38453 Mdot
0.35523 0.19485 Mdot
0.35617 0.3746 Mdot
0.3571 0.20088 Mdot
0.35803 0.36494 Mdot
0.35896 0.20708 Mdot
0.35989 0.35558 Mdot
0.36082 0.21345 Mdot
0.36175 0.34655 Mdot
0.36268 0.21996 Mdot
0.36361 0.33788 Mdot
0.36454 0.22659 Mdot
0.36548 0.32957 Mdot
0.36641 0.23331 Mdot
0.36734 0.32165 Mdot
0.36827 0.24011 Mdot
0.3692 0.31411 Mdot
0.37013 0.24696 Mdot
0.37106 0.30695 Mdot
0.37199 0.25384 Mdot
0.37292 0.30017 Mdot
0.37385 0.26073 Mdot
0.37478 0.29378 Mdot
0.37572 0.26761 Mdot
0.37665 0.28775 Mdot
0.37758 0.27445 Mdot
0.37851 0.28208 Mdot
0.37944 0.28123 Mdot
0.38037 0.27677 Mdot
0.3813 0.28793 Mdot
0.38223 0.27179 Mdot
0.38316 0.29454 Mdot
0.38409 0.26714 Mdot
0.38503 0.30103 Mdot
0.38596 0.26281 Mdot
0.38689 0.30739 Mdot
0.38782 0.25878 Mdot
0.38875 0.31361 Mdot
0.38968 0.25504 Mdot
0.39061 0.31966 Mdot
0.39154 0.25158 Mdot
0.39247 0.32554 Mdot
0.3934 0.24838 Mdot
0.39434 0.33123 Mdot
0.39527 0.24544 Mdot
0.3962 0.33672 Mdot
0.39713 0.24274 Mdot
0.39806 0.34201 Mdot
0.39899 0.24027 Mdot
0.39992 0.34708 Mdot
0.40085 0.23803 Mdot
0.40178 0.35194 Mdot
0.40271 0.23599 Mdot
0.40364 0.35657 Mdot
0.40458 0.23416 Mdot
0.40551 0.36097 Mdot
0.40644 0.23251 Mdot
0.40737 0.36514 Mdot
0.4083 0.23106 Mdot
0.40923 0.36907 Mdot
0.41016 0.22977 Mdot
0.41109 0.37277 Mdot
0.41202 0.22865 Mdot
0.41295 0.37623 Mdot
0.41389 0.2277 Mdot
0.41482 0.37946 Mdot
0.41575 0.22689 Mdot
0.41668 0.38246 Mdot
0.41761 0.22623 Mdot
0.41854 0.38523 Mdot
0.41947 0.22571 Mdot
0.4204 0.38777 Mdot
0.42133 0.22533 Mdot
0.42226 0.39009 Mdot
0.4232 0.22507 Mdot
0.42413 0.3922 Mdot
0.42506 0.22493 Mdot
0.42599 0.39409 Mdot
0.42692 0.22492 Mdot
0.42785 0.39577 Mdot
0.42878 0.22501 Mdot
0.42971 0.39725 Mdot
0.43064 0.22522 Mdot
0.43157 0.39854 Mdot
0.4325 0.22553 Mdot
0.43344 0.39963 Mdot
0.43437 0.22594 Mdot
0.4353 0.40054 Mdot
0.43623 0.22645 Mdot
0.43716 0.40126 Mdot
0.43809 0.22705 Mdot
0.43902 0.40182 Mdot
0.43995 0.22775 Mdot
0.44088 0.4022 Mdot
0.44181 0.22854 Mdot
0.44275 0.40243 Mdot
0.44368 0.22941 Mdot
0.44461 0.40249 Mdot
0.44554 0.23037 Mdot
0.44647 0.40241 Mdot
0.4474 0.23142 Mdot
0.44833 0.40217 Mdot
0.44926 0.23254 Mdot
0.45019 0.4018 Mdot
0.45112 0.23375 Mdot
0.45206 0.40128 Mdot
0.45299 0.23504 Mdot
0.45392 0.40063 Mdot
0.45485 0.23641 Mdot
0.45578 0.39985 Mdot
0.45671 0.23786 Mdot
0.45764 0.39894 Mdot
0.45857 0.2394 Mdot
0.4595 0.3979 Mdot
0.46043 0.24101 Mdot
0.46136 0.39674 Mdot
0.4623 0.24271 Mdot
0.46323 0.39546 Mdot
0.46416 0.2445 Mdot
0.46509 0.39405 Mdot
0.46602 0.24638 Mdot
0.46695 0.39251 Mdot
0.46788 0.24835 Mdot
0.46881 0.39084 Mdot
0.46974 0.25042 Mdot
0.47067 0.38905 Mdot
0.47161 0.2526 Mdot
0.47254 0.38711 Mdot
0.47347 0.2549 Mdot
0.4744 0.38503 Mdot
0.47533 0.25732 Mdot
0.47626 0.38279 Mdot
0.47719 0.25987 Mdot
0.47812 0.3804 Mdot
0.47905 0.26258 Mdot
0.47998 0.37784 Mdot
0.48092 0.26543 Mdot
0.48185 0.3751 Mdot
0.48278 0.26846 Mdot
0.48371 0.37218 Mdot
0.48464 0.27165 Mdot
0.48557 0.36909 Mdot
0.4865 0.27502 Mdot
0.48743 0.36583 Mdot
0.48836 0.27854 Mdot
0.48929 0.36243 Mdot
0.49022 0.28221 Mdot
0.49116 0.35892 Mdot
0.49209 0.28598 Mdot
0.49302 0.35535 Mdot
0.49395 0.28981 Mdot
0.49488 0.35178 Mdot
0.49581 0.29365 Mdot
0.49674 0.34829 Mdot
0.49767 0.29742 Mdot
0.4986 0.34493 Mdot
0.49953 0.30106 Mdot
0.50047 0.34178 Mdot
0.5014 0.3045 Mdot
0.50233 0.3389 Mdot
0.50326 0.3077 Mdot
0.50419 0.33633 Mdot
0.50512 0.3106 Mdot
0.50605 0.33408 Mdot
0.50698 0.3132 Mdot
0.50791 0.33218 Mdot
0.50884 0.31548 Mdot
0.50978 0.33061 Mdot
0.51071 0.31745 Mdot
0.51164 0.32936 Mdot
0.51257 0.31914 Mdot
0.5135 0.32839 Mdot
0.51443 0.32056 Mdot
0.51536 0.32766 Mdot
0.51629 0.32176 Mdot
0.51722 0.32715 Mdot
0.51815 0.32276 Mdot
0.51908 0.32682 Mdot
0.52002 0.32361 Mdot
0.52095 0.32663 Mdot
0.52188 0.32432 Mdot
0.52281 0.32657 Mdot
0.52374 0.32493 Mdot
0.52467 0.32659 Mdot
0.5256 0.32546 Mdot
0.52653 0.32668 Mdot
0.52746 0.32593 Mdot
0.52839 0.32683 Mdot
0.52933 0.32634 Mdot
0.53026 0.32702 Mdot
0.53119 0.32673 Mdot
0.53212 0.32724 Mdot
0.53305 0.32708 Mdot
0.53398 0.32748 Mdot
0.53491 0.32742 Mdot
0.53584 0.32774 Mdot
0.53677 0.32774 Mdot
0.5377 0.328 Mdot
0.53864 0.32805 Mdot
0.53957 0.32828 Mdot
0.5405 0.32836 Mdot
0.54143 0.32856 Mdot
0.54236 0.32866 Mdot
0.54329 0.32884 Mdot
0.54422 0.32896 Mdot
0.54515 0.32913 Mdot
0.54608 0.32925 Mdot
0.54701 0.32941 Mdot
0.54794 0.32955 Mdot
0.54888 0.3297 Mdot
0.54981 0.32984 Mdot
0.55074 0.32999 Mdot
0.55167 0.33013 Mdot
0.5526 0.33028 Mdot
0.55353 0.33042 Mdot
0.55446 0.33056 Mdot
0.55539 0.33071 Mdot
0.55632 0.33085 Mdot
0.55725 0.33099 Mdot
0.55819 0.33114 Mdot
0.55912 0.33128 Mdot
0.56005 0.33143 Mdot
0.56098 0.33157 Mdot
0.56191 0.33172 Mdot
0.56284 0.33186 Mdot
0.56377 0.332 Mdot
0.5647 0.33215 Mdot
0.56563 0.33229 Mdot
0.56656 0.33243 Mdot
0.5675 0.33257 Mdot
0.56843 0.33272 Mdot
0.56936 0.33286 Mdot
0.57029 0.333 Mdot
0.57122 0.33314 Mdot
0.57215 0.33329 Mdot
0.57308 0.33343 Mdot
0.57401 0.33357 Mdot
0.57494 0.33371 Mdot
0.57587 0.33386 Mdot
0.5768 0.334 Mdot
0.57774 0.33414 Mdot
0.57867 0.33428 Mdot
0.5796 0.33443 Mdot
0.58053 0.33457 Mdot
0.58146 0.33471 Mdot
0.58239 0.33485 Mdot
0.58332 0.33499 Mdot
0.58425 0.33513 Mdot
0.58518 0.33527 Mdot
0.58611 0.33541 Mdot
0.58705 0.33556 Mdot
0.58798 0.3357 Mdot
0.58891 0.33584 Mdot
0.58984 0.33598 Mdot
0.59077 0.33612 Mdot
0.5917 0.33626 Mdot
0.59263 0.3364 Mdot
0.59356 0.33654 Mdot
0.59449 0.33668 Mdot
0.59542 0.33682 Mdot
0.59636 0.33696 Mdot
0.59729 0.3371 Mdot
0.59822 0.33724 Mdot
0.59915 0.33738 Mdot
0.60008 0.33752 Mdot
0.60101 0.33766 Mdot
0.60194 0.3378 Mdot
0.60287 0.33794 Mdot
0.6038 0.33808 Mdot
0.60473 0.33822 Mdot
0.60566 0.33836 Mdot
0.6066 0.3385 Mdot
0.60753 0.33864 Mdot
0.60846 0.33877 Mdot
0.60939 0.33891 Mdot
0.61032 0.33905 Mdot
0.61125 0.33919 Mdot
0.61218 0.33933 Mdot
0.61311 0.33947 Mdot
0.61404 0.33961 Mdot
0.61497 0.33974 Mdot
0.61591 0.33988 Mdot
0.61684 0.34002 Mdot
0.61777 0.34016 Mdot
0.6187 0.3403 Mdot
0.61963 0.34043 Mdot
0.62056 0.34057 Mdot
0.62149 0.34071 Mdot
0.62242 0.34085 Mdot
0.62335 0.34099 Mdot
0.62428 0.34112 Mdot
0.62522 0.34126 Mdot
0.62615 0.3414 Mdot
0.62708 0.34154 Mdot
0.62801 0.34167 Mdot
0.62894 0.34181 Mdot
0.62987 0.34195 Mdot
0.6308 0.34209 Mdot
0.63173 0.34222 Mdot
0.63266 0.34236 Mdot
0.63359 0.3425 Mdot
0.63452 0.34263 Mdot
0.63546 0.34277 Mdot
0.63639 0.3429 Mdot
0.63732 0.34304 Mdot
0.63825 0.34318 Mdot
0.63918 0.34331 Mdot
0.64011 0.34345 Mdot
0.64104 0.34359 Mdot
0.64197 0.34372 Mdot
0.6429 0.34386 Mdot
0.64383 0.34399 Mdot
0.64477 0.34413 Mdot
0.6457 0.34427 Mdot
0.64663 0.3444 Mdot
0.64756 0.34454 Mdot
0.64849 0.34467 Mdot
0.64942 0.34481 Mdot
0.65035 0.34494 Mdot
0.65128 0.34508 Mdot
0.65221 0.34521 Mdot
0.65314 0.34535 Mdot
0.65408 0.34548 Mdot
0.65501 0.34562 Mdot
0.65594 0.34575 Mdot
0.65687 0.34589 Mdot
0.6578 0.34602 Mdot
0.65873 0.34616 Mdot
0.65966 0.34629 Mdot
0.66059 0.34642 Mdot
0.66152 0.34656 Mdot
0.66245 0.34669 Mdot
0.66339 0.34683 Mdot
0.66432 0.34696 Mdot
0.66525 0.3471 Mdot
0.66618 0.34723 Mdot
0.66711 0.34736 Mdot
0.66804 0.3475 Mdot
0.66897 0.34763 Mdot
0.6699 0.34776 Mdot
0.67083 0.3479 Mdot
0.67176 0.34803 Mdot
0.67269 0.34817 Mdot
0.67363 0.3483 Mdot
0.67456 0.34843 Mdot
0.67549 0.34856 Mdot
0.67642 0.3487 Mdot
0.67735 0.34883 Mdot
0.67828 0.34896 Mdot
0.67921 0.3491 Mdot
0.68014 0.34923 Mdot
0.68107 0.34936 Mdot
0.682 0.34949 Mdot
0.68294 0.34962 Mdot
0.68387 0.34976 Mdot
0.6848 0.34989 Mdot
0.68573 0.35002 Mdot
0.68666 0.35015 Mdot
0.68759 0.35029 Mdot
0.68852 0.35042 Mdot
0.68945 0.35055 Mdot
0.69038 0.35068 Mdot
0.69131 0.35081 Mdot
0.69225 0.35095 Mdot
0.69318 0.35108 Mdot
0.69411 0.35121 Mdot
0.69504 0.35134 Mdot
0.69597 0.35147 Mdot
0.6969 0.35161 Mdot
0.69783 0.35173 Mdot
0.69876 0.35187 Mdot
0.69969 0.352 Mdot
0.70062 0.35213 Mdot
0.70155 0.35226 Mdot
0.70249 0.35239 Mdot
0.70342 0.35252 Mdot
0.70435 0.35265 Mdot
0.70528 0.35278 Mdot
0.70621 0.35291 Mdot
0.70714 0.35304 Mdot
0.70807 0.35318 Mdot
0.709 0.35331 Mdot
0.70993 0.35344 Mdot
0.71086 0.35357 Mdot
0.7118 0.3537 Mdot
0.71273 0.35383 Mdot
0.71366 0.35396 Mdot
0.71459 0.35409 Mdot
0.71552 0.35422 Mdot
0.71645 0.35435 Mdot
0.71738 0.35448 Mdot
0.71831 0.35461 Mdot
0.71924 0.35474 Mdot
0.72017 0.35487 Mdot
0.72111 0.355 Mdot
0.72204 0.35513 Mdot
0.72297 0.35525 Mdot
0.7239 0.35538 Mdot
0.72483 0.35551 Mdot
0.72576 0.35564 Mdot
0.72669 0.35577 Mdot
0.72762 0.3559 Mdot
0.72855 0.35603 Mdot
0.72948 0.35616 Mdot
0.73041 0.35629 Mdot
0.73135 0.35642 Mdot
0.73228 0.35655 Mdot
0.73321 0.35667 Mdot
0.73414 0.3568 Mdot
0.73507 0.35693 Mdot
0.736 0.35706 Mdot
0.73693 0.35719 Mdot
0.73786 0.35732 Mdot
0.73879 0.35744 Mdot
0.73972 0.35757 Mdot
0.74066 0.3577 Mdot
0.74159 0.35783 Mdot
0.74252 0.35796 Mdot
0.74345 0.35808 Mdot
0.74438 0.35821 Mdot
0.74531 0.35834 Mdot
0.74624 0.35847 Mdot
0.74717 0.35859 Mdot
0.7481 0.35872 Mdot
0.74903 0.35885 Mdot
0.74997 0.35898 Mdot
0.7509 0.3591 Mdot
0.75183 0.35923 Mdot
0.75276 0.35936 Mdot
0.75369 0.35949 Mdot
0.75462 0.35961 Mdot
0.75555 0.35974 Mdot
0.75648 0.35987 Mdot
0.75741 0.35999 Mdot
0.75834 0.36012 Mdot
0.75927 0.36025 Mdot
0.76021 0.36037 Mdot
0.76114 0.3605 Mdot
0.76207 0.36063 Mdot
0.763 0.36075 Mdot
0.76393 0.36088 Mdot
0.76486 0.36101 Mdot
0.76579 0.36113 Mdot
0.76672 0.36126 Mdot
0.76765 0.36138 Mdot
0.76858 0.36151 Mdot
0.76952 0.36164 Mdot
0.77045 0.36176 Mdot
0.77138 0.36189 Mdot
0.77231 0.36202 Mdot
0.77324 0.36214 Mdot
0.77417 0.36226 Mdot
0.7751 0.36239 Mdot
0.77603 0.36252 Mdot
0.77696 0.36264 Mdot
0.77789 0.36277 Mdot
0.77883 0.36289 Mdot
0.77976 0.36302 Mdot
0.78069 0.36315 Mdot
0.78162 0.36327 Mdot
0.78255 0.36339 Mdot
0.78348 0.36352 Mdot
0.78441 0.36364 Mdot
0.78534 0.36377 Mdot
0.78627 0.36389 Mdot
0.7872 0.36402 Mdot
0.78813 0.36414 Mdot
0.78907 0.36427 Mdot
0.79 0.36439 Mdot
0.79093 0.36452 Mdot
0.79186 0.36464 Mdot
0.79279 0.36477 Mdot
0.79372 0.36489 Mdot
0.79465 0.36501 Mdot
0.79558 0.36514 Mdot
0.79651 0.36526 Mdot
0.79744 0.36539 Mdot
0.79838 0.36551 Mdot
0.79931 0.36564 Mdot
0.80024 0.36576 Mdot
0.80117 0.36588 Mdot
0.8021 0.36601 Mdot
0.80303 0.36613 Mdot
0.80396 0.36626 Mdot
0.80489 0.36638 Mdot
0.80582 0.3665 Mdot
0.80675 0.36663 Mdot
0.80769 0.36675 Mdot
0.80862 0.36687 Mdot
0.80955 0.367 Mdot
0.81048 0.36712 Mdot
0.81141 0.36724 Mdot
0.81234 0.36736 Mdot
0.81327 0.36749 Mdot
0.8142 0.36761 Mdot
0.81513 0.36773 Mdot
0.81606 0.36786 Mdot
0.81699 0.36798 Mdot
0.81793 0.3681 Mdot
0.81886 0.36822 Mdot
0.81979 0.36835 Mdot
0.82072 0.36847 Mdot
0.82165 0.36859 Mdot
0.82258 0.36872 Mdot
0.82351 0.36884 Mdot
0.82444 0.36896 Mdot
0.82537 0.36908 Mdot
0.8263 0.3692 Mdot
0.82724 0.36933 Mdot
0.82817 0.36945 Mdot
0.8291 0.36957 Mdot
0.83003 0.36969 Mdot
0.83096 0.36982 Mdot
0.83189 0.36994 Mdot
0.83282 0.37006 Mdot
0.83375 0.37018 Mdot
0.83468 0.3703 Mdot
0.83561 0.37042 Mdot
0.83655 0.37055 Mdot
0.83748 0.37067 Mdot
0.83841 0.37079 Mdot
0.83934 0.37091 Mdot
0.84027 0.37103 Mdot
0.8412 0.37115 Mdot
0.84213 0.37127 Mdot
0.84306 0.3714 Mdot
0.84399 0.37152 Mdot
0.84492 0.37164 Mdot
0.84585 0.37176 Mdot
0.84679 0.37188 Mdot
0.84772 0.372 Mdot
0.84865 0.37212 Mdot
0.84958 0.37224 Mdot
0.85051 0.37236 Mdot
0.85144 0.37248 Mdot
0.85237 0.3726 Mdot
0.8533 0.37272 Mdot
0.85423 0.37284 Mdot
0.85516 0.37297 Mdot
0.8561 0.37309 Mdot
0.85703 0.37321 Mdot
0.85796 0.37333 Mdot
0.85889 0.37345 Mdot
0.85982 0.37357 Mdot
0.86075 0.37369 Mdot
0.86168 0.37381 Mdot
0.86261 0.37393 Mdot
0.86354 0.37405 Mdot
0.86447 0.37417 Mdot
0.86541 0.37429 Mdot
0.86634 0.37441 Mdot
0.86727 0.37453 Mdot
0.8682 0.37465 Mdot
0.86913 0.37477 Mdot
0.87006 0.37489 Mdot
0.87099 0.37501 Mdot
0.87192 0.37512 Mdot
0.87285 0.37524 Mdot
0.87378 0.37536 Mdot
0.87471 0.37548 Mdot
0.87565 0.3756 Mdot
0.87658 0.37572 Mdot
0.87751 0.37584 Mdot
0.87844 0.37596 Mdot
0.87937 0.37608 Mdot
0.8803 0.3762 Mdot
0.88123 0.37631 Mdot
0.88216 0.37644 Mdot
0.88309 0.37655 Mdot
0.88402 0.37667 Mdot
0.88496 0.37679 Mdot
0.88589 0.37691 Mdot
0.88682 0.37703 Mdot
0.88775 0.37715 Mdot
0.88868 0.37726 Mdot
0.88961 0.37738 Mdot
0.89054 0.3775 Mdot
0.89147 0.37762 Mdot
0.8924 0.37774 Mdot
0.89333 0.37785 Mdot
0.89427 0.37798 Mdot
0.8952 0.37809 Mdot
0.89613 0.37821 Mdot
0.89706 0.37833 Mdot
0.89799 0.37845 Mdot
0.89892 0.37856 Mdot
0.89985 0.37868 Mdot
0.90078 0.3788 Mdot
0.90171 0.37892 Mdot
0.90264 0.37903 Mdot
0.90357 0.37915 Mdot
0.90451 0.37927 Mdot
0.90544 0.37939 Mdot
0.90637 0.37951 Mdot
0.9073 0.37962 Mdot
0.90823 0.37974 Mdot
0.90916 0.37986 Mdot
0.91009 0.37997 Mdot
0.91102 0.38009 Mdot
0.91195 0.38021 Mdot
0.91288 0.38032 Mdot
0.91382 0.38044 Mdot
0.91475 0.38056 Mdot
0.91568 0.38068 Mdot
0.91661 0.38079 Mdot
0.91754 0.38091 Mdot
0.91847 0.38103 Mdot
0.9194 0.38114 Mdot
0.92033 0.38126 Mdot
0.92126 0.38138 Mdot
0.92219 0.3815 Mdot
0.92313 0.38161 Mdot
0.92406 0.38173 Mdot
0.92499 0.38184 Mdot
0.92592 0.38196 Mdot
0.92685 0.38208 Mdot
0.92778 0.38219 Mdot
0.92871 0.38231 Mdot
0.92964 0.38243 Mdot
0.93057 0.38254 Mdot
0.9315 0.38266 Mdot
0.93243 0.38277 Mdot
0.93337 0.38289 Mdot
0.9343 0.383 Mdot
0.93523 0.38312 Mdot
0.93616 0.38324 Mdot
0.93709 0.38335 Mdot
0.93802 0.38347 Mdot
0.93895 0.38358 Mdot
0.93988 0.3837 Mdot
0.94081 0.38381 Mdot
0.94174 0.38393 Mdot
0.94268 0.38405 Mdot
0.94361 0.38416 Mdot
0.94454 0.38428 Mdot
0.94547 0.38439 Mdot
0.9464 0.38451 Mdot
0.94733 0.38462 Mdot
0.94826 0.38474 Mdot
0.94919 0.38485 Mdot
0.95012 0.38497 Mdot
0.95105 0.38508 Mdot
0.95199 0.3852 Mdot
0.95292 0.38531 Mdot
0.95385 0.38543 Mdot
0.95478 0.38554 Mdot
0.95571 0.38566 Mdot
0.95664 0.38577 Mdot
0.95757 0.38589 Mdot
0.9585 0.386 Mdot
0.95943 0.38612 Mdot
0.96036 0.38623 Mdot
0.96129 0.38634 Mdot
0.96223 0.38646 Mdot
0.96316 0.38657 Mdot
0.96409 0.38669 Mdot
0.96502 0.3868 Mdot
0.96595 0.38692 Mdot
0.96688 0.38703 Mdot
0.96781 0.38714 Mdot
0.96874 0.38726 Mdot
0.96967 0.38737 Mdot
0.9706 0.38749 Mdot
0.97154 0.3876 Mdot
0.97247 0.38772 Mdot
0.9734 0.38782 Mdot
0.97433 0.38796 Mdot
0.97526 0.38802 Mdot
0.97619 0.38823 Mdot
grestore
0 0 moveto
1 0 lineto
1 0.61803 lineto
0 0.61803 lineto
closepath
clip
newpath
% End of Graphics
MathPictureEnd%%PSTrailer
end

%%EPS Trailer
grestore
grestore
gsave
54 36 466 756 rectclip
1 setlinewidth 0 setgray
gsave
96 230 424 26 rectclip
gsave
/Courier-Bold findfont 12 scalefont [1 0 0 -1 0 0] makefont
199
exch
defineuserobject
199 execuserobject setfont
0 setgray
96 230 1.677615e+07 26 rectclip
96 230 translate
1 1 1 setrgbcolor
0 0 423.998413 26 rectfill
199 execuserobject setfont
0 setgray
30 23 moveto (                                              \(a\)) show
grestore
grestore
grestore
gsave
54 36 466 756 rectclip
1 setlinewidth 0 setgray
gsave
145 267 293.887665 181 rectclip
/Mnodistort true def
100 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	1 -1 scale
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        8 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        10 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {
	0 0 moveto
	false charpath
	flattenpath
	pathbbox
	newpath
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
	Mwidth
	Mheight
	Mlp
	translate
	scale
	/Msaveaa exch def
	/Msavebb exch def
	/Msavecc exch def
	/Msavedd exch def
	/Mgmatrix
	matrix currentmatrix
	def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabswid {
	Mimatrix
	0 get
	Mgmatrix
	0 get
	div
	mul
	setlinewidth
} bind def
/Mabsdash {
	exch
	Mimatrix
	0 get
	Mgmatrix
	0 get
	div
	[
	3 1 roll
	exch
	{
	exch
	dup
	3 -1 roll
	mul
	exch
	}
	forall
	pop ]
	exch
	setdash
} bind def
/colorimage where
{ pop }
{
/colorimage {
3 1 roll
 pop pop
 5 -1 roll
 mul
 4 1 roll
{
currentfile
1 index
readhexstring
pop }
image
} bind def
} ifelse
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse

/Mleft		145.000000 def
/Mbottom	448.855408 def
/Mwidth		293.887665 def
/Mheight	181.855408 def
/Mfontsize 12 def
/Plain /Courier findfont def
%!
%%Creator: Mathematica
%%AspectRatio: 0.61803
MathPictureStart
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.022879 0.000931 0.32335 0.220339 [
[(200)] 0.20907 0.32335 0 2 Msboxa
[(400)] 0.39527 0.32335 0 2 Msboxa
[(600)] 0.58146 0.32335 0 2 Msboxa
[(800)] 0.76765 0.32335 0 2 Msboxa
[(1000)] 0.95385 0.32335 0 2 Msboxa
[(n)] 1.025 0.32335 -1 0 Msboxa
[(-1)] 0.01038 0.10301 1 0 Msboxa
[(-0.5)] 0.01038 0.21318 1 0 Msboxa
[(0.5)] 0.01038 0.43352 1 0 Msboxa
[(1)] 0.01038 0.54369 1 0 Msboxa
[(S_n)] 0.02288 0.61803 0 -4 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0.20907 0.32335 moveto
0.20907 0.3296 lineto
stroke
grestore
[(200)] 0.20907 0.32335 0 2 Mshowa
gsave
0.002 setlinewidth
0.39527 0.32335 moveto
0.39527 0.3296 lineto
stroke
grestore
[(400)] 0.39527 0.32335 0 2 Mshowa
gsave
0.002 setlinewidth
0.58146 0.32335 moveto
0.58146 0.3296 lineto
stroke
grestore
[(600)] 0.58146 0.32335 0 2 Mshowa
gsave
0.002 setlinewidth
0.76765 0.32335 moveto
0.76765 0.3296 lineto
stroke
grestore
[(800)] 0.76765 0.32335 0 2 Mshowa
gsave
0.002 setlinewidth
0.95385 0.32335 moveto
0.95385 0.3296 lineto
stroke
grestore
[(1000)] 0.95385 0.32335 0 2 Mshowa
gsave
0.001 setlinewidth
0.06012 0.32335 moveto
0.06012 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.09736 0.32335 moveto
0.09736 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.13459 0.32335 moveto
0.13459 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.17183 0.32335 moveto
0.17183 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.24631 0.32335 moveto
0.24631 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.28355 0.32335 moveto
0.28355 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.32079 0.32335 moveto
0.32079 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.35803 0.32335 moveto
0.35803 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.4325 0.32335 moveto
0.4325 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.46974 0.32335 moveto
0.46974 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.50698 0.32335 moveto
0.50698 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.54422 0.32335 moveto
0.54422 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.6187 0.32335 moveto
0.6187 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.65594 0.32335 moveto
0.65594 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.69318 0.32335 moveto
0.69318 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.73041 0.32335 moveto
0.73041 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.80489 0.32335 moveto
0.80489 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.84213 0.32335 moveto
0.84213 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.87937 0.32335 moveto
0.87937 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.91661 0.32335 moveto
0.91661 0.3271 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.99109 0.32335 moveto
0.99109 0.3271 lineto
stroke
grestore
[(n)] 1.025 0.32335 -1 0 Mshowa
gsave
0.002 setlinewidth
0 0.32335 moveto
1 0.32335 lineto
stroke
grestore
gsave
0.002 setlinewidth
0.02288 0.10301 moveto
0.02913 0.10301 lineto
stroke
grestore
[(-1)] 0.01038 0.10301 1 0 Mshowa
gsave
0.002 setlinewidth
0.02288 0.21318 moveto
0.02913 0.21318 lineto
stroke
grestore
[(-0.5)] 0.01038 0.21318 1 0 Mshowa
gsave
0.002 setlinewidth
0.02288 0.43352 moveto
0.02913 0.43352 lineto
stroke
grestore
[(0.5)] 0.01038 0.43352 1 0 Mshowa
gsave
0.002 setlinewidth
0.02288 0.54369 moveto
0.02913 0.54369 lineto
stroke
grestore
[(1)] 0.01038 0.54369 1 0 Mshowa
gsave
0.001 setlinewidth
0.02288 0.12505 moveto
0.02663 0.12505 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.14708 moveto
0.02663 0.14708 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.16911 moveto
0.02663 0.16911 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.19115 moveto
0.02663 0.19115 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.23521 moveto
0.02663 0.23521 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.25725 moveto
0.02663 0.25725 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.27928 moveto
0.02663 0.27928 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.30132 moveto
0.02663 0.30132 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.34538 moveto
0.02663 0.34538 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.36742 moveto
0.02663 0.36742 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.38945 moveto
0.02663 0.38945 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.41149 moveto
0.02663 0.41149 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.45555 moveto
0.02663 0.45555 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.47759 moveto
0.02663 0.47759 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.49962 moveto
0.02663 0.49962 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.52165 moveto
0.02663 0.52165 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.08098 moveto
0.02663 0.08098 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.05894 moveto
0.02663 0.05894 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.03691 moveto
0.02663 0.03691 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.01488 moveto
0.02663 0.01488 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.56572 moveto
0.02663 0.56572 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.58776 moveto
0.02663 0.58776 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.02288 0.60979 moveto
0.02663 0.60979 lineto
stroke
grestore
[(S_n)] 0.02288 0.61803 0 -4 Mshowa
gsave
0.002 setlinewidth
0.02288 0 moveto
0.02288 0.61803 lineto
stroke
grestore
grestore
gsave
0.008 setlinewidth
0.02381 0.18304 Mdot
0.02474 0.46365 Mdot
0.02567 0.05377 Mdot
0.0266 0.59184 Mdot
0.02753 0.01884 Mdot
0.02846 0.60332 Mdot
0.0294 0.04042 Mdot
0.03033 0.19451 Mdot
0.03126 0.45307 Mdot
0.03219 0.01472 Mdot
0.03312 0.04918 Mdot
0.03405 0.59259 Mdot
0.03498 0.02212 Mdot
0.03591 0.12596 Mdot
0.03684 0.52125 Mdot
0.03777 0.01798 Mdot
0.03871 0.06486 Mdot
0.03964 0.57782 Mdot
0.04057 0.02418 Mdot
0.0415 0.16853 Mdot
0.04243 0.48001 Mdot
0.04336 0.02584 Mdot
0.04429 0.5585 Mdot
0.04522 0.08677 Mdot
0.04615 0.20357 Mdot
0.04708 0.44582 Mdot
0.04801 0.03978 Mdot
0.04895 0.58544 Mdot
0.04988 0.04886 Mdot
0.05081 0.41349 Mdot
0.05174 0.23674 Mdot
0.05267 0.11937 Mdot
0.0536 0.52774 Mdot
0.05453 0.03941 Mdot
0.05546 0.57222 Mdot
0.05639 0.06839 Mdot
0.05732 0.39459 Mdot
0.05826 0.25625 Mdot
0.05919 0.13688 Mdot
0.06012 0.51125 Mdot
0.06105 0.04855 Mdot
0.06198 0.57509 Mdot
0.06291 0.06031 Mdot
0.06384 0.46557 Mdot
0.06477 0.18465 Mdot
0.0657 0.22702 Mdot
0.06663 0.42387 Mdot
0.06757 0.08094 Mdot
0.0685 0.56046 Mdot
0.06943 0.05054 Mdot
0.07036 0.55093 Mdot
0.07129 0.09333 Mdot
0.07222 0.40999 Mdot
0.07315 0.24143 Mdot
0.07408 0.20557 Mdot
0.07501 0.44516 Mdot
0.07594 0.08718 Mdot
0.07687 0.55487 Mdot
0.07781 0.0573 Mdot
0.07874 0.55597 Mdot
0.07967 0.08617 Mdot
0.0806 0.46181 Mdot
0.08153 0.18878 Mdot
0.08246 0.29426 Mdot
0.08339 0.3576 Mdot
0.08432 0.14936 Mdot
0.08525 0.49944 Mdot
0.08618 0.07948 Mdot
0.08712 0.55903 Mdot
0.08805 0.0658 Mdot
0.08898 0.54768 Mdot
0.08991 0.09597 Mdot
0.09084 0.47196 Mdot
0.09177 0.17823 Mdot
0.0927 0.34326 Mdot
0.09363 0.30856 Mdot
0.09456 0.211 Mdot
0.09549 0.43974 Mdot
0.09643 0.12207 Mdot
0.09736 0.5245 Mdot
0.09829 0.08087 Mdot
0.09922 0.55631 Mdot
0.10015 0.07506 Mdot
0.10108 0.5443 Mdot
0.10201 0.09948 Mdot
0.10294 0.49222 Mdot
0.10387 0.15693 Mdot
0.1048 0.40423 Mdot
0.10573 0.24694 Mdot
0.10667 0.29846 Mdot
0.1076 0.35294 Mdot
0.10853 0.20292 Mdot
0.10946 0.4473 Mdot
0.11039 0.13545 Mdot
0.11132 0.51193 Mdot
0.11225 0.09752 Mdot
0.11318 0.54464 Mdot
0.11411 0.08363 Mdot
0.11504 0.54996 Mdot
0.11598 0.08953 Mdot
0.11691 0.53141 Mdot
0.11784 0.11422 Mdot
0.11877 0.49052 Mdot
0.1197 0.15833 Mdot
0.12063 0.42968 Mdot
0.12156 0.22072 Mdot
0.12249 0.35561 Mdot
0.12342 0.29533 Mdot
0.12435 0.2793 Mdot
0.12529 0.37146 Mdot
0.12622 0.21169 Mdot
0.12715 0.43824 Mdot
0.12808 0.15925 Mdot
0.12901 0.48911 Mdot
0.12994 0.12342 Mdot
0.13087 0.52245 Mdot
0.1318 0.10264 Mdot
0.13273 0.53957 Mdot
0.13366 0.09476 Mdot
0.13459 0.54241 Mdot
0.13553 0.09822 Mdot
0.13646 0.53241 Mdot
0.13739 0.11231 Mdot
0.13832 0.51043 Mdot
0.13925 0.13689 Mdot
0.14018 0.47722 Mdot
0.14111 0.17169 Mdot
0.14204 0.43421 Mdot
0.14297 0.21563 Mdot
0.1439 0.38403 Mdot
0.14484 0.26628 Mdot
0.14577 0.3305 Mdot
0.1467 0.31991 Mdot
0.14763 0.27793 Mdot
0.14856 0.37229 Mdot
0.14949 0.23009 Mdot
0.15042 0.41965 Mdot
0.15135 0.18953 Mdot
0.15228 0.45942 Mdot
0.15321 0.1574 Mdot
0.15415 0.4904 Mdot
0.15508 0.13378 Mdot
0.15601 0.51246 Mdot
0.15694 0.11815 Mdot
0.15787 0.52605 Mdot
0.1588 0.10981 Mdot
0.15973 0.53181 Mdot
0.16066 0.10815 Mdot
0.16159 0.53031 Mdot
0.16252 0.11274 Mdot
0.16345 0.522 Mdot
0.16439 0.12334 Mdot
0.16532 0.50718 Mdot
0.16625 0.13982 Mdot
0.16718 0.4862 Mdot
0.16811 0.16199 Mdot
0.16904 0.45951 Mdot
0.16997 0.1895 Mdot
0.1709 0.42791 Mdot
0.17183 0.22166 Mdot
0.17276 0.39252 Mdot
0.1737 0.25739 Mdot
0.17463 0.35483 Mdot
0.17556 0.29523 Mdot
0.17649 0.31654 Mdot
0.17742 0.33352 Mdot
0.17835 0.27932 Mdot
0.17928 0.37058 Mdot
0.18021 0.24466 Mdot
0.18114 0.40494 Mdot
0.18207 0.21367 Mdot
0.18301 0.43547 Mdot
0.18394 0.18708 Mdot
0.18487 0.46144 Mdot
0.1858 0.16521 Mdot
0.18673 0.48248 Mdot
0.18766 0.14813 Mdot
0.18859 0.49853 Mdot
0.18952 0.13572 Mdot
0.19045 0.50968 Mdot
0.19138 0.12777 Mdot
0.19231 0.51611 Mdot
0.19325 0.12406 Mdot
0.19418 0.51803 Mdot
0.19511 0.12439 Mdot
0.19604 0.51564 Mdot
0.19697 0.12863 Mdot
0.1979 0.5091 Mdot
0.19883 0.13665 Mdot
0.19976 0.49858 Mdot
0.20069 0.14834 Mdot
0.20162 0.48425 Mdot
0.20256 0.16359 Mdot
0.20349 0.46635 Mdot
0.20442 0.18219 Mdot
0.20535 0.4452 Mdot
0.20628 0.20387 Mdot
0.20721 0.42125 Mdot
0.20814 0.22821 Mdot
0.20907 0.39508 Mdot
0.21 0.25463 Mdot
0.21093 0.36741 Mdot
0.21187 0.28246 Mdot
0.2128 0.33899 Mdot
0.21373 0.31092 Mdot
0.21466 0.31066 Mdot
0.21559 0.33922 Mdot
0.21652 0.28317 Mdot
0.21745 0.36658 Mdot
0.21838 0.25721 Mdot
0.21931 0.39232 Mdot
0.22024 0.23333 Mdot
0.22117 0.41589 Mdot
0.22211 0.21196 Mdot
0.22304 0.43686 Mdot
0.22397 0.19334 Mdot
0.2249 0.45498 Mdot
0.22583 0.17763 Mdot
0.22676 0.47009 Mdot
0.22769 0.16486 Mdot
0.22862 0.48214 Mdot
0.22955 0.15501 Mdot
0.23048 0.49116 Mdot
0.23142 0.14801 Mdot
0.23235 0.49721 Mdot
0.23328 0.14376 Mdot
0.23421 0.50039 Mdot
0.23514 0.14215 Mdot
0.23607 0.50082 Mdot
0.237 0.14309 Mdot
0.23793 0.4986 Mdot
0.23886 0.14647 Mdot
0.23979 0.49385 Mdot
0.24073 0.15219 Mdot
0.24166 0.4867 Mdot
0.24259 0.16016 Mdot
0.24352 0.47727 Mdot
0.24445 0.17027 Mdot
0.24538 0.46571 Mdot
0.24631 0.18237 Mdot
0.24724 0.4522 Mdot
0.24817 0.19632 Mdot
0.2491 0.43695 Mdot
0.25003 0.21193 Mdot
0.25097 0.42019 Mdot
0.2519 0.22896 Mdot
0.25283 0.40219 Mdot
0.25376 0.24715 Mdot
0.25469 0.38328 Mdot
0.25562 0.2662 Mdot
0.25655 0.36376 Mdot
0.25748 0.28579 Mdot
0.25841 0.34399 Mdot
0.25934 0.30558 Mdot
0.26028 0.3243 Mdot
0.26121 0.32526 Mdot
0.26214 0.30499 Mdot
0.26307 0.34449 Mdot
0.264 0.28636 Mdot
0.26493 0.36301 Mdot
0.26586 0.26866 Mdot
0.26679 0.38056 Mdot
0.26772 0.25209 Mdot
0.26865 0.39693 Mdot
0.26959 0.23682 Mdot
0.27052 0.41197 Mdot
0.27145 0.22296 Mdot
0.27238 0.42555 Mdot
0.27331 0.21059 Mdot
0.27424 0.43761 Mdot
0.27517 0.19976 Mdot
0.2761 0.44809 Mdot
0.27703 0.19047 Mdot
0.27796 0.45699 Mdot
0.27889 0.18272 Mdot
0.27983 0.46431 Mdot
0.28076 0.17648 Mdot
0.28169 0.47009 Mdot
0.28262 0.17171 Mdot
0.28355 0.47438 Mdot
0.28448 0.16835 Mdot
0.28541 0.47722 Mdot
0.28634 0.16635 Mdot
0.28727 0.47868 Mdot
0.2882 0.16565 Mdot
0.28914 0.47882 Mdot
0.29007 0.16618 Mdot
0.291 0.47772 Mdot
0.29193 0.16788 Mdot
0.29286 0.47544 Mdot
0.29379 0.17068 Mdot
0.29472 0.47206 Mdot
0.29565 0.17452 Mdot
0.29658 0.46765 Mdot
0.29751 0.17933 Mdot
0.29845 0.46228 Mdot
0.29938 0.18504 Mdot
0.30031 0.45604 Mdot
0.30124 0.19158 Mdot
0.30217 0.44899 Mdot
0.3031 0.19888 Mdot
0.30403 0.44122 Mdot
0.30496 0.20686 Mdot
0.30589 0.43281 Mdot
0.30682 0.21544 Mdot
0.30775 0.42384 Mdot
0.30869 0.22456 Mdot
0.30962 0.4144 Mdot
0.31055 0.23412 Mdot
0.31148 0.40457 Mdot
0.31241 0.24403 Mdot
0.31334 0.39444 Mdot
0.31427 0.25423 Mdot
0.3152 0.38409 Mdot
0.31613 0.26463 Mdot
0.31706 0.37361 Mdot
0.318 0.27513 Mdot
0.31893 0.36308 Mdot
0.31986 0.28568 Mdot
0.32079 0.35258 Mdot
0.32172 0.29618 Mdot
0.32265 0.34217 Mdot
0.32358 0.30656 Mdot
0.32451 0.33193 Mdot
0.32544 0.31677 Mdot
0.32637 0.32192 Mdot
0.32731 0.32674 Mdot
0.32824 0.31218 Mdot
0.32917 0.33642 Mdot
0.3301 0.30278 Mdot
0.33103 0.34576 Mdot
0.33196 0.29374 Mdot
0.33289 0.35473 Mdot
0.33382 0.2851 Mdot
0.33475 0.36328 Mdot
0.33568 0.2769 Mdot
0.33661 0.3714 Mdot
0.33755 0.26914 Mdot
0.33848 0.37906 Mdot
0.33941 0.26185 Mdot
0.34034 0.38625 Mdot
0.34127 0.25504 Mdot
0.3422 0.39296 Mdot
0.34313 0.24871 Mdot
0.34406 0.39918 Mdot
0.34499 0.24286 Mdot
0.34592 0.40491 Mdot
0.34686 0.23749 Mdot
0.34779 0.41015 Mdot
0.34872 0.2326 Mdot
0.34965 0.41492 Mdot
0.35058 0.22818 Mdot
0.35151 0.41922 Mdot
0.35244 0.22422 Mdot
0.35337 0.42306 Mdot
0.3543 0.2207 Mdot
0.35523 0.42645 Mdot
0.35617 0.21761 Mdot
0.3571 0.42941 Mdot
0.35803 0.21494 Mdot
0.35896 0.43196 Mdot
0.35989 0.21266 Mdot
0.36082 0.43411 Mdot
0.36175 0.21077 Mdot
0.36268 0.43588 Mdot
0.36361 0.20924 Mdot
0.36454 0.43728 Mdot
0.36548 0.20806 Mdot
0.36641 0.43834 Mdot
0.36734 0.20721 Mdot
0.36827 0.43908 Mdot
0.3692 0.20667 Mdot
0.37013 0.43951 Mdot
0.37106 0.20642 Mdot
0.37199 0.43965 Mdot
0.37292 0.20644 Mdot
0.37385 0.43953 Mdot
0.37478 0.20672 Mdot
0.37572 0.43915 Mdot
0.37665 0.20723 Mdot
0.37758 0.43854 Mdot
0.37851 0.20797 Mdot
0.37944 0.43772 Mdot
0.38037 0.20891 Mdot
0.3813 0.4367 Mdot
0.38223 0.21004 Mdot
0.38316 0.43549 Mdot
0.38409 0.21134 Mdot
0.38503 0.43412 Mdot
0.38596 0.2128 Mdot
0.38689 0.4326 Mdot
0.38782 0.2144 Mdot
0.38875 0.43094 Mdot
0.38968 0.21613 Mdot
0.39061 0.42916 Mdot
0.39154 0.21797 Mdot
0.39247 0.42727 Mdot
0.3934 0.21992 Mdot
0.39434 0.42528 Mdot
0.39527 0.22195 Mdot
0.3962 0.42321 Mdot
0.39713 0.22407 Mdot
0.39806 0.42107 Mdot
0.39899 0.22625 Mdot
0.39992 0.41886 Mdot
0.40085 0.22849 Mdot
0.40178 0.4166 Mdot
0.40271 0.23078 Mdot
0.40364 0.4143 Mdot
0.40458 0.2331 Mdot
0.40551 0.41197 Mdot
0.40644 0.23546 Mdot
0.40737 0.40961 Mdot
0.4083 0.23783 Mdot
0.40923 0.40723 Mdot
0.41016 0.24022 Mdot
0.41109 0.40485 Mdot
0.41202 0.24262 Mdot
0.41295 0.40246 Mdot
0.41389 0.24501 Mdot
0.41482 0.40007 Mdot
0.41575 0.2474 Mdot
0.41668 0.3977 Mdot
0.41761 0.24978 Mdot
0.41854 0.39534 Mdot
0.41947 0.25214 Mdot
0.4204 0.393 Mdot
0.42133 0.25448 Mdot
0.42226 0.39068 Mdot
0.4232 0.25679 Mdot
0.42413 0.3884 Mdot
0.42506 0.25907 Mdot
0.42599 0.38614 Mdot
0.42692 0.26132 Mdot
0.42785 0.38393 Mdot
0.42878 0.26353 Mdot
0.42971 0.38175 Mdot
0.43064 0.2657 Mdot
0.43157 0.37961 Mdot
0.4325 0.26783 Mdot
0.43344 0.37752 Mdot
0.43437 0.26991 Mdot
0.4353 0.37547 Mdot
0.43623 0.27195 Mdot
0.43716 0.37347 Mdot
0.43809 0.27394 Mdot
0.43902 0.37151 Mdot
0.43995 0.27588 Mdot
0.44088 0.36961 Mdot
0.44181 0.27777 Mdot
0.44275 0.36776 Mdot
0.44368 0.27961 Mdot
0.44461 0.36595 Mdot
0.44554 0.2814 Mdot
0.44647 0.3642 Mdot
0.4474 0.28314 Mdot
0.44833 0.3625 Mdot
0.44926 0.28482 Mdot
0.45019 0.36085 Mdot
0.45112 0.28646 Mdot
0.45206 0.35925 Mdot
0.45299 0.28805 Mdot
0.45392 0.3577 Mdot
0.45485 0.28958 Mdot
0.45578 0.3562 Mdot
0.45671 0.29107 Mdot
0.45764 0.35474 Mdot
0.45857 0.29251 Mdot
0.4595 0.35334 Mdot
0.46043 0.29391 Mdot
0.46136 0.35197 Mdot
0.4623 0.29526 Mdot
0.46323 0.35065 Mdot
0.46416 0.29658 Mdot
0.46509 0.34936 Mdot
0.46602 0.29785 Mdot
0.46695 0.34812 Mdot
0.46788 0.29909 Mdot
0.46881 0.3469 Mdot
0.46974 0.30029 Mdot
0.47067 0.34572 Mdot
0.47161 0.30147 Mdot
0.47254 0.34457 Mdot
0.47347 0.30262 Mdot
0.4744 0.34343 Mdot
0.47533 0.30375 Mdot
0.47626 0.34232 Mdot
0.47719 0.30486 Mdot
0.47812 0.34122 Mdot
0.47905 0.30596 Mdot
0.47998 0.34012 Mdot
0.48092 0.30706 Mdot
0.48185 0.33903 Mdot
0.48278 0.30816 Mdot
0.48371 0.33794 Mdot
0.48464 0.30925 Mdot
0.48557 0.33685 Mdot
0.4865 0.31035 Mdot
0.48743 0.33575 Mdot
0.48836 0.31146 Mdot
0.48929 0.33465 Mdot
0.49022 0.31256 Mdot
0.49116 0.33355 Mdot
0.49209 0.31366 Mdot
0.49302 0.33247 Mdot
0.49395 0.31474 Mdot
0.49488 0.33141 Mdot
0.49581 0.31579 Mdot
0.49674 0.33038 Mdot
0.49767 0.3168 Mdot
0.4986 0.3294 Mdot
0.49953 0.31775 Mdot
0.50047 0.32849 Mdot
0.5014 0.31863 Mdot
0.50233 0.32765 Mdot
0.50326 0.31943 Mdot
0.50419 0.3269 Mdot
0.50512 0.32014 Mdot
0.50605 0.32623 Mdot
0.50698 0.32076 Mdot
0.50791 0.32566 Mdot
0.50884 0.32129 Mdot
0.50978 0.32518 Mdot
0.51071 0.32173 Mdot
0.51164 0.32477 Mdot
0.51257 0.3221 Mdot
0.5135 0.32444 Mdot
0.51443 0.32239 Mdot
0.51536 0.32418 Mdot
0.51629 0.32263 Mdot
0.51722 0.32397 Mdot
0.51815 0.32281 Mdot
0.51908 0.32381 Mdot
0.52002 0.32295 Mdot
0.52095 0.32369 Mdot
0.52188 0.32306 Mdot
0.52281 0.32359 Mdot
0.52374 0.32314 Mdot
0.52467 0.32353 Mdot
0.5256 0.3232 Mdot
0.52653 0.32347 Mdot
0.52746 0.32325 Mdot
0.52839 0.32344 Mdot
0.52933 0.32328 Mdot
0.53026 0.32341 Mdot
0.53119 0.3233 Mdot
0.53212 0.32339 Mdot
0.53305 0.32332 Mdot
0.53398 0.32338 Mdot
0.53491 0.32333 Mdot
0.53584 0.32337 Mdot
0.53677 0.32333 Mdot
0.5377 0.32336 Mdot
0.53864 0.32334 Mdot
0.53957 0.32336 Mdot
0.5405 0.32334 Mdot
0.54143 0.32336 Mdot
0.54236 0.32335 Mdot
0.54329 0.32335 Mdot
0.54422 0.32335 Mdot
0.54515 0.32335 Mdot
0.54608 0.32335 Mdot
0.54701 0.32335 Mdot
0.54794 0.32335 Mdot
0.54888 0.32335 Mdot
0.54981 0.32335 Mdot
0.55074 0.32335 Mdot
0.55167 0.32335 Mdot
0.5526 0.32335 Mdot
0.55353 0.32335 Mdot
0.55446 0.32335 Mdot
0.55539 0.32335 Mdot
0.55632 0.32335 Mdot
0.55725 0.32335 Mdot
0.55819 0.32335 Mdot
0.55912 0.32335 Mdot
0.56005 0.32335 Mdot
0.56098 0.32335 Mdot
0.56191 0.32335 Mdot
0.56284 0.32335 Mdot
0.56377 0.32335 Mdot
0.5647 0.32335 Mdot
0.56563 0.32335 Mdot
0.56656 0.32335 Mdot
0.5675 0.32335 Mdot
0.56843 0.32335 Mdot
0.56936 0.32335 Mdot
0.57029 0.32335 Mdot
0.57122 0.32335 Mdot
0.57215 0.32335 Mdot
0.57308 0.32335 Mdot
0.57401 0.32335 Mdot
0.57494 0.32335 Mdot
0.57587 0.32335 Mdot
0.5768 0.32335 Mdot
0.57774 0.32335 Mdot
0.57867 0.32335 Mdot
0.5796 0.32335 Mdot
0.58053 0.32335 Mdot
0.58146 0.32335 Mdot
0.58239 0.32335 Mdot
0.58332 0.32335 Mdot
0.58425 0.32335 Mdot
0.58518 0.32335 Mdot
0.58611 0.32335 Mdot
0.58705 0.32335 Mdot
0.58798 0.32335 Mdot
0.58891 0.32335 Mdot
0.58984 0.32335 Mdot
0.59077 0.32335 Mdot
0.5917 0.32335 Mdot
0.59263 0.32335 Mdot
0.59356 0.32335 Mdot
0.59449 0.32335 Mdot
0.59542 0.32335 Mdot
0.59636 0.32335 Mdot
0.59729 0.32335 Mdot
0.59822 0.32335 Mdot
0.59915 0.32335 Mdot
0.60008 0.32335 Mdot
0.60101 0.32335 Mdot
0.60194 0.32335 Mdot
0.60287 0.32335 Mdot
0.6038 0.32335 Mdot
0.60473 0.32335 Mdot
0.60566 0.32335 Mdot
0.6066 0.32335 Mdot
0.60753 0.32335 Mdot
0.60846 0.32335 Mdot
0.60939 0.32335 Mdot
0.61032 0.32335 Mdot
0.61125 0.32335 Mdot
0.61218 0.32335 Mdot
0.61311 0.32335 Mdot
0.61404 0.32335 Mdot
0.61497 0.32335 Mdot
0.61591 0.32335 Mdot
0.61684 0.32335 Mdot
0.61777 0.32335 Mdot
0.6187 0.32335 Mdot
0.61963 0.32335 Mdot
0.62056 0.32335 Mdot
0.62149 0.32335 Mdot
0.62242 0.32335 Mdot
0.62335 0.32335 Mdot
0.62428 0.32335 Mdot
0.62522 0.32335 Mdot
0.62615 0.32335 Mdot
0.62708 0.32335 Mdot
0.62801 0.32335 Mdot
0.62894 0.32335 Mdot
0.62987 0.32335 Mdot
0.6308 0.32335 Mdot
0.63173 0.32335 Mdot
0.63266 0.32335 Mdot
0.63359 0.32335 Mdot
0.63452 0.32335 Mdot
0.63546 0.32335 Mdot
0.63639 0.32335 Mdot
0.63732 0.32335 Mdot
0.63825 0.32335 Mdot
0.63918 0.32335 Mdot
0.64011 0.32335 Mdot
0.64104 0.32335 Mdot
0.64197 0.32335 Mdot
0.6429 0.32335 Mdot
0.64383 0.32335 Mdot
0.64477 0.32335 Mdot
0.6457 0.32335 Mdot
0.64663 0.32335 Mdot
0.64756 0.32335 Mdot
0.64849 0.32335 Mdot
0.64942 0.32335 Mdot
0.65035 0.32335 Mdot
0.65128 0.32335 Mdot
0.65221 0.32335 Mdot
0.65314 0.32335 Mdot
0.65408 0.32335 Mdot
0.65501 0.32335 Mdot
0.65594 0.32335 Mdot
0.65687 0.32335 Mdot
0.6578 0.32335 Mdot
0.65873 0.32335 Mdot
0.65966 0.32335 Mdot
0.66059 0.32335 Mdot
0.66152 0.32335 Mdot
0.66245 0.32335 Mdot
0.66339 0.32335 Mdot
0.66432 0.32335 Mdot
0.66525 0.32335 Mdot
0.66618 0.32335 Mdot
0.66711 0.32335 Mdot
0.66804 0.32335 Mdot
0.66897 0.32335 Mdot
0.6699 0.32335 Mdot
0.67083 0.32335 Mdot
0.67176 0.32335 Mdot
0.67269 0.32335 Mdot
0.67363 0.32335 Mdot
0.67456 0.32335 Mdot
0.67549 0.32335 Mdot
0.67642 0.32335 Mdot
0.67735 0.32335 Mdot
0.67828 0.32335 Mdot
0.67921 0.32335 Mdot
0.68014 0.32335 Mdot
0.68107 0.32335 Mdot
0.682 0.32335 Mdot
0.68294 0.32335 Mdot
0.68387 0.32335 Mdot
0.6848 0.32335 Mdot
0.68573 0.32335 Mdot
0.68666 0.32335 Mdot
0.68759 0.32335 Mdot
0.68852 0.32335 Mdot
0.68945 0.32335 Mdot
0.69038 0.32335 Mdot
0.69131 0.32335 Mdot
0.69225 0.32335 Mdot
0.69318 0.32335 Mdot
0.69411 0.32335 Mdot
0.69504 0.32335 Mdot
0.69597 0.32335 Mdot
0.6969 0.32335 Mdot
0.69783 0.32335 Mdot
0.69876 0.32335 Mdot
0.69969 0.32335 Mdot
0.70062 0.32335 Mdot
0.70155 0.32335 Mdot
0.70249 0.32335 Mdot
0.70342 0.32335 Mdot
0.70435 0.32335 Mdot
0.70528 0.32335 Mdot
0.70621 0.32335 Mdot
0.70714 0.32335 Mdot
0.70807 0.32335 Mdot
0.709 0.32335 Mdot
0.70993 0.32335 Mdot
0.71086 0.32335 Mdot
0.7118 0.32335 Mdot
0.71273 0.32335 Mdot
0.71366 0.32335 Mdot
0.71459 0.32335 Mdot
0.71552 0.32335 Mdot
0.71645 0.32335 Mdot
0.71738 0.32335 Mdot
0.71831 0.32335 Mdot
0.71924 0.32335 Mdot
0.72017 0.32335 Mdot
0.72111 0.32335 Mdot
0.72204 0.32335 Mdot
0.72297 0.32335 Mdot
0.7239 0.32335 Mdot
0.72483 0.32335 Mdot
0.72576 0.32335 Mdot
0.72669 0.32335 Mdot
0.72762 0.32335 Mdot
0.72855 0.32335 Mdot
0.72948 0.32335 Mdot
0.73041 0.32335 Mdot
0.73135 0.32335 Mdot
0.73228 0.32335 Mdot
0.73321 0.32335 Mdot
0.73414 0.32335 Mdot
0.73507 0.32335 Mdot
0.736 0.32335 Mdot
0.73693 0.32335 Mdot
0.73786 0.32335 Mdot
0.73879 0.32335 Mdot
0.73972 0.32335 Mdot
0.74066 0.32335 Mdot
0.74159 0.32335 Mdot
0.74252 0.32335 Mdot
0.74345 0.32335 Mdot
0.74438 0.32335 Mdot
0.74531 0.32335 Mdot
0.74624 0.32335 Mdot
0.74717 0.32335 Mdot
0.7481 0.32335 Mdot
0.74903 0.32335 Mdot
0.74997 0.32335 Mdot
0.7509 0.32335 Mdot
0.75183 0.32335 Mdot
0.75276 0.32335 Mdot
0.75369 0.32335 Mdot
0.75462 0.32335 Mdot
0.75555 0.32335 Mdot
0.75648 0.32335 Mdot
0.75741 0.32335 Mdot
0.75834 0.32335 Mdot
0.75927 0.32335 Mdot
0.76021 0.32335 Mdot
0.76114 0.32335 Mdot
0.76207 0.32335 Mdot
0.763 0.32335 Mdot
0.76393 0.32335 Mdot
0.76486 0.32335 Mdot
0.76579 0.32335 Mdot
0.76672 0.32335 Mdot
0.76765 0.32335 Mdot
0.76858 0.32335 Mdot
0.76952 0.32335 Mdot
0.77045 0.32335 Mdot
0.77138 0.32335 Mdot
0.77231 0.32335 Mdot
0.77324 0.32335 Mdot
0.77417 0.32335 Mdot
0.7751 0.32335 Mdot
0.77603 0.32335 Mdot
0.77696 0.32335 Mdot
0.77789 0.32335 Mdot
0.77883 0.32335 Mdot
0.77976 0.32335 Mdot
0.78069 0.32335 Mdot
0.78162 0.32335 Mdot
0.78255 0.32335 Mdot
0.78348 0.32335 Mdot
0.78441 0.32335 Mdot
0.78534 0.32335 Mdot
0.78627 0.32335 Mdot
0.7872 0.32335 Mdot
0.78813 0.32335 Mdot
0.78907 0.32335 Mdot
0.79 0.32335 Mdot
0.79093 0.32335 Mdot
0.79186 0.32335 Mdot
0.79279 0.32335 Mdot
0.79372 0.32335 Mdot
0.79465 0.32335 Mdot
0.79558 0.32335 Mdot
0.79651 0.32335 Mdot
0.79744 0.32335 Mdot
0.79838 0.32335 Mdot
0.79931 0.32335 Mdot
0.80024 0.32335 Mdot
0.80117 0.32335 Mdot
0.8021 0.32335 Mdot
0.80303 0.32335 Mdot
0.80396 0.32335 Mdot
0.80489 0.32335 Mdot
0.80582 0.32335 Mdot
0.80675 0.32335 Mdot
0.80769 0.32335 Mdot
0.80862 0.32335 Mdot
0.80955 0.32335 Mdot
0.81048 0.32335 Mdot
0.81141 0.32335 Mdot
0.81234 0.32335 Mdot
0.81327 0.32335 Mdot
0.8142 0.32335 Mdot
0.81513 0.32335 Mdot
0.81606 0.32335 Mdot
0.81699 0.32335 Mdot
0.81793 0.32335 Mdot
0.81886 0.32335 Mdot
0.81979 0.32335 Mdot
0.82072 0.32335 Mdot
0.82165 0.32335 Mdot
0.82258 0.32335 Mdot
0.82351 0.32335 Mdot
0.82444 0.32335 Mdot
0.82537 0.32335 Mdot
0.8263 0.32335 Mdot
0.82724 0.32335 Mdot
0.82817 0.32335 Mdot
0.8291 0.32335 Mdot
0.83003 0.32335 Mdot
0.83096 0.32335 Mdot
0.83189 0.32335 Mdot
0.83282 0.32335 Mdot
0.83375 0.32335 Mdot
0.83468 0.32335 Mdot
0.83561 0.32335 Mdot
0.83655 0.32335 Mdot
0.83748 0.32335 Mdot
0.83841 0.32335 Mdot
0.83934 0.32335 Mdot
0.84027 0.32335 Mdot
0.8412 0.32335 Mdot
0.84213 0.32335 Mdot
0.84306 0.32335 Mdot
0.84399 0.32335 Mdot
0.84492 0.32335 Mdot
0.84585 0.32335 Mdot
0.84679 0.32335 Mdot
0.84772 0.32335 Mdot
0.84865 0.32335 Mdot
0.84958 0.32335 Mdot
0.85051 0.32335 Mdot
0.85144 0.32335 Mdot
0.85237 0.32335 Mdot
0.8533 0.32335 Mdot
0.85423 0.32335 Mdot
0.85516 0.32335 Mdot
0.8561 0.32335 Mdot
0.85703 0.32335 Mdot
0.85796 0.32335 Mdot
0.85889 0.32335 Mdot
0.85982 0.32335 Mdot
0.86075 0.32335 Mdot
0.86168 0.32335 Mdot
0.86261 0.32335 Mdot
0.86354 0.32335 Mdot
0.86447 0.32335 Mdot
0.86541 0.32335 Mdot
0.86634 0.32335 Mdot
0.86727 0.32335 Mdot
0.8682 0.32335 Mdot
0.86913 0.32335 Mdot
0.87006 0.32335 Mdot
0.87099 0.32335 Mdot
0.87192 0.32335 Mdot
0.87285 0.32335 Mdot
0.87378 0.32335 Mdot
0.87471 0.32335 Mdot
0.87565 0.32335 Mdot
0.87658 0.32335 Mdot
0.87751 0.32335 Mdot
0.87844 0.32335 Mdot
0.87937 0.32335 Mdot
0.8803 0.32335 Mdot
0.88123 0.32335 Mdot
0.88216 0.32335 Mdot
0.88309 0.32335 Mdot
0.88402 0.32335 Mdot
0.88496 0.32335 Mdot
0.88589 0.32335 Mdot
0.88682 0.32335 Mdot
0.88775 0.32335 Mdot
0.88868 0.32335 Mdot
0.88961 0.32335 Mdot
0.89054 0.32335 Mdot
0.89147 0.32335 Mdot
0.8924 0.32335 Mdot
0.89333 0.32335 Mdot
0.89427 0.32335 Mdot
0.8952 0.32335 Mdot
0.89613 0.32335 Mdot
0.89706 0.32335 Mdot
0.89799 0.32335 Mdot
0.89892 0.32335 Mdot
0.89985 0.32335 Mdot
0.90078 0.32335 Mdot
0.90171 0.32335 Mdot
0.90264 0.32335 Mdot
0.90357 0.32335 Mdot
0.90451 0.32335 Mdot
0.90544 0.32335 Mdot
0.90637 0.32335 Mdot
0.9073 0.32335 Mdot
0.90823 0.32335 Mdot
0.90916 0.32335 Mdot
0.91009 0.32335 Mdot
0.91102 0.32335 Mdot
0.91195 0.32335 Mdot
0.91288 0.32335 Mdot
0.91382 0.32335 Mdot
0.91475 0.32335 Mdot
0.91568 0.32335 Mdot
0.91661 0.32335 Mdot
0.91754 0.32335 Mdot
0.91847 0.32335 Mdot
0.9194 0.32335 Mdot
0.92033 0.32335 Mdot
0.92126 0.32335 Mdot
0.92219 0.32335 Mdot
0.92313 0.32335 Mdot
0.92406 0.32335 Mdot
0.92499 0.32335 Mdot
0.92592 0.32335 Mdot
0.92685 0.32335 Mdot
0.92778 0.32335 Mdot
0.92871 0.32335 Mdot
0.92964 0.32335 Mdot
0.93057 0.32335 Mdot
0.9315 0.32335 Mdot
0.93243 0.32335 Mdot
0.93337 0.32335 Mdot
0.9343 0.32335 Mdot
0.93523 0.32335 Mdot
0.93616 0.32335 Mdot
0.93709 0.32335 Mdot
0.93802 0.32335 Mdot
0.93895 0.32335 Mdot
0.93988 0.32335 Mdot
0.94081 0.32335 Mdot
0.94174 0.32335 Mdot
0.94268 0.32335 Mdot
0.94361 0.32335 Mdot
0.94454 0.32335 Mdot
0.94547 0.32335 Mdot
0.9464 0.32335 Mdot
0.94733 0.32335 Mdot
0.94826 0.32335 Mdot
0.94919 0.32335 Mdot
0.95012 0.32335 Mdot
0.95105 0.32335 Mdot
0.95199 0.32335 Mdot
0.95292 0.32335 Mdot
0.95385 0.32335 Mdot
0.95478 0.32335 Mdot
0.95571 0.32335 Mdot
0.95664 0.32335 Mdot
0.95757 0.32335 Mdot
0.9585 0.32335 Mdot
0.95943 0.32335 Mdot
0.96036 0.32335 Mdot
0.96129 0.32335 Mdot
0.96223 0.32335 Mdot
0.96316 0.32335 Mdot
0.96409 0.32335 Mdot
0.96502 0.32335 Mdot
0.96595 0.32335 Mdot
0.96688 0.32335 Mdot
0.96781 0.32335 Mdot
0.96874 0.32335 Mdot
0.96967 0.32335 Mdot
0.9706 0.32335 Mdot
0.97154 0.32335 Mdot
0.97247 0.32335 Mdot
0.9734 0.32335 Mdot
0.97433 0.32335 Mdot
0.97526 0.32335 Mdot
0.97619 0.32335 Mdot
grestore
0 0 moveto
1 0 lineto
1 0.61803 lineto
0 0.61803 lineto
closepath
clip
newpath
% End of Graphics
MathPictureEnd%%PSTrailer
end

%%EPS Trailer
grestore
grestore
gsave
54 36 466 756 rectclip
1 setlinewidth 0 setgray
gsave
96 456 424 26 rectclip
gsave
199 execuserobject setfont
0 setgray
96 456 1.677615e+07 26 rectclip
96 456 translate
1 1 1 setrgbcolor
0 0 424 26 rectfill
199 execuserobject setfont
0 setgray
2 23 moveto (                                                  \(b\)) show
grestore
grestore
grestore
gsave
54 36 466 756 rectclip
1 setlinewidth 0 setgray
gsave
164 490 278.965057 197 rectclip
/Mnodistort true def
100 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	1 -1 scale
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        8 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        10 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {
	0 0 moveto
	false charpath
	flattenpath
	pathbbox
	newpath
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
	Mwidth
	Mheight
	Mlp
	translate
	scale
	/Msaveaa exch def
	/Msavebb exch def
	/Msavecc exch def
	/Msavedd exch def
	/Mgmatrix
	matrix currentmatrix
	def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabswid {
	Mimatrix
	0 get
	Mgmatrix
	0 get
	div
	mul
	setlinewidth
} bind def
/Mabsdash {
	exch
	Mimatrix
	0 get
	Mgmatrix
	0 get
	div
	[
	3 1 roll
	exch
	{
	exch
	dup
	3 -1 roll
	mul
	exch
	}
	forall
	pop ]
	exch
	setdash
} bind def
/colorimage where
{ pop }
{
/colorimage {
3 1 roll
 pop pop
 5 -1 roll
 mul
 4 1 roll
{
currentfile
1 index
readhexstring
pop }
image
} bind def
} ifelse
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse

/Mleft		164.000000 def
/Mbottom	687.422058 def
/Mwidth		278.965057 def
/Mheight	197.422058 def
/Mfontsize 12 def
/Plain /Courier findfont def
%!
%%Creator: Mathematica
%%AspectRatio: 0.70711
MathPictureStart
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.5 0.168359 0.353553 0.168359 [
[(-2)] 0.16328 0.35355 0 2 Msboxa
[(-1)] 0.33164 0.35355 0 2 Msboxa
[(1)] 0.66836 0.35355 0 2 Msboxa
[(2)] 0.83672 0.35355 0 2 Msboxa
[(C-D)] 1.025 0.35355 -1 0 Msboxa
[(-2)] 0.4875 0.01684 1 0 Msboxa
[(-1)] 0.4875 0.18519 1 0 Msboxa
[(1)] 0.4875 0.52191 1 0 Msboxa
[(2)] 0.4875 0.69027 1 0 Msboxa
[(A-B)] 0.5 0.70711 0 -4 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 0.70811 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
%%Object: Graphics
[ ] 0 setdash
0 setgray
gsave
gsave
0.002 setlinewidth
0.16328 0.35355 moveto
0.16328 0.3598 lineto
stroke
grestore
[(-2)] 0.16328 0.35355 0 2 Mshowa
gsave
0.002 setlinewidth
0.33164 0.35355 moveto
0.33164 0.3598 lineto
stroke
grestore
[(-1)] 0.33164 0.35355 0 2 Mshowa
gsave
0.002 setlinewidth
0.66836 0.35355 moveto
0.66836 0.3598 lineto
stroke
grestore
[(1)] 0.66836 0.35355 0 2 Mshowa
gsave
0.002 setlinewidth
0.83672 0.35355 moveto
0.83672 0.3598 lineto
stroke
grestore
[(2)] 0.83672 0.35355 0 2 Mshowa
gsave
0.001 setlinewidth
0.0286 0.35355 moveto
0.0286 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.06227 0.35355 moveto
0.06227 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.09594 0.35355 moveto
0.09594 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.12961 0.35355 moveto
0.12961 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.19695 0.35355 moveto
0.19695 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.23063 0.35355 moveto
0.23063 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.2643 0.35355 moveto
0.2643 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.29797 0.35355 moveto
0.29797 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.36531 0.35355 moveto
0.36531 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.39898 0.35355 moveto
0.39898 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.43266 0.35355 moveto
0.43266 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.46633 0.35355 moveto
0.46633 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.53367 0.35355 moveto
0.53367 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.56734 0.35355 moveto
0.56734 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.60102 0.35355 moveto
0.60102 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.63469 0.35355 moveto
0.63469 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.70203 0.35355 moveto
0.70203 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.7357 0.35355 moveto
0.7357 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.76937 0.35355 moveto
0.76937 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.80305 0.35355 moveto
0.80305 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.87039 0.35355 moveto
0.87039 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.90406 0.35355 moveto
0.90406 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.93773 0.35355 moveto
0.93773 0.3573 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.9714 0.35355 moveto
0.9714 0.3573 lineto
stroke
grestore
[(C-D)] 1.025 0.35355 -1 0 Mshowa
gsave
0.002 setlinewidth
0 0.35355 moveto
1 0.35355 lineto
stroke
grestore
gsave
0.002 setlinewidth
0.5 0.01684 moveto
0.50625 0.01684 lineto
stroke
grestore
[(-2)] 0.4875 0.01684 1 0 Mshowa
gsave
0.002 setlinewidth
0.5 0.18519 moveto
0.50625 0.18519 lineto
stroke
grestore
[(-1)] 0.4875 0.18519 1 0 Mshowa
gsave
0.002 setlinewidth
0.5 0.52191 moveto
0.50625 0.52191 lineto
stroke
grestore
[(1)] 0.4875 0.52191 1 0 Mshowa
gsave
0.002 setlinewidth
0.5 0.69027 moveto
0.50625 0.69027 lineto
stroke
grestore
[(2)] 0.4875 0.69027 1 0 Mshowa
gsave
0.001 setlinewidth
0.5 0.05051 moveto
0.50375 0.05051 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.08418 moveto
0.50375 0.08418 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.11785 moveto
0.50375 0.11785 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.15152 moveto
0.50375 0.15152 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.21887 moveto
0.50375 0.21887 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.25254 moveto
0.50375 0.25254 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.28621 moveto
0.50375 0.28621 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.31988 moveto
0.50375 0.31988 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.38723 moveto
0.50375 0.38723 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.4209 moveto
0.50375 0.4209 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.45457 moveto
0.50375 0.45457 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.48824 moveto
0.50375 0.48824 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.55558 moveto
0.50375 0.55558 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.58926 moveto
0.50375 0.58926 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.62293 moveto
0.50375 0.62293 lineto
stroke
grestore
gsave
0.001 setlinewidth
0.5 0.6566 moveto
0.50375 0.6566 lineto
stroke
grestore
[(A-B)] 0.5 0.70711 0 -4 Mshowa
gsave
0.002 setlinewidth
0.5 0 moveto
0.5 0.70711 lineto
stroke
grestore
grestore
0 0 moveto
1 0 lineto
1 0.70711 lineto
0 0.70711 lineto
closepath
clip
newpath
gsave
gsave
gsave
gsave
0.004 setlinewidth
0.5 0.69027 moveto
0.50275 0.69026 lineto
0.50551 0.69023 lineto
0.50826 0.69017 lineto
0.51102 0.69009 lineto
0.51377 0.68999 lineto
0.51653 0.68987 lineto
0.52203 0.68955 lineto
0.52754 0.68914 lineto
0.53304 0.68865 lineto
0.54404 0.68739 lineto
0.55503 0.68577 lineto
0.56601 0.6838 lineto
0.5879 0.6788 lineto
0.6097 0.6724 lineto
0.63138 0.66464 lineto
0.6743 0.64516 lineto
0.75771 0.59165 lineto
0.83672 0.52191 lineto
0.90996 0.4407 lineto
0.94403 0.3975 lineto
0.96036 0.37558 lineto
0.96834 0.36457 lineto
0.97228 0.35906 lineto
0.97424 0.35631 lineto
0.97619 0.35355 lineto
0.97228 0.34804 lineto
0.96834 0.34254 lineto
0.96036 0.33153 lineto
0.94403 0.3096 lineto
0.90996 0.2664 lineto
0.83672 0.18519 lineto
0.75771 0.11546 lineto
0.6743 0.06195 lineto
0.63138 0.04247 lineto
0.6097 0.03471 lineto
0.5879 0.02831 lineto
0.56601 0.02331 lineto
0.55503 0.02133 lineto
0.54404 0.01972 lineto
0.53304 0.01846 lineto
0.52754 0.01796 lineto
0.52203 0.01756 lineto
0.51653 0.01724 lineto
0.51377 0.01712 lineto
0.51102 0.01702 lineto
0.50826 0.01694 lineto
0.50551 0.01688 lineto
0.50275 0.01685 lineto
0.5 0.01684 lineto
Mistroke
0.49725 0.01685 lineto
0.49449 0.01688 lineto
0.49174 0.01694 lineto
0.48898 0.01702 lineto
0.48347 0.01724 lineto
0.47797 0.01756 lineto
0.47246 0.01796 lineto
0.46696 0.01846 lineto
0.45596 0.01972 lineto
0.44497 0.02133 lineto
0.43399 0.02331 lineto
0.4121 0.02831 lineto
0.3903 0.03471 lineto
0.36862 0.04247 lineto
0.3257 0.06195 lineto
0.24229 0.11546 lineto
0.16328 0.18519 lineto
0.09004 0.2664 lineto
0.05597 0.3096 lineto
0.03964 0.33153 lineto
0.03166 0.34254 lineto
0.02772 0.34804 lineto
0.02576 0.3508 lineto
0.02381 0.35355 lineto
0.02772 0.35906 lineto
0.03166 0.36457 lineto
0.03964 0.37558 lineto
0.05597 0.3975 lineto
0.09004 0.4407 lineto
0.16328 0.52191 lineto
0.24229 0.59165 lineto
0.28353 0.62069 lineto
0.3257 0.64516 lineto
0.36862 0.66464 lineto
0.3903 0.6724 lineto
0.4121 0.6788 lineto
0.43399 0.6838 lineto
0.44497 0.68577 lineto
0.45596 0.68739 lineto
0.46696 0.68865 lineto
0.47246 0.68914 lineto
0.47797 0.68955 lineto
0.48347 0.68987 lineto
0.48623 0.68999 lineto
0.48898 0.69009 lineto
0.49174 0.69017 lineto
0.49449 0.69023 lineto
0.49725 0.69026 lineto
0.5 0.69027 lineto
Mfstroke
grestore
grestore
grestore
gsave
gsave
0.008 setlinewidth
0.33919 0.08551 Mdot
0.13784 0.27208 Mdot
0.05779 0.37374 Mdot
0.22607 0.51946 Mdot
0.76625 0.49015 Mdot
0.30556 0.29039 Mdot
0.24238 0.45913 Mdot
0.84329 0.44616 Mdot
0.32194 0.26465 Mdot
0.23333 0.48443 Mdot
0.79251 0.47858 Mdot
0.88372 0.22922 Mdot
0.45207 0.07796 Mdot
0.13641 0.34412 Mdot
0.1557 0.52941 Mdot
0.47732 0.59202 Mdot
0.84258 0.44564 Mdot
0.89604 0.27822 Mdot
0.67748 0.04709 Mdot
0.31137 0.16028 Mdot
0.12207 0.34945 Mdot
0.1485 0.50774 Mdot
0.37649 0.62291 Mdot
0.70622 0.54598 Mdot
0.87801 0.38906 Mdot
0.866 0.24203 Mdot
0.68538 0.06175 Mdot
0.39477 0.08963 Mdot
0.18455 0.26053 Mdot
0.11939 0.38944 Mdot
0.177 0.52374 Mdot
0.3554 0.63296 Mdot
0.60376 0.60854 Mdot
0.79419 0.48571 Mdot
0.87165 0.36861 Mdot
0.85667 0.25639 Mdot
0.75586 0.12562 Mdot
0.57631 0.04449 Mdot
0.37534 0.09409 Mdot
0.22489 0.20993 Mdot
0.14887 0.31396 Mdot
0.13687 0.40407 Mdot
0.18002 0.49926 Mdot
0.27743 0.59317 Mdot
0.42023 0.64653 Mdot
0.57813 0.62853 Mdot
0.71251 0.55632 Mdot
0.80216 0.47022 Mdot
0.84695 0.39168 Mdot
0.85406 0.31923 Mdot
0.82821 0.24467 Mdot
0.77067 0.16658 Mdot
0.6835 0.09724 Mdot
0.57457 0.05829 Mdot
0.45867 0.06381 Mdot
0.3524 0.10769 Mdot
0.26739 0.17079 Mdot
0.20784 0.23641 Mdot
0.17269 0.2973 Mdot
0.15905 0.35359 Mdot
0.16442 0.40829 Mdot
0.1874 0.46376 Mdot
0.22727 0.51959 Mdot
0.28298 0.57171 Mdot
0.35216 0.6132 Mdot
0.43048 0.63684 Mdot
0.512 0.63855 Mdot
0.59038 0.61932 Mdot
0.66034 0.5844 Mdot
0.7185 0.54063 Mdot
0.76347 0.49383 Mdot
0.79532 0.44757 Mdot
0.81486 0.40315 Mdot
0.82308 0.3604 Mdot
0.82082 0.31846 Mdot
0.80866 0.27655 Mdot
0.787 0.23449 Mdot
0.75619 0.19304 Mdot
0.71682 0.15405 Mdot
0.66988 0.12022 Mdot
0.6169 0.0946 Mdot
0.56 0.07978 Mdot
0.50165 0.07714 Mdot
0.44443 0.08649 Mdot
0.39066 0.10618 Mdot
0.34219 0.13365 Mdot
0.30029 0.1661 Mdot
0.26561 0.20111 Mdot
0.23839 0.23689 Mdot
0.21852 0.27242 Mdot
0.20573 0.30725 Mdot
0.1997 0.34138 Mdot
0.20014 0.37501 Mdot
0.20679 0.40834 Mdot
0.21943 0.44143 Mdot
0.23786 0.47405 Mdot
0.26182 0.50564 Mdot
0.29096 0.53531 Mdot
0.32476 0.56187 Mdot
0.36249 0.58402 Mdot
0.40325 0.6005 Mdot
0.44595 0.61036 Mdot
0.48938 0.6131 Mdot
0.53232 0.60874 Mdot
0.57365 0.59785 Mdot
0.61236 0.58137 Mdot
0.64765 0.56048 Mdot
0.67896 0.53641 Mdot
0.70592 0.51027 Mdot
0.72835 0.48297 Mdot
0.7462 0.4552 Mdot
0.75952 0.42739 Mdot
0.76845 0.39979 Mdot
0.77312 0.37253 Mdot
0.7737 0.34562 Mdot
0.77035 0.31908 Mdot
0.76325 0.29296 Mdot
0.75255 0.26735 Mdot
0.73844 0.24246 Mdot
0.72112 0.21858 Mdot
0.70084 0.19609 Mdot
0.6779 0.17546 Mdot
0.65262 0.15718 Mdot
0.62542 0.14175 Mdot
0.59674 0.12961 Mdot
0.56707 0.12107 Mdot
0.53691 0.11635 Mdot
0.50678 0.11547 Mdot
0.47716 0.11832 Mdot
0.44851 0.12465 Mdot
0.4212 0.13408 Mdot
0.39558 0.14618 Mdot
0.37191 0.16047 Mdot
0.35039 0.1765 Mdot
0.33114 0.19382 Mdot
0.31425 0.21205 Mdot
0.29975 0.23086 Mdot
0.28763 0.24998 Mdot
0.27786 0.26921 Mdot
0.27037 0.28839 Mdot
0.26508 0.30742 Mdot
0.26191 0.3262 Mdot
0.26076 0.34468 Mdot
0.26154 0.36281 Mdot
0.26413 0.38055 Mdot
0.26843 0.39784 Mdot
0.27434 0.41463 Mdot
0.28175 0.43087 Mdot
0.29055 0.44648 Mdot
0.30062 0.46139 Mdot
0.31186 0.4755 Mdot
0.32414 0.48873 Mdot
0.33734 0.50099 Mdot
0.35134 0.51218 Mdot
0.366 0.52224 Mdot
0.38121 0.53108 Mdot
0.39682 0.53865 Mdot
0.41272 0.54491 Mdot
0.42878 0.54985 Mdot
0.44487 0.55347 Mdot
0.46088 0.55577 Mdot
0.4767 0.55679 Mdot
0.49224 0.5566 Mdot
0.50741 0.55525 Mdot
0.52212 0.55282 Mdot
0.5363 0.54939 Mdot
0.5499 0.54507 Mdot
0.56287 0.53993 Mdot
0.57517 0.53409 Mdot
0.58677 0.52762 Mdot
0.59765 0.52062 Mdot
0.6078 0.51317 Mdot
0.6172 0.50536 Mdot
0.62587 0.49726 Mdot
0.6338 0.48894 Mdot
0.641 0.48045 Mdot
0.64749 0.47185 Mdot
0.65328 0.4632 Mdot
0.6584 0.45452 Mdot
0.66286 0.44588 Mdot
0.6667 0.43728 Mdot
0.66993 0.42878 Mdot
0.67258 0.42038 Mdot
0.67469 0.41212 Mdot
0.67628 0.40401 Mdot
0.67738 0.39606 Mdot
0.67801 0.3883 Mdot
0.6782 0.38073 Mdot
0.67799 0.37337 Mdot
0.6774 0.36621 Mdot
0.67646 0.35928 Mdot
0.67519 0.35257 Mdot
0.67362 0.34609 Mdot
0.67177 0.33985 Mdot
0.66967 0.33384 Mdot
0.66734 0.32808 Mdot
0.6648 0.32256 Mdot
0.66207 0.31728 Mdot
0.65918 0.31225 Mdot
0.65614 0.30746 Mdot
0.65297 0.30292 Mdot
0.64969 0.29861 Mdot
0.64632 0.29455 Mdot
0.64286 0.29073 Mdot
0.63934 0.28714 Mdot
0.63577 0.28378 Mdot
0.63216 0.28066 Mdot
0.62852 0.27776 Mdot
0.62487 0.27508 Mdot
0.62122 0.27262 Mdot
0.61757 0.27037 Mdot
0.61393 0.26833 Mdot
0.61032 0.2665 Mdot
0.60674 0.26486 Mdot
0.60319 0.26341 Mdot
0.59969 0.26216 Mdot
0.59624 0.26108 Mdot
0.59284 0.26018 Mdot
0.5895 0.25945 Mdot
0.58622 0.25889 Mdot
0.58301 0.25849 Mdot
0.57987 0.25825 Mdot
0.57681 0.25815 Mdot
0.57381 0.25821 Mdot
0.57089 0.2584 Mdot
0.56805 0.25873 Mdot
0.56529 0.2592 Mdot
0.5626 0.2598 Mdot
0.56 0.26052 Mdot
0.55747 0.26136 Mdot
0.55501 0.26233 Mdot
0.55264 0.26341 Mdot
0.55033 0.26461 Mdot
0.5481 0.26592 Mdot
0.54594 0.26735 Mdot
0.54385 0.26889 Mdot
0.54182 0.27054 Mdot
0.53985 0.27232 Mdot
0.53794 0.27421 Mdot
0.53608 0.27623 Mdot
0.53426 0.27837 Mdot
0.53249 0.28065 Mdot
0.53076 0.28308 Mdot
0.52905 0.28566 Mdot
0.52736 0.28841 Mdot
0.52568 0.29133 Mdot
0.52401 0.29443 Mdot
0.52234 0.29773 Mdot
0.52066 0.30121 Mdot
0.51898 0.30487 Mdot
0.5173 0.3087 Mdot
0.51562 0.31265 Mdot
0.51396 0.31668 Mdot
0.51234 0.32072 Mdot
0.51076 0.32471 Mdot
0.50927 0.32857 Mdot
0.50787 0.33223 Mdot
0.50659 0.33562 Mdot
0.50544 0.3387 Mdot
0.50442 0.34143 Mdot
0.50354 0.3438 Mdot
0.5028 0.34582 Mdot
0.50218 0.3475 Mdot
0.50168 0.34889 Mdot
0.50128 0.35 Mdot
0.50096 0.35088 Mdot
0.50071 0.35157 Mdot
0.50052 0.35209 Mdot
0.50038 0.35249 Mdot
0.50027 0.35279 Mdot
0.50019 0.35301 Mdot
0.50013 0.35317 Mdot
0.50009 0.35329 Mdot
0.50006 0.35337 Mdot
0.50004 0.35343 Mdot
0.50003 0.35347 Mdot
0.50002 0.3535 Mdot
0.50001 0.35352 Mdot
0.50001 0.35353 Mdot
0.50001 0.35354 Mdot
0.5 0.35354 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35355 Mdot
0.5 0.35356 Mdot
0.5 0.35357 Mdot
0.5 0.3536 Mdot
grestore
grestore
grestore
% End of Graphics
MathPictureEnd%%PSTrailer
end

%%EPS Trailer
grestore
grestore
gsave
54 36 466 756 rectclip
1 setlinewidth 0 setgray
gsave
96 695 424 26 rectclip
gsave
199 execuserobject setfont
0 setgray
96 695 1.677615e+07 26 rectclip
96 695 translate
1 1 1 setrgbcolor
0 0 424 26 rectfill
199 execuserobject setfont
0 setgray
2 23 moveto (                                                 \(c\)) show
grestore
grestore
grestore
gsave
54 36 466 756 rectclip
1 setlinewidth 0 setgray
gsave
96 729 424 26 rectclip
gsave
199 execuserobject setfont
0 setgray
96 729 1.677615e+07 26 rectclip
96 729 translate
1 1 1 setrgbcolor
0 0 424 26 rectfill
199 execuserobject setfont
0 setgray
2 23 moveto (                       Figure 4) show
grestore
grestore
grestore
gsave
54 11 466 14 rectclip
gsave
/Times-Roman findfont 12 scalefont [1 0 0 -1 0 0] makefont
27
exch
defineuserobject
27 execuserobject setfont
0 setgray
54 11 466 14 rectclip
54 11 translate
27 execuserobject setfont
0 setgray
2 11 moveto (Untitled-3) show
grestore
grestore
0.5 setlinewidth
520 25 moveto
54 25 lineto
stroke
1 setlinewidth
1 setlinewidth 0 setgray
gsave
54 11 466 14 rectclip
gsave
27 execuserobject setfont
0 setgray
54 11 466 14 rectclip
54 11 translate
27 execuserobject setfont
0 setgray
458 11 moveto (1) show
grestore
grestore
0.5 setlinewidth
520 25 moveto
54 25 lineto
stroke
1 setlinewidth
1 setlinewidth 0 setgray
grestore
grestore
showpage
__NXsheetsavetoken restore
%%PageTrailer
%%DocumentFonts: Courier-Bold
%%+ Times-Roman
%%Trailer
%%DocumentFonts: Courier-Bold
%%+ Times-Roman
%%Pages: 1 1
%%BoundingBox:0 0 612 792


